/**
    * @license
    * Copyright 2023 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@mediapipe/pose"),require("@tensorflow/tfjs-core"),require("@tensorflow/tfjs-converter")):"function"==typeof define&&define.amd?define(["exports","@mediapipe/pose","@tensorflow/tfjs-core","@tensorflow/tfjs-converter"],t):t((e=e||self).poseDetection={},e.globalThis,e.tf,e.tf)}(this,(function(e,t,n,i){"use strict";var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function a(e,t,n,i){return new(n||(n=Promise))((function(r,s){function o(e){try{u(i.next(e))}catch(e){s(e)}}function a(e){try{u(i.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((i=i.apply(e,t||[])).next())}))}function u(e,t){var n,i,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,i&&(r=2&s[0]?i.return:s[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,s[1])).done)return r;switch(i=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,i=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],i=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function l(e,t,n){if(n||2===arguments.length)for(var i,r=0,s=t.length;r<s;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))}var h=["nose","left_eye","right_eye","left_ear","right_ear","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle"],c=["nose","left_eye_inner","left_eye","left_eye_outer","right_eye_inner","right_eye","right_eye_outer","left_ear","right_ear","mouth_left","mouth_right","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_pinky","right_pinky","left_index","right_index","left_thumb","right_thumb","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle","left_heel","right_heel","left_foot_index","right_foot_index"],d={left:[1,2,3,7,9,11,13,15,17,19,21,23,25,27,29,31],right:[4,5,6,8,10,12,14,16,18,20,22,24,26,28,30,32],middle:[0]},p={left:[1,3,5,7,9,11,13,15],right:[2,4,6,8,10,12,14,16],middle:[0]},f=[[0,1],[0,2],[1,3],[2,4],[5,6],[5,7],[5,11],[6,8],[6,12],[7,9],[8,10],[11,12],[11,13],[12,14],[13,15],[14,16]],m=[[0,1],[0,4],[1,2],[2,3],[3,7],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[11,23],[12,14],[14,16],[12,24],[13,15],[15,17],[16,18],[16,20],[15,17],[15,19],[15,21],[16,22],[17,19],[18,20],[23,25],[23,24],[24,26],[25,27],[26,28],[27,29],[28,30],[27,31],[28,32],[29,31],[30,32]];function g(e){return e instanceof SVGAnimatedLength?e.baseVal.value:e}function b(e){return a(this,void 0,void 0,(function(){var t,i;return u(this,(function(r){switch(r.label){case 0:return t=document.createElement("canvas"),e instanceof n.Tensor?[4,n.browser.toPixels(e,t)]:[3,2];case 1:return r.sent(),[3,3];case 2:t.width=g(e.width),t.height=g(e.height),i=t.getContext("2d"),e instanceof ImageData?i.putImageData(e,0,0):i.drawImage(e,0,0),r.label=3;case 3:return[2,t]}}))}))}function y(e){return a(this,void 0,void 0,(function(){var t,i,r,s,o,a;return u(this,(function(u){switch(u.label){case 0:return e instanceof n.Tensor?(t=e.shape.slice(0,2),i=t[0],r=t[1],s=ImageData.bind,[4,n.browser.toPixels(e)]):[3,2];case 1:return[2,new(s.apply(ImageData,[void 0,u.sent(),r,i]))];case 2:return o=document.createElement("canvas"),a=o.getContext("2d"),o.width=g(e.width),o.height=g(e.height),a.drawImage(e,0,0),[2,a.getImageData(0,0,o.width,o.height)]}}))}))}function x(e){return a(this,void 0,void 0,(function(){var t,i;return u(this,(function(r){switch(r.label){case 0:return e instanceof SVGImageElement||e instanceof OffscreenCanvas?[4,b(e)]:[3,2];case 1:return i=r.sent(),[3,3];case 2:i=e,r.label=3;case 3:return t=i,[2,n.browser.fromPixels(t,4)]}}))}))}function w(e){if(e<0||e>=256)throw new Error("Mask value must be in range [0, 255] but got ".concat(e));if(!Number.isInteger(e))throw new Error("Mask value must be an integer but got ".concat(e))}var k={runtime:"mediapipe",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,modelType:"full"};var v=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return a(this,void 0,void 0,(function(){return u(this,(function(e){return[2,this.mask]}))}))},e.prototype.toImageData=function(){return a(this,void 0,void 0,(function(){return u(this,(function(e){return[2,y(this.mask)]}))}))},e.prototype.toTensor=function(){return a(this,void 0,void 0,(function(){return u(this,(function(e){return[2,x(this.mask)]}))}))},e.prototype.getUnderlyingType=function(){return"canvasimagesource"},e}();function S(e){return w(e),"person"}var I=function(){function e(e){var n,i=this;switch(this.width=0,this.height=0,this.selfieMode=!1,this.poseSolution=new t.Pose({locateFile:function(t,n){if(e.solutionPath){var i=e.solutionPath.replace(/\/+$/,"");return"".concat(i,"/").concat(t)}return"".concat(n,"/").concat(t)}}),e.modelType){case"lite":n=0;break;case"heavy":n=2;break;case"full":default:n=1}this.poseSolution.setOptions({modelComplexity:n,smoothLandmarks:e.enableSmoothing,enableSegmentation:e.enableSegmentation,smoothSegmentation:e.smoothSegmentation,selfieMode:this.selfieMode}),this.poseSolution.onResults((function(e){if(i.height=e.image.height,i.width=e.image.width,null==e.poseLandmarks)i.poses=[];else{var t=i.translateOutput(e.poseLandmarks,e.poseWorldLandmarks);e.segmentationMask&&(t.segmentation={maskValueToLabel:S,mask:new v(e.segmentationMask)}),i.poses=[t]}}))}return e.prototype.translateOutput=function(e,t){var n=this,i={keypoints:e.map((function(e,t){return{x:e.x*n.width,y:e.y*n.height,z:e.z,score:e.visibility,name:c[t]}}))};return null!=t&&(i.keypoints3D=t.map((function(e,t){return{x:e.x,y:e.y,z:e.z,score:e.visibility,name:c[t]}}))),i},e.prototype.estimatePoses=function(e,t,i){return a(this,void 0,void 0,(function(){var r,s;return u(this,(function(o){switch(o.label){case 0:return t&&t.flipHorizontal&&t.flipHorizontal!==this.selfieMode&&(this.selfieMode=t.flipHorizontal,this.poseSolution.setOptions({selfieMode:this.selfieMode})),e instanceof n.Tensor?(s=ImageData.bind,[4,n.browser.toPixels(e)]):[3,2];case 1:return r=new(s.apply(ImageData,[void 0,o.sent(),e.shape[1],e.shape[0]])),[3,3];case 2:r=e,o.label=3;case 3:return e=r,[4,this.poseSolution.send({image:e},i)];case 4:return o.sent(),[2,this.poses]}}))}))},e.prototype.dispose=function(){this.poseSolution.close()},e.prototype.reset=function(){this.poseSolution.reset()},e.prototype.initialize=function(){return this.poseSolution.initialize()},e}();function C(e){return a(this,void 0,void 0,(function(){var t,n;return u(this,(function(i){switch(i.label){case 0:return t=function(e){if(null==e)return o({},k);var t=o({},e);return t.runtime="mediapipe",null==t.enableSegmentation&&(t.enableSegmentation=k.enableSegmentation),null==t.enableSmoothing&&(t.enableSmoothing=k.enableSmoothing),null==t.smoothSegmentation&&(t.smoothSegmentation=k.smoothSegmentation),null==t.modelType&&(t.modelType=k.modelType),t}(e),[4,(n=new I(t)).initialize()];case 1:return i.sent(),[2,n]}}))}))}function T(e){return e instanceof n.Tensor?{height:e.shape[0],width:e.shape[1]}:{height:e.height,width:e.width}}function R(e){return e-2*Math.PI*Math.floor((e+Math.PI)/(2*Math.PI))}function A(e){return e instanceof n.Tensor?e:n.browser.fromPixels(e)}function $(e,t,n){return P(n,"inputResolution"),[1/n.width*e[0][0]*t.width,1/n.height*e[0][1]*t.width,e[0][3]*t.width,1/n.width*e[1][0]*t.height,1/n.height*e[1][1]*t.height,e[1][3]*t.height,0,0]}function P(e,t){n.util.assert(0!==e.width,(function(){return"".concat(t," width cannot be 0.")})),n.util.assert(0!==e.height,(function(){return"".concat(t," height cannot be 0.")}))}function z(e,t,n){var i=n.rotationVectorStartKeypointIndex,r=n.rotationVectorEndKeypointIndex,s=e.locationData,o=s.relativeKeypoints[i].x*t.width,a=s.relativeKeypoints[i].y*t.height,u=s.relativeKeypoints[r].x*t.width,l=s.relativeKeypoints[r].y*t.height,h=2*Math.sqrt((u-o)*(u-o)+(l-a)*(l-a)),c=function(e,t,n){var i,r=e.locationData,s=n.rotationVectorStartKeypointIndex,o=n.rotationVectorEndKeypointIndex;i=n.rotationVectorTargetAngle?n.rotationVectorTargetAngle:Math.PI*n.rotationVectorTargetAngleDegree/180;var a=r.relativeKeypoints[s].x*t.width,u=r.relativeKeypoints[s].y*t.height,l=r.relativeKeypoints[o].x*t.width,h=r.relativeKeypoints[o].y*t.height;return R(i-Math.atan2(-(h-u),l-a))}(e,t,n);return{xCenter:o/t.width,yCenter:a/t.height,width:h/t.width,height:h/t.height,rotation:c}}function _(e){if(16!==e.length)throw new Error("Array length must be 16 but got ".concat(e.length));return[[e[0],e[1],e[2],e[3]],[e[4],e[5],e[6],e[7]],[e[8],e[9],e[10],e[11]],[e[12],e[13],e[14],e[15]]]}function M(e,t,n,i,r,s,o){return e[t][r]*(e[n][s]*e[i][o]-e[n][o]*e[i][s])}function N(e,t,n){var i=(t+1)%4,r=(t+2)%4,s=(t+3)%4,o=(n+1)%4,a=(n+2)%4,u=(n+3)%4;return M(e,i,r,s,o,a,u)+M(e,r,s,i,o,a,u)+M(e,s,i,r,o,a,u)}function F(e,t,n){void 0===n&&(n={ignoreRotation:!1});for(var i=[],r=0,s=e;r<s.length;r++){var a=s[r],u=a.x-.5,l=a.y-.5,h=n.ignoreRotation?0:t.rotation,c=Math.cos(h)*u-Math.sin(h)*l,d=Math.sin(h)*u+Math.cos(h)*l;c=c*t.width+t.xCenter,d=d*t.height+t.yCenter;var p=a.z*t.width,f=o({},a);f.x=c,f.y=d,f.z=p,i.push(f)}return i}function E(e,t){var i=function(e,t,n,i){var r=t-e,s=i-n;if(0===r)throw new Error("Original min and max are both ".concat(e,", range cannot be 0."));var o=s/r;return{scale:o,offset:n-e*o}}(0,255,t[0],t[1]);return n.tidy((function(){return n.add(n.mul(e,i.scale),i.offset)}))}function O(e,t,i){var r,s,o,a,u,l,h,c,d,p,f,m,g,b,y=t.outputTensorSize,x=t.keepAspectRatio,w=t.borderMode,k=t.outputTensorFloatRange,v=T(e),S=function(e,t){return t?{xCenter:t.xCenter*e.width,yCenter:t.yCenter*e.height,width:t.width*e.width,height:t.height*e.height,rotation:t.rotation}:{xCenter:.5*e.width,yCenter:.5*e.height,width:e.width,height:e.height,rotation:0}}(v,i),I=function(e,t,n){if(void 0===n&&(n=!1),!n)return{top:0,left:0,right:0,bottom:0};var i=t.height,r=t.width;P(t,"targetSize"),P(e,"roi");var s,o,a=i/r,u=e.height/e.width,l=0,h=0;return a>u?(s=e.width,o=e.width*a,h=(1-u/a)/2):(s=e.height/a,o=e.height,l=(1-a/u)/2),e.width=s,e.height=o,{top:h,left:l,right:l,bottom:h}}(S,y,x),C=(r=S,s=v.width,o=v.height,a=!1,u=r.width,l=r.height,h=a?-1:1,c=Math.cos(r.rotation),d=Math.sin(r.rotation),p=r.xCenter,f=r.yCenter,m=1/s,g=1/o,(b=new Array(16))[0]=u*c*h*m,b[1]=-l*d*m,b[2]=0,b[3]=(-.5*u*c*h+.5*l*d+p)*m,b[4]=u*d*h*g,b[5]=l*c*g,b[6]=0,b[7]=(-.5*l*c-.5*u*d*h+f)*g,b[8]=0,b[9]=0,b[10]=u*m,b[11]=0,b[12]=0,b[13]=0,b[14]=0,b[15]=1,_(b));return{imageTensor:n.tidy((function(){var t=A(e),i=n.tensor2d($(C,v,y),[1,8]),r="zero"===w?"constant":"nearest",s=n.image.transform(n.expandDims(n.cast(t,"float32")),i,"bilinear",r,0,[y.height,y.width]);return null!=k?E(s,k):s})),padding:I,transformationMatrix:C}}function B(e,t,n,i){return 1===i?.5*(e+t):e+(t-e)*n/(i-1)}function L(e){return n.tidy((function(){var t=function(e){return n.tidy((function(){return[n.slice(e,[0,0,0],[1,-1,1]),n.slice(e,[0,0,1],[1,-1,-1])]}))}(e),i=t[0],r=t[1];return{boxes:n.squeeze(r),logits:n.squeeze(i)}}))}function D(e){return null!=e&&null!=e.currentTime}function U(e){for(var t={locationData:{relativeKeypoints:[]}},n=Number.MAX_SAFE_INTEGER,i=Number.MIN_SAFE_INTEGER,r=Number.MAX_SAFE_INTEGER,s=Number.MIN_SAFE_INTEGER,o=0;o<e.length;++o){var a=e[o];n=Math.min(n,a.x),i=Math.max(i,a.x),r=Math.min(r,a.y),s=Math.max(s,a.y),t.locationData.relativeKeypoints.push({x:a.x,y:a.y})}return t.locationData.relativeBoundingBox={xMin:n,yMin:r,xMax:i,yMax:s,width:i-n,height:s-r},t}function W(e,t,i,r){return a(this,void 0,void 0,(function(){var r,s,o,a,l;return u(this,(function(u){switch(u.label){case 0:return e.sort((function(e,t){return Math.max.apply(Math,t.score)-Math.max.apply(Math,e.score)})),r=n.tensor2d(e.map((function(e){return[e.locationData.relativeBoundingBox.yMin,e.locationData.relativeBoundingBox.xMin,e.locationData.relativeBoundingBox.yMax,e.locationData.relativeBoundingBox.xMax]}))),s=n.tensor1d(e.map((function(e){return e.score[0]}))),[4,n.image.nonMaxSuppressionAsync(r,s,t,i)];case 1:return[4,(o=u.sent()).array()];case 2:return a=u.sent(),l=e.filter((function(e,t){return a.indexOf(t)>-1})),n.dispose([r,s,o]),[2,l]}}))}))}function V(e,t){return e.map((function(e){var n=o(o({},e),{x:e.x*t.width,y:e.y*t.height});return null!=e.z&&(n.z=e.z*t.width),n}))}function G(e,t,i){return a(this,void 0,void 0,(function(){var r,s,a,l,h,c,d,p,f,m,g,b,y,x,w,k,v,S,I,C,T,R,A,$;return u(this,(function(u){switch(u.label){case 0:if(r=n.squeeze(t,[0]),s=r.shape,a=s[0],l=s[1],h=s[2],e.length!==h)throw new Error("Expected heatmap to have same number of channels as the number of landmarks. But got landmarks length: "+"".concat(e.length,", heatmap length: ").concat(h));return c=[],[4,r.buffer()];case 1:for(d=u.sent(),p=0;p<e.length;p++)if(f=e[p],m=o({},f),c.push(m),g=Math.trunc(m.x*l),b=Math.trunc(m.y*a),!(g<0||g>=l||b<0||g>=a)){for(y=Math.trunc((i.kernelSize-1)/2),x=Math.max(0,g-y),w=Math.min(l,g+y+1),k=Math.max(0,b-y),v=Math.min(a,b+y+1),S=0,I=0,C=0,T=0,R=k;R<v;++R)for(A=x;A<w;++A)$=d.get(R,A,p),S+=$,T=Math.max(T,$),I+=A*$,C+=R*$;T>=i.minConfidenceToRefine&&S>0&&(m.x=I/l/S,m.y=C/a/S)}return r.dispose(),[2,c]}}))}))}function H(e,t){var n=t.left,i=t.top,r=t.left+t.right,s=t.top+t.bottom;return e.map((function(e){return o(o({},e),{x:(e.x-n)/(1-r),y:(e.y-i)/(1-s),z:e.z/(1-r)})}))}function q(e,t,i){return"webgl"===n.getBackend()?function(e,t,i){var r=i.combineWithPreviousRatio.toFixed(2),s={variableNames:["prevMask","newMask"],outputShape:e.shape,userCode:"\n  void main() {\n      ivec2 coords = getOutputCoords();\n      int height = coords[0];\n      int width = coords[1];\n\n      float prevMaskValue = getPrevMask(height, width);\n      float newMaskValue = getNewMask(height, width);\n\n      /*\n      * Assume p := newMaskValue\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\n      * uncertainty alpha(p) =\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\n      * uncertainty]\n      *\n      * The following polynomial approximates uncertainty alpha as a\n      * function of (p + 0.5):\n      */\n      const float c1 = 5.68842;\n      const float c2 = -0.748699;\n      const float c3 = -57.8051;\n      const float c4 = 291.309;\n      const float c5 = -624.717;\n      float t = newMaskValue - 0.5;\n      float x = t * t;\n\n      float uncertainty =\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\n\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\n                             (uncertainty * ".concat(r,");\n\n      setOutput(outputValue);\n    }\n")},o=n.backend();return n.tidy((function(){var i=o.compileAndRun(s,[e,t]);return n.engine().makeTensorFromDataId(i.dataId,i.shape,i.dtype)}))}(e,t,i):n.tidy((function(){var r=n.sub(t,.5),s=n.square(r),o=n.sub(1,n.minimum(1,n.mul(s,n.add(5.68842,n.mul(s,n.add(-.748699,n.mul(s,n.add(-57.8051,n.mul(s,n.add(291.309,n.mul(s,-624.717)))))))))));return n.add(t,n.mul(n.sub(e,t),n.mul(o,i.combineWithPreviousRatio)))}))}function K(e,t,i){return a(this,void 0,void 0,(function(){var r,s,o,a,l;return u(this,(function(u){switch(u.label){case 0:return r=e[0],s=e[1],o=function(e,t,i){return n.tidy((function(){var r,s,o,a;i.reverseOutputOrder?(s=n.squeeze(n.slice(e,[0,i.boxCoordOffset+0],[-1,1])),r=n.squeeze(n.slice(e,[0,i.boxCoordOffset+1],[-1,1])),a=n.squeeze(n.slice(e,[0,i.boxCoordOffset+2],[-1,1])),o=n.squeeze(n.slice(e,[0,i.boxCoordOffset+3],[-1,1]))):(r=n.squeeze(n.slice(e,[0,i.boxCoordOffset+0],[-1,1])),s=n.squeeze(n.slice(e,[0,i.boxCoordOffset+1],[-1,1])),o=n.squeeze(n.slice(e,[0,i.boxCoordOffset+2],[-1,1])),a=n.squeeze(n.slice(e,[0,i.boxCoordOffset+3],[-1,1]))),s=n.add(n.mul(n.div(s,i.xScale),t.w),t.x),r=n.add(n.mul(n.div(r,i.yScale),t.h),t.y),i.applyExponentialOnBoxSize?(o=n.mul(n.exp(n.div(o,i.hScale)),t.h),a=n.mul(n.exp(n.div(a,i.wScale)),t.w)):(o=n.mul(n.div(o,i.hScale),t.h),a=n.mul(n.div(a,i.wScale),t.h));var u=n.sub(r,n.div(o,2)),l=n.sub(s,n.div(a,2)),h=n.add(r,n.div(o,2)),c=n.add(s,n.div(a,2)),d=n.concat([n.reshape(u,[i.numBoxes,1]),n.reshape(l,[i.numBoxes,1]),n.reshape(h,[i.numBoxes,1]),n.reshape(c,[i.numBoxes,1])],1);if(i.numKeypoints)for(var p=0;p<i.numKeypoints;++p){var f=i.keypointCoordOffset+p*i.numValuesPerKeypoint,m=void 0,g=void 0;i.reverseOutputOrder?(m=n.squeeze(n.slice(e,[0,f],[-1,1])),g=n.squeeze(n.slice(e,[0,f+1],[-1,1]))):(g=n.squeeze(n.slice(e,[0,f],[-1,1])),m=n.squeeze(n.slice(e,[0,f+1],[-1,1])));var b=n.add(n.mul(n.div(m,i.xScale),t.w),t.x),y=n.add(n.mul(n.div(g,i.yScale),t.h),t.y);d=n.concat([d,n.reshape(b,[i.numBoxes,1]),n.reshape(y,[i.numBoxes,1])],1)}return d}))}(s,t,i),a=n.tidy((function(){var e=r;return i.sigmoidScore?(null!=i.scoreClippingThresh&&(e=n.clipByValue(r,-i.scoreClippingThresh,i.scoreClippingThresh)),e=n.sigmoid(e)):e})),[4,X(o,a,i)];case 1:return l=u.sent(),n.dispose([o,a]),[2,l]}}))}))}function X(e,t,n){return a(this,void 0,void 0,(function(){var i,r,s,o,a,l,h,c,d,p,f,m;return u(this,(function(u){switch(u.label){case 0:return i=[],[4,e.data()];case 1:return r=u.sent(),[4,t.data()];case 2:for(s=u.sent(),o=0;o<n.numBoxes;++o)if(!(null!=n.minScoreThresh&&s[o]<n.minScoreThresh||(a=o*n.numCoords,l=j(r[a+0],r[a+1],r[a+2],r[a+3],s[o],n.flipVertically,o),(h=l.locationData.relativeBoundingBox).width<0||h.height<0))){if(n.numKeypoints>0)for((c=l.locationData).relativeKeypoints=[],d=n.numKeypoints*n.numValuesPerKeypoint,p=0;p<d;p+=n.numValuesPerKeypoint)f=a+n.keypointCoordOffset+p,m={x:r[f+0],y:n.flipVertically?1-r[f+1]:r[f+1]},c.relativeKeypoints.push(m);i.push(l)}return[2,i]}}))}))}function j(e,t,n,i,r,s,o){return{score:[r],ind:o,locationData:{relativeBoundingBox:{xMin:t,yMin:s?1-n:e,xMax:i,yMax:s?1-e:n,width:i-t,height:n-e}}}}function Y(e,t){return"none"===e?t:function(e){return 1/(1+Math.exp(-e))}(t)}function Q(e,t,n,i){return a(this,void 0,void 0,(function(){var r,s,o,a,l,h,c,d;return u(this,(function(u){switch(u.label){case 0:return n=n||t.flipHorizontally||!1,i=i||t.flipVertically||!1,r=e.size,s=r/t.numLandmarks,[4,e.data()];case 1:for(o=u.sent(),a=[],l=0;l<t.numLandmarks;++l)h=l*s,(d={x:0,y:0}).x=n?t.inputImageWidth-o[h]:o[h],s>1&&(d.y=i?t.inputImageHeight-o[h+1]:o[h+1]),s>2&&(d.z=o[h+2]),s>3&&(d.score=Y(t.visibilityActivation,o[h+3])),a.push(d);for(c=0;c<a.length;++c)(d=a[c]).x=d.x/t.inputImageWidth,d.y=d.y/t.inputImageHeight,d.z=d.z/t.inputImageWidth/(t.normalizeZ||1);return[2,a]}}))}))}function Z(e,t,n){var i=e.width,r=e.height,s=e.rotation;if(null==n.rotation&&null==n.rotationDegree||(s=function(e,t){null!=t.rotation?e+=t.rotation:null!=t.rotationDegree&&(e+=Math.PI*t.rotationDegree/180);return R(e)}(s,n)),0===s)e.xCenter=e.xCenter+i*n.shiftX,e.yCenter=e.yCenter+r*n.shiftY;else{var o=(t.width*i*n.shiftX*Math.cos(s)-t.height*r*n.shiftY*Math.sin(s))/t.width,a=(t.width*i*n.shiftX*Math.sin(s)+t.height*r*n.shiftY*Math.cos(s))/t.height;e.xCenter=e.xCenter+o,e.yCenter=e.yCenter+a}if(n.squareLong){var u=Math.max(i*t.width,r*t.height);i=u/t.width,r=u/t.height}else if(n.squareShort){var l=Math.min(i*t.width,r*t.height);i=l/t.width,r=l/t.height}return e.width=i*n.scaleX,e.height=r*n.scaleY,e}function J(e,t){return e.map((function(e){var n=o(o({},e),{x:e.x/t.width,y:e.y/t.height});return null!=e.z&&(e.z=e.z/t.width),n}))}var ee=function(){function e(e){this.alpha=e,this.initialized=!1}return e.prototype.apply=function(e,t){var n;return this.initialized?n=null==t?this.storedValue+this.alpha*(e-this.storedValue):this.storedValue+this.alpha*t*Math.asinh((e-this.storedValue)/t):(n=e,this.initialized=!0),this.rawValue=e,this.storedValue=n,n},e.prototype.applyWithAlpha=function(e,t,n){return this.alpha=t,this.apply(e,n)},e.prototype.hasLastRawValue=function(){return this.initialized},e.prototype.lastRawValue=function(){return this.rawValue},e.prototype.reset=function(){this.initialized=!1},e}(),te=function(){function e(e){this.frequency=e.frequency,this.minCutOff=e.minCutOff,this.beta=e.beta,this.thresholdCutOff=e.thresholdCutOff,this.thresholdBeta=e.thresholdBeta,this.derivateCutOff=e.derivateCutOff,this.x=new ee(this.getAlpha(this.minCutOff)),this.dx=new ee(this.getAlpha(this.derivateCutOff)),this.lastTimestamp=0}return e.prototype.apply=function(e,t,n){if(null==e)return e;var i=Math.trunc(t);if(this.lastTimestamp>=i)return e;0!==this.lastTimestamp&&0!==i&&(this.frequency=1/(1e-6*(i-this.lastTimestamp))),this.lastTimestamp=i;var r=this.x.hasLastRawValue()?(e-this.x.lastRawValue())*n*this.frequency:0,s=this.dx.applyWithAlpha(r,this.getAlpha(this.derivateCutOff)),o=this.minCutOff+this.beta*Math.abs(s),a=null!=this.thresholdCutOff?this.thresholdCutOff+this.thresholdBeta*Math.abs(s):null;return this.x.applyWithAlpha(e,this.getAlpha(o),a)},e.prototype.getAlpha=function(e){return 1/(1+this.frequency/(2*Math.PI*e))},e}(),ne=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,n){var i=this;if(null==e)return this.reset(),null;this.initializeFiltersIfEmpty(e);var r=1;if(!this.config.disableValueScaling){if(n<this.config.minAllowedObjectScale)return l([],e,!0);r=1/n}return e.map((function(e,n){var s=o(o({},e),{x:i.xFilters[n].apply(e.x,t,r),y:i.yFilters[n].apply(e.y,t,r)});return null!=e.z&&(s.z=i.zFilters[n].apply(e.z,t,r)),s}))},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map((function(e){return new te(t.config)})),this.yFilters=e.map((function(e){return new te(t.config)})),this.zFilters=e.map((function(e){return new te(t.config)})))},e}(),ie=function(){function e(e){this.config=e,this.window=[],this.lowPassFilter=new ee(1),this.lastValue=0,this.lastValueScale=1,this.lastTimestamp=-1}return e.prototype.apply=function(e,t,n){if(null==e)return e;var i,r=Math.trunc(t);if(this.lastTimestamp>=r)return e;if(-1===this.lastTimestamp)i=1;else{for(var s=e*n-this.lastValue*this.lastValueScale,o=r-this.lastTimestamp,a=s,u=o,l=(1+this.window.length)*(1e6/30),h=0,c=this.window;h<c.length;h++){var d=c[h];if(u+d.duration>l)break;a+=d.distance,u+=d.duration}var p=a/(1e-6*u);i=1-1/(1+this.config.velocityScale*Math.abs(p)),this.window.unshift({distance:s,duration:o}),this.window.length>this.config.windowSize&&this.window.pop()}return this.lastValue=e,this.lastValueScale=n,this.lastTimestamp=r,this.lowPassFilter.applyWithAlpha(e,i)},e}(),re=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,n){var i=this;if(null==e)return this.reset(),null;var r=1;if(!this.config.disableValueScaling){if(n<this.config.minAllowedObjectScale)return l([],e,!0);r=1/n}return this.initializeFiltersIfEmpty(e),e.map((function(e,n){var s=o(o({},e),{x:i.xFilters[n].apply(e.x,t,r),y:i.yFilters[n].apply(e.y,t,r)});return null!=e.z&&(s.z=i.zFilters[n].apply(e.z,t,r)),s}))},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map((function(e){return new ie(t.config)})),this.yFilters=e.map((function(e){return new ie(t.config)})),this.zFilters=e.map((function(e){return new ie(t.config)})))},e}(),se=function(){function e(e){if(null!=e.velocityFilter)this.keypointsFilter=new re(e.velocityFilter);else{if(null==e.oneEuroFilter)throw new Error("Either configure velocityFilter or oneEuroFilter, but got "+"".concat(e,"."));this.keypointsFilter=new ne(e.oneEuroFilter)}}return e.prototype.apply=function(e,t,n,i,r){if(void 0===i&&(i=!1),null==e)return this.keypointsFilter.reset(),null;var s=null!=r?function(e,t){return(e.width*t.width+e.height*t.height)/2}(r,n):1,o=i?V(e,n):e,a=this.keypointsFilter.apply(o,t,s);return i?J(a,n):a},e}(),oe=function(){function e(e){this.alpha=e.alpha}return e.prototype.apply=function(e){var t=this;if(null==e)return this.visibilityFilters=null,null;null!=this.visibilityFilters&&this.visibilityFilters.length===e.length||(this.visibilityFilters=e.map((function(e){return new ee(t.alpha)})));for(var n=[],i=0;i<e.length;++i){var r=e[i],s=o({},r);s.score=this.visibilityFilters[i].apply(r.score),n.push(s)}return n},e}(),ae={reduceBoxesInLowestlayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:5,minScale:.1484375,maxScale:.75,inputSizeHeight:224,inputSizeWidth:224,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,32,32,32],aspectRatios:[1],fixedAnchorSize:!0},ue={runtime:"tfjs",modelType:"full",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,detectorModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/detector/1",landmarkModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"},le={maxPoses:1,flipHorizontal:!1},he={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2254,numCoords:12,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:4,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:224,yScale:224,hScale:224,wScale:224,minScoreThresh:.5},ce=.3,de={shiftX:0,shiftY:0,scaleX:1.25,scaleY:1.25,squareLong:!0},pe={outputTensorSize:{width:224,height:224},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},fe={outputTensorSize:{width:256,height:256},keepAspectRatio:!0,outputTensorFloatRange:[0,1],borderMode:"zero"},me={numLandmarks:39,inputImageWidth:256,inputImageHeight:256,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},ge={numLandmarks:39,inputImageWidth:1,inputImageHeight:1,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},be={kernelSize:7,minConfidenceToRefine:.5},ye={alpha:.1},xe={oneEuroFilter:{frequency:30,minCutOff:.05,beta:80,derivateCutOff:1,minAllowedObjectScale:1e-6}},we={oneEuroFilter:{frequency:30,minCutOff:.01,beta:10,derivateCutOff:1,minAllowedObjectScale:1e-6}},ke={oneEuroFilter:{frequency:30,minCutOff:.1,beta:40,derivateCutOff:1,minAllowedObjectScale:1e-6,disableValueScaling:!0}},ve={activation:"none"},Se={combineWithPreviousRatio:.7};var Ie=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return a(this,void 0,void 0,(function(){return u(this,(function(e){return[2,b(this.mask)]}))}))},e.prototype.toImageData=function(){return a(this,void 0,void 0,(function(){return u(this,(function(e){return[2,y(this.mask)]}))}))},e.prototype.toTensor=function(){return a(this,void 0,void 0,(function(){return u(this,(function(e){return[2,this.mask]}))}))},e.prototype.getUnderlyingType=function(){return"tensor"},e}();function Ce(e){return w(e),"person"}var Te=function(){function e(e,t,i,r,s,o){this.detectorModel=e,this.landmarkModel=t,this.enableSmoothing=i,this.enableSegmentation=r,this.smoothSegmentation=s,this.modelType=o,this.regionOfInterest=null,this.prevFilteredSegmentationMask=null,this.anchors=function(e){null==e.reduceBoxesInLowestLayer&&(e.reduceBoxesInLowestLayer=!1),null==e.interpolatedScaleAspectRatio&&(e.interpolatedScaleAspectRatio=1),null==e.fixedAnchorSize&&(e.fixedAnchorSize=!1);for(var t=[],n=0;n<e.numLayers;){for(var i=[],r=[],s=[],o=[],a=n;a<e.strides.length&&e.strides[a]===e.strides[n];){var u=B(e.minScale,e.maxScale,a,e.strides.length);if(0===a&&e.reduceBoxesInLowestLayer)s.push(1),s.push(2),s.push(.5),o.push(.1),o.push(u),o.push(u);else{for(var l=0;l<e.aspectRatios.length;++l)s.push(e.aspectRatios[l]),o.push(u);if(e.interpolatedScaleAspectRatio>0){var h=a===e.strides.length-1?1:B(e.minScale,e.maxScale,a+1,e.strides.length);o.push(Math.sqrt(u*h)),s.push(e.interpolatedScaleAspectRatio)}}a++}for(var c=0;c<s.length;++c){var d=Math.sqrt(s[c]);i.push(o[c]/d),r.push(o[c]*d)}var p=0,f=0;if(e.featureMapHeight.length>0)p=e.featureMapHeight[n],f=e.featureMapWidth[n];else{var m=e.strides[n];p=Math.ceil(e.inputSizeHeight/m),f=Math.ceil(e.inputSizeWidth/m)}for(var g=0;g<p;++g)for(var b=0;b<f;++b)for(var y=0;y<i.length;++y){var x={xCenter:(b+e.anchorOffsetX)/f,yCenter:(g+e.anchorOffsetY)/p,width:0,height:0};e.fixedAnchorSize?(x.width=1,x.height=1):(x.width=r[y],x.height=i[y]),t.push(x)}n=a}return t}(ae);var a=n.tensor1d(this.anchors.map((function(e){return e.width}))),u=n.tensor1d(this.anchors.map((function(e){return e.height}))),l=n.tensor1d(this.anchors.map((function(e){return e.xCenter}))),h=n.tensor1d(this.anchors.map((function(e){return e.yCenter})));this.anchorTensor={x:l,y:h,w:a,h:u},this.prevFilteredSegmentationMask=this.enableSegmentation?n.tensor2d([],[0,0]):null}return e.prototype.estimatePoses=function(e,t,i){return a(this,void 0,void 0,(function(){var r,s,a,l,h,d,p,f,m,g,b,y,x,w,k,v,S,I,C,R,$,P,z;return u(this,(function(u){switch(u.label){case 0:return r=function(e){var t;if(null==(t=null==e?le:o({},e)).maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw new Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1)throw new Error("Multi-pose detection is not implemented yet. Please set maxPoses to 1.");return t}(t),null==e?(this.reset(),[2,[]]):(this.maxPoses=r.maxPoses,this.timestamp=null!=i?1e3*i:D(e)?1e6*e.currentTime:null,s=T(e),a=n.tidy((function(){return n.cast(A(e),"float32")})),null!=(l=this.regionOfInterest)?[3,2]:[4,this.detectPose(a)]);case 1:if(0===(h=u.sent()).length)return this.reset(),a.dispose(),[2,[]];d=h[0],l=this.poseDetectionToRoi(d,s),u.label=2;case 2:return[4,this.poseLandmarksByRoi(l,a)];case 3:return p=u.sent(),a.dispose(),null==p?(this.reset(),[2,[]]):(f=p.landmarks,m=p.auxiliaryLandmarks,g=p.poseScore,b=p.worldLandmarks,y=p.segmentationMask,x=this.poseLandmarkFiltering(f,m,b,s),w=x.actualLandmarksFiltered,k=x.auxiliaryLandmarksFiltered,v=x.actualWorldLandmarksFiltered,S=this.poseLandmarksToRoi(k,s),this.regionOfInterest=S,I=this.smoothSegmentation&&null!=y?this.poseSegmentationFiltering(y):y,null!=(C=null!=w?V(w,s):null)&&C.forEach((function(e,t){e.name=c[t]})),null!=(R=v)&&R.forEach((function(e,t){e.name=c[t]})),$={score:g,keypoints:C,keypoints3D:R},null!==I&&(P=n.tidy((function(){var e=n.expandDims(I,2),t=n.pad(e,[[0,0],[0,0],[0,1]]);return n.mirrorPad(t,[[0,0],[0,0],[0,2]],"symmetric")})),this.smoothSegmentation||n.dispose(I),z={maskValueToLabel:Ce,mask:new Ie(P)},$.segmentation=z),[2,[$]])}}))}))},e.prototype.poseSegmentationFiltering=function(e){var t=this.prevFilteredSegmentationMask;return 0===t.size?this.prevFilteredSegmentationMask=e:(this.prevFilteredSegmentationMask=q(t,e,Se),n.dispose(e)),n.dispose(t),this.prevFilteredSegmentationMask},e.prototype.dispose=function(){this.detectorModel.dispose(),this.landmarkModel.dispose(),n.dispose([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h,this.prevFilteredSegmentationMask])},e.prototype.reset=function(){this.regionOfInterest=null,this.enableSegmentation&&(n.dispose(this.prevFilteredSegmentationMask),this.prevFilteredSegmentationMask=n.tensor2d([],[0,0])),this.visibilitySmoothingFilterActual=null,this.visibilitySmoothingFilterAuxiliary=null,this.landmarksSmoothingFilterActual=null,this.landmarksSmoothingFilterAuxiliary=null},e.prototype.detectPose=function(e){return a(this,void 0,void 0,(function(){var t,i,r,s,o,a,l,h,c,d;return u(this,(function(u){switch(u.label){case 0:return t=O(e,pe),i=t.imageTensor,r=t.padding,s=this.detectorModel.predict(i),o=L(s),a=o.boxes,[4,K([l=o.logits,a],this.anchorTensor,he)];case 1:return 0===(h=u.sent()).length?(n.dispose([i,s,l,a]),[2,h]):[4,W(h,this.maxPoses,ce)];case 2:return c=u.sent(),d=function(e,t){void 0===e&&(e=[]);for(var n=t.left,i=t.top,r=t.left+t.right,s=t.top+t.bottom,o=0;o<e.length;o++){var a=e[o],u=a.locationData.relativeBoundingBox,l=(u.xMin-n)/(1-r),h=(u.yMin-i)/(1-s),c=u.width/(1-r),d=u.height/(1-s);u.xMin=l,u.yMin=h,u.width=c,u.height=d,u.xMax=l+c,u.yMax=h+d;var p=a.locationData.relativeKeypoints;p&&p.forEach((function(e){var t=(e.x-n)/(1-r),o=(e.y-i)/(1-s);e.x=t,e.y=o}))}return e}(c,r),n.dispose([i,s,l,a]),[2,d]}}))}))},e.prototype.poseDetectionToRoi=function(e,t){return 0,1,Z(z(e,t,{rotationVectorEndKeypointIndex:1,rotationVectorStartKeypointIndex:0,rotationVectorTargetAngleDegree:90}),t,de)},e.prototype.poseLandmarksByRoi=function(e,t){return a(this,void 0,void 0,(function(){var i,r,s,a,l,h,c,d,p,f,m,g,b,y;return u(this,(function(u){switch(u.label){case 0:if(i=T(t),r=O(t,fe,e),s=r.imageTensor,a=r.padding,l=r.transformationMatrix,"lite"!==this.modelType&&"full"!==this.modelType&&"heavy"!==this.modelType)throw new Error("Model type must be one of lite, full or heavy,"+"but got ".concat(this.modelType));return h=["ld_3d","output_poseflag","activation_heatmap","world_3d"],this.enableSegmentation&&h.push("activation_segmentation"),c=this.landmarkModel.execute(s,h),[4,this.tensorsToPoseLandmarksAndSegmentation(c)];case 1:return null==(d=u.sent())?(n.dispose(c),n.dispose(s),[2,null]):(p=d.landmarks,f=d.auxiliaryLandmarks,m=d.poseScore,g=d.worldLandmarks,b=d.segmentationMask,[4,this.poseLandmarksAndSegmentationInverseProjection(i,e,a,l,p,f,g,b)]);case 2:return y=u.sent(),n.dispose(c),n.dispose(s),[2,o({poseScore:m},y)]}}))}))},e.prototype.poseLandmarksAndSegmentationInverseProjection=function(e,t,i,r,s,l,h,c){return a(this,void 0,void 0,(function(){var a,d,p,f,m,g;return u(this,(function(u){return a=H(s,i),d=H(l,i),p=F(a,t),f=F(d,t),m=function(e,t){for(var n=[],i=0,r=e;i<r.length;i++){var s=r[i],a=s.x,u=s.y,l=t.rotation,h=Math.cos(l)*a-Math.sin(l)*u,c=Math.sin(l)*a+Math.cos(l)*u,d=o({},s);d.x=h,d.y=c,n.push(d)}return n}(h,t),g=null,this.enableSegmentation&&(g=n.tidy((function(){var t=c.shape,i=t[0],s=t[1],o=function(e){var t=_(new Array(16).fill(0));t[0][0]=N(e,0,0),t[1][0]=-N(e,0,1),t[2][0]=N(e,0,2),t[3][0]=-N(e,0,3),t[0][2]=N(e,2,0),t[1][2]=-N(e,2,1),t[2][2]=N(e,2,2),t[3][2]=-N(e,2,3),t[0][1]=-N(e,1,0),t[1][1]=N(e,1,1),t[2][1]=-N(e,1,2),t[3][1]=N(e,1,3),t[0][3]=-N(e,3,0),t[1][3]=N(e,3,1),t[2][3]=-N(e,3,2),t[3][3]=N(e,3,3);for(var n=e[0][0]*t[0][0]+e[1][0]*t[0][1]+e[2][0]*t[0][2]+e[3][0]*t[0][3],i=0;i<t.length;i++)for(var r=0;r<t.length;r++)t[i][r]/=n;return t}(r),a=n.tensor2d($(o,{width:s,height:i},e),[1,8]),u=[1,i,s,1];return n.squeeze(n.image.transform(n.reshape(c,u),a,"bilinear","constant",0,[e.height,e.width]),[0,3])})),n.dispose(c)),[2,{landmarks:p,auxiliaryLandmarks:f,worldLandmarks:m,segmentationMask:g}]}))}))},e.prototype.tensorsToPoseLandmarksAndSegmentation=function(e){return a(this,void 0,void 0,(function(){var t,i,r,s,a,l,h,c,d,p,f,m,g;return u(this,(function(u){switch(u.label){case 0:return t=e[0],i=e[1],r=e[2],s=e[3],a=this.enableSegmentation?e[4]:null,[4,i.data()];case 1:return(l=u.sent()[0])<.5?[2,null]:[4,Q(t,me)];case 2:return[4,G(u.sent(),r,be)];case 3:return h=u.sent(),c=h.slice(0,33),d=h.slice(33,35),[4,Q(s,ge)];case 4:return p=u.sent(),f=p.slice(0,33),m=function(e,t,n){void 0===n&&(n=!0);for(var i=[],r=0;r<e.length;r++){var s=o({},t[r]);n&&(s.score=e[r].score),i.push(s)}return i}(c,f,!0),g=this.enableSegmentation?function(e,t,i){return n.tidy((function(){var r=n.squeeze(e,[0]),s=r.shape[2];if(1===s){var o=r;switch(t.activation){case"none":break;case"sigmoid":o=n.sigmoid(o);break;case"softmax":throw new Error("Softmax activation requires two channels.");default:throw new Error("Activation not supported (".concat(t.activation,")"))}var a=i?n.image.resizeBilinear(o,[i.height,i.width]):o;return n.squeeze(a,[2])}throw new Error("Unsupported number of tensor channels ".concat(s))}))}(a,ve):null,[2,{landmarks:c,auxiliaryLandmarks:d,poseScore:l,worldLandmarks:m,segmentationMask:g}]}}))}))},e.prototype.poseLandmarksToRoi=function(e,t){return Z(z(U(e),t,{rotationVectorStartKeypointIndex:0,rotationVectorEndKeypointIndex:1,rotationVectorTargetAngleDegree:90}),t,de)},e.prototype.poseLandmarkFiltering=function(e,t,n,i){var r,s,o;if(null!=this.timestamp&&this.enableSmoothing){var a=z(U(t),i,{rotationVectorEndKeypointIndex:0,rotationVectorStartKeypointIndex:1,rotationVectorTargetAngleDegree:90});null==this.visibilitySmoothingFilterActual&&(this.visibilitySmoothingFilterActual=new oe(ye)),r=this.visibilitySmoothingFilterActual.apply(e),null==this.visibilitySmoothingFilterAuxiliary&&(this.visibilitySmoothingFilterAuxiliary=new oe(ye)),s=this.visibilitySmoothingFilterAuxiliary.apply(t),o=this.visibilitySmoothingFilterActual.apply(n),null==this.landmarksSmoothingFilterActual&&(this.landmarksSmoothingFilterActual=new se(xe)),r=this.landmarksSmoothingFilterActual.apply(r,this.timestamp,i,!0,a),null==this.landmarksSmoothingFilterAuxiliary&&(this.landmarksSmoothingFilterAuxiliary=new se(we)),s=this.landmarksSmoothingFilterAuxiliary.apply(s,this.timestamp,i,!0,a),null==this.worldLandmarksSmoothingFilterActual&&(this.worldLandmarksSmoothingFilterActual=new se(ke)),o=this.worldLandmarksSmoothingFilterActual.apply(n,this.timestamp)}else r=e,s=t,o=n;return{actualLandmarksFiltered:r,auxiliaryLandmarksFiltered:s,actualWorldLandmarksFiltered:o}},e}();function Re(e){return a(this,void 0,void 0,(function(){var t,n,r,s,a,l;return u(this,(function(u){switch(u.label){case 0:return t=function(e){var t=o({},null==e?ue:e);if(null==t.enableSmoothing&&(t.enableSmoothing=ue.enableSmoothing),null==t.enableSegmentation&&(t.enableSegmentation=ue.enableSegmentation),null==t.smoothSegmentation&&(t.smoothSegmentation=ue.smoothSegmentation),null==t.modelType&&(t.modelType=ue.modelType),null==t.detectorModelUrl&&(t.detectorModelUrl=ue.detectorModelUrl),null==t.landmarkModelUrl)switch(t.modelType){case"lite":t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/lite/2";break;case"heavy":t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/heavy/2";break;case"full":default:t.landmarkModelUrl="https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"}return t}(e),n="string"==typeof t.detectorModelUrl&&t.detectorModelUrl.indexOf("https://tfhub.dev")>-1,r="string"==typeof t.landmarkModelUrl&&t.landmarkModelUrl.indexOf("https://tfhub.dev")>-1,[4,Promise.all([i.loadGraphModel(t.detectorModelUrl,{fromTFHub:n}),i.loadGraphModel(t.landmarkModelUrl,{fromTFHub:r})])];case 1:return s=u.sent(),a=s[0],l=s[1],[2,new Te(a,l,t.enableSmoothing,t.enableSegmentation,t.smoothSegmentation,t.modelType)]}}))}))}var Ae,$e,Pe=function(){function e(e){!function(e){if(e.maxTracks<1)throw new Error("Must specify 'maxTracks' to be at least 1, but "+"encountered ".concat(e.maxTracks));if(e.maxAge<=0)throw new Error("Must specify 'maxAge' to be positive, but "+"encountered ".concat(e.maxAge));if(void 0!==e.keypointTrackerParams){if(e.keypointTrackerParams.keypointConfidenceThreshold<0||e.keypointTrackerParams.keypointConfidenceThreshold>1)throw new Error("Must specify 'keypointConfidenceThreshold' to be in the range [0, 1], but encountered "+"".concat(e.keypointTrackerParams.keypointConfidenceThreshold));if(e.keypointTrackerParams.minNumberOfKeypoints<1)throw new Error("Must specify 'minNumberOfKeypoints' to be at least 1, but "+"encountered ".concat(e.keypointTrackerParams.minNumberOfKeypoints));for(var t=0,n=e.keypointTrackerParams.keypointFalloff;t<n.length;t++){var i=n[t];if(i<=0)throw new Error("Must specify each keypoint falloff parameterto be positive "+"but encountered ".concat(i))}}}(e),this.tracks=[],this.maxTracks=e.maxTracks,this.maxAge=1e3*e.maxAge,this.minSimilarity=e.minSimilarity,this.nextID=1}return e.prototype.apply=function(e,t){this.filterOldTracks(t);var n=this.computeSimilarity(e);return this.assignTracks(e,n,t),this.updateTracks(t),e},e.prototype.getTracks=function(){return this.tracks.slice()},e.prototype.getTrackIDs=function(){return new Set(this.tracks.map((function(e){return e.id})))},e.prototype.filterOldTracks=function(e){var t=this;this.tracks=this.tracks.filter((function(n){return e-n.lastTimestamp<=t.maxAge}))},e.prototype.assignTracks=function(e,t,n){for(var i=Array.from(Array(t[0].length).keys()),r=[],s=0,o=Array.from(Array(e.length).keys());s<o.length;s++){var a=o[s];if(0!==i.length){for(var u=-1,l=-1,h=0,c=i;h<c.length;h++){var d=c[h],p=t[a][d];p>=this.minSimilarity&&p>l&&(u=d,l=p)}if(u>=0){var f=this.tracks[u];f=Object.assign(f,this.createTrack(e[a],n,f.id)),e[a].id=f.id;var m=i.indexOf(u);i.splice(m,1)}else r.push(a)}else r.push(a)}for(var g=0,b=r;g<b.length;g++){a=b[g];var y=this.createTrack(e[a],n);this.tracks.push(y),e[a].id=y.id}},e.prototype.updateTracks=function(e){this.tracks.sort((function(e,t){return t.lastTimestamp-e.lastTimestamp})),this.tracks=this.tracks.slice(0,this.maxTracks)},e.prototype.createTrack=function(e,t,n){var i={id:n||this.nextTrackID(),lastTimestamp:t,keypoints:l([],e.keypoints,!0).map((function(e){return o({},e)}))};return void 0!==e.box&&(i.box=o({},e.box)),i},e.prototype.nextTrackID=function(){var e=this.nextID;return this.nextID+=1,e},e.prototype.remove=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.tracks=this.tracks.filter((function(t){return!e.includes(t.id)}))},e.prototype.reset=function(){this.tracks=[]},e}(),ze=function(e){function t(t){return e.call(this,t)||this}return s(t,e),t.prototype.computeSimilarity=function(e){var t=this;return 0===e.length||0===this.tracks.length?[[]]:e.map((function(e){return t.tracks.map((function(n){return t.iou(e,n)}))}))},t.prototype.iou=function(e,t){var n=Math.max(e.box.xMin,t.box.xMin),i=Math.max(e.box.yMin,t.box.yMin),r=Math.min(e.box.xMax,t.box.xMax),s=Math.min(e.box.yMax,t.box.yMax);if(n>=r||i>=s)return 0;var o=(r-n)*(s-i);return o/(e.box.width*e.box.height+t.box.width*t.box.height-o)},t}(Pe),_e=function(e){function t(t){var n=e.call(this,t)||this;return n.keypointThreshold=t.keypointTrackerParams.keypointConfidenceThreshold,n.keypointFalloff=t.keypointTrackerParams.keypointFalloff,n.minNumKeyoints=t.keypointTrackerParams.minNumberOfKeypoints,n}return s(t,e),t.prototype.computeSimilarity=function(e){if(0===e.length||0===this.tracks.length)return[[]];for(var t=[],n=0,i=e;n<i.length;n++){for(var r=i[n],s=[],o=0,a=this.tracks;o<a.length;o++){var u=a[o];s.push(this.oks(r,u))}t.push(s)}return t},t.prototype.oks=function(e,t){for(var n=this.area(t.keypoints)+1e-6,i=0,r=0,s=0;s<e.keypoints.length;++s){var o=e.keypoints[s],a=t.keypoints[s];if(!(o.score<this.keypointThreshold||a.score<this.keypointThreshold)){r+=1;var u=Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2),l=2*this.keypointFalloff[s];i+=Math.exp(-1*u/(2*n*Math.pow(l,2)))}}return r<this.minNumKeyoints?0:i/r},t.prototype.area=function(e){var t=this,n=e.filter((function(e){return e.score>t.keypointThreshold})),i=Math.min.apply(Math,l([1],n.map((function(e){return e.x})),!1)),r=Math.max.apply(Math,l([0],n.map((function(e){return e.x})),!1)),s=Math.min.apply(Math,l([1],n.map((function(e){return e.y})),!1));return(r-i)*(Math.max.apply(Math,l([0],n.map((function(e){return e.y})),!1))-s)},t}(Pe);function Me(t){switch(t){case e.SupportedModels.BlazePose:return c.reduce((function(e,t,n){return e[t]=n,e}),{});case e.SupportedModels.PoseNet:case e.SupportedModels.MoveNet:return h.reduce((function(e,t,n){return e[t]=n,e}),{});default:throw new Error("Model ".concat(t," is not supported."))}}(Ae=e.TrackerType||(e.TrackerType={})).Keypoint="keypoint",Ae.BoundingBox="boundingBox",($e=e.SupportedModels||(e.SupportedModels={})).MoveNet="MoveNet",$e.BlazePose="BlazePose",$e.PoseNet="PoseNet";var Ne=Object.freeze({__proto__:null,getKeypointIndexBySide:function(t){switch(t){case e.SupportedModels.BlazePose:return d;case e.SupportedModels.PoseNet:case e.SupportedModels.MoveNet:return p;default:throw new Error("Model ".concat(t," is not supported."))}},getAdjacentPairs:function(t){switch(t){case e.SupportedModels.BlazePose:return m;case e.SupportedModels.PoseNet:case e.SupportedModels.MoveNet:return f;default:throw new Error("Model ".concat(t," is not supported."))}},getKeypointIndexByName:Me}),Fe=["SinglePose.Lightning","SinglePose.Thunder","MultiPose.Lightning"],Ee={modelType:"SinglePose.Lightning",enableSmoothing:!0},Oe={},Be={frequency:30,minCutOff:2.5,beta:300,derivateCutOff:2.5,thresholdCutOff:.5,thresholdBeta:5,disableValueScaling:!0},Le={maxTracks:18,maxAge:1e3,minSimilarity:.2,keypointTrackerParams:{keypointConfidenceThreshold:.3,keypointFalloff:[.026,.025,.025,.035,.035,.079,.079,.072,.072,.062,.062,.107,.107,.087,.087,.089,.089],minNumberOfKeypoints:4}},De={maxTracks:18,maxAge:1e3,minSimilarity:.15,trackerParams:{}};function Ue(e,t,n,i){for(var r={},s=0,o=h;s<o.length;s++){var a=o[s];r[a]=[t[n[a]].y*i.height,t[n[a]].x*i.width]}if(function(e,t){return(e[t.left_hip].score>.2||e[t.right_hip].score>.2)&&(e[t.left_shoulder].score>.2||e[t.right_shoulder].score>.2)}(t,n)){var u=(r.left_hip[0]+r.right_hip[0])/2,l=(r.left_hip[1]+r.right_hip[1])/2,c=function(e,t,n,i,r){for(var s=["left_shoulder","right_shoulder","left_hip","right_hip"],o=0,a=0,u=0;u<s.length;u++){(p=Math.abs(i-n[s[u]][0]))>o&&(o=p),(f=Math.abs(r-n[s[u]][1]))>a&&(a=f)}for(var l=0,h=0,c=0,d=Object.keys(n);c<d.length;c++){var p,f,m=d[c];if(!(e[t[m]].score<.2))(p=Math.abs(i-n[m][0]))>l&&(l=p),(f=Math.abs(r-n[m][1]))>h&&(h=f)}return[o,a,l,h]}(t,n,r,u,l),d=c[0],p=c[1],f=c[2],m=c[3],g=Math.max(1.9*p,1.9*d,1.2*f,1.2*m),b=[u-(g=Math.min(g,Math.max(l,i.width-l,u,i.height-u))),l-g];if(g>Math.max(i.width,i.height)/2)return We(null==e,i);var y=2*g;return{yMin:b[0]/i.height,xMin:b[1]/i.width,yMax:(b[0]+y)/i.height,xMax:(b[1]+y)/i.width,height:(b[0]+y)/i.height-b[0]/i.height,width:(b[1]+y)/i.width-b[1]/i.width}}return We(null==e,i)}function We(e,t){var n,i,r,s;return e?t.width>t.height?(n=1,i=t.height/t.width,r=0,s=(t.width/2-t.height/2)/t.width):(n=t.width/t.height,i=1,r=(t.height/2-t.width/2)/t.height,s=0):t.width>t.height?(n=t.width/t.height,i=1,r=(t.height/2-t.width/2)/t.height,s=0):(n=1,i=t.height/t.width,r=0,s=(t.width/2-t.height/2)/t.width),{yMin:r,xMin:s,yMax:r+n,xMax:s+i,height:n,width:i}}function Ve(t){var n,i=null==t?Ee:o({},t);if(null==i.modelType)i.modelType="SinglePose.Lightning";else if(Fe.indexOf(i.modelType)<0)throw new Error("Invalid architecture ".concat(i.modelType,". ")+"Should be one of ".concat(Fe));if(null==i.enableSmoothing&&(i.enableSmoothing=!0),null!=i.minPoseScore&&(i.minPoseScore<0||i.minPoseScore>1))throw new Error("minPoseScore should be between 0.0 and 1.0");if(null!=i.multiPoseMaxDimension&&(i.multiPoseMaxDimension%32!=0||i.multiPoseMaxDimension<32))throw new Error("multiPoseMaxDimension must be a multiple of 32 and higher than 0");if("MultiPose.Lightning"===i.modelType&&null==i.enableTracking&&(i.enableTracking=!0),"MultiPose.Lightning"===i.modelType&&!0===i.enableTracking)if(null==i.trackerType&&(i.trackerType=e.TrackerType.BoundingBox),i.trackerType===e.TrackerType.Keypoint)null!=i.trackerConfig?i.trackerConfig=function(e){var t=Ge(Le,e);t.keypointTrackerParams=o({},Le.keypointTrackerParams),null!=e.keypointTrackerParams&&(null!=e.keypointTrackerParams.keypointConfidenceThreshold&&(t.keypointTrackerParams.keypointConfidenceThreshold=e.keypointTrackerParams.keypointConfidenceThreshold),null!=e.keypointTrackerParams.keypointFalloff&&(t.keypointTrackerParams.keypointFalloff=e.keypointTrackerParams.keypointFalloff),null!=e.keypointTrackerParams.minNumberOfKeypoints&&(t.keypointTrackerParams.minNumberOfKeypoints=e.keypointTrackerParams.minNumberOfKeypoints));return t}(i.trackerConfig):i.trackerConfig=Le;else{if(i.trackerType!==e.TrackerType.BoundingBox)throw new Error("Tracker type not supported by MoveNet");null!=i.trackerConfig?i.trackerConfig=(n=i.trackerConfig,Ge(De,n)):i.trackerConfig=De}return i}function Ge(e,t){var n={maxTracks:e.maxTracks,maxAge:e.maxAge,minSimilarity:e.minSimilarity};return null!=t.maxTracks&&(n.maxTracks=t.maxTracks),null!=t.maxAge&&(n.maxAge=t.maxAge),null!=t.minSimilarity&&(n.minSimilarity=t.minSimilarity),n}var He=function(){function t(t,n){this.moveNetModel=t,this.modelInputResolution={height:0,width:0},this.keypointIndexByName=Me(e.SupportedModels.MoveNet),"SinglePose.Lightning"===n.modelType?(this.modelInputResolution.width=192,this.modelInputResolution.height=192):"SinglePose.Thunder"===n.modelType&&(this.modelInputResolution.width=256,this.modelInputResolution.height=256),this.multiPoseModel="MultiPose.Lightning"===n.modelType,this.multiPoseModel||(this.keypointFilter=new ne(Be),this.cropRegionFilterYMin=new ee(.9),this.cropRegionFilterXMin=new ee(.9),this.cropRegionFilterYMax=new ee(.9),this.cropRegionFilterXMax=new ee(.9)),this.enableSmoothing=n.enableSmoothing,n.minPoseScore?this.minPoseScore=n.minPoseScore:this.minPoseScore=.25,n.multiPoseMaxDimension?this.multiPoseMaxDimension=n.multiPoseMaxDimension:this.multiPoseMaxDimension=256,this.enableTracking=n.enableTracking,this.multiPoseModel&&this.enableTracking&&(n.trackerType===e.TrackerType.Keypoint?this.tracker=new _e(n.trackerConfig):n.trackerType===e.TrackerType.BoundingBox&&(this.tracker=new ze(n.trackerConfig)),this.enableSmoothing&&(this.keypointFilterMap=new Map))}return t.prototype.runSinglePersonPoseModel=function(e){return a(this,void 0,void 0,(function(){var t,i,r,s,o;return u(this,(function(a){switch(a.label){case 0:if(4!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||1!==t.shape[1]||17!==t.shape[2]||3!==t.shape[3])throw t.dispose(),new Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===n.getBackend()?[3,1]:(i=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:i=a.sent(),a.label=3;case 3:for(t.dispose(),r={keypoints:[],score:0},s=0,o=0;o<17;++o)r.keypoints[o]={y:i[3*o],x:i[3*o+1],score:i[3*o+2]},r.keypoints[o].score>.2&&(++s,r.score+=r.keypoints[o].score);return s>0&&(r.score/=s),[2,r]}}))}))},t.prototype.runMultiPersonPoseModel=function(e){return a(this,void 0,void 0,(function(){var t,i,r,s,o,a,l,h;return u(this,(function(u){switch(u.label){case 0:if(3!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||56!==t.shape[2])throw t.dispose(),new Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===n.getBackend()?[3,1]:(i=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:i=u.sent(),u.label=3;case 3:for(t.dispose(),r=[],s=i.length/56,o=0;o<s;++o)for(r[o]={keypoints:[]},a=56*o+51,r[o].box={yMin:i[a],xMin:i[a+1],yMax:i[a+2],xMax:i[a+3],width:i[a+3]-i[a+1],height:i[a+2]-i[a]},l=56*o+55,r[o].score=i[l],r[o].keypoints=[],h=0;h<17;++h)r[o].keypoints[h]={y:i[56*o+3*h],x:i[56*o+3*h+1],score:i[56*o+3*h+2]};return[2,r]}}))}))},t.prototype.estimatePoses=function(e,t,i){return void 0===t&&(t=Oe),a(this,void 0,void 0,(function(){var r,s,a,l,c,d;return u(this,(function(u){switch(u.label){case 0:return t=function(e){return null==e?Oe:o({},e)}(t),null==e?(this.reset(),[2,[]]):(null==i?D(e)&&(i=1e6*e.currentTime):i*=1e3,r=A(e),s=T(r),a=n.expandDims(r,0),e instanceof n.Tensor||r.dispose(),l=[],this.multiPoseModel?[3,2]:[4,this.estimateSinglePose(a,s,i)]);case 1:return l=u.sent(),[3,4];case 2:return[4,this.estimateMultiplePoses(a,s,i)];case 3:l=u.sent(),u.label=4;case 4:for(c=0;c<l.length;++c)for(d=0;d<l[c].keypoints.length;++d)l[c].keypoints[d].name=h[d],l[c].keypoints[d].y*=s.height,l[c].keypoints[d].x*=s.width;return[2,l]}}))}))},t.prototype.estimateSinglePose=function(e,t,i){return a(this,void 0,void 0,(function(){var r,s,o,a,l=this;return u(this,(function(u){switch(u.label){case 0:return this.cropRegion||(this.cropRegion=We(null==this.cropRegion,t)),r=n.tidy((function(){var t=n.tensor2d([[l.cropRegion.yMin,l.cropRegion.xMin,l.cropRegion.yMax,l.cropRegion.xMax]]),i=n.zeros([1],"int32"),r=[l.modelInputResolution.height,l.modelInputResolution.width];return n.cast(n.image.cropAndResize(e,t,i,r,"bilinear",0),"int32")})),e.dispose(),[4,this.runSinglePersonPoseModel(r)];case 1:if(s=u.sent(),r.dispose(),s.score<this.minPoseScore)return this.reset(),[2,[]];for(o=0;o<s.keypoints.length;++o)s.keypoints[o].y=this.cropRegion.yMin+s.keypoints[o].y*this.cropRegion.height,s.keypoints[o].x=this.cropRegion.xMin+s.keypoints[o].x*this.cropRegion.width;return null!=i&&this.enableSmoothing&&(s.keypoints=this.keypointFilter.apply(s.keypoints,i,1)),a=Ue(this.cropRegion,s.keypoints,this.keypointIndexByName,t),this.cropRegion=this.filterCropRegion(a),[2,[s]]}}))}))},t.prototype.estimateMultiplePoses=function(e,t,i){return a(this,void 0,void 0,(function(){var r,s,o,a,l,h,c,d,p,f,m,g=this;return u(this,(function(u){switch(u.label){case 0:return 32,t.width>t.height?(s=this.multiPoseMaxDimension,o=Math.round(this.multiPoseMaxDimension*t.height/t.width),r=n.image.resizeBilinear(e,[o,s]),l=s,h=32*Math.ceil(o/32),a=n.pad(r,[[0,0],[0,h-o],[0,0],[0,0]])):(s=Math.round(this.multiPoseMaxDimension*t.width/t.height),o=this.multiPoseMaxDimension,r=n.image.resizeBilinear(e,[o,s]),l=32*Math.ceil(s/32),h=o,a=n.pad(r,[[0,0],[0,0],[0,l-s],[0,0]])),r.dispose(),e.dispose(),c=n.cast(a,"int32"),a.dispose(),[4,this.runMultiPersonPoseModel(c)];case 1:for(d=u.sent(),c.dispose(),d=d.filter((function(e){return e.score>=g.minPoseScore})),f=0;f<d.length;++f)for(p=0;p<d[f].keypoints.length;++p)d[f].keypoints[p].y*=h/o,d[f].keypoints[p].x*=l/s;if(this.enableTracking&&(this.tracker.apply(d,i),this.enableSmoothing)){for(f=0;f<d.length;++f)this.keypointFilterMap.has(d[f].id)||this.keypointFilterMap.set(d[f].id,new ne(Be)),d[f].keypoints=this.keypointFilterMap.get(d[f].id).apply(d[f].keypoints,i,1);m=this.tracker.getTrackIDs(),this.keypointFilterMap.forEach((function(e,t){m.has(t)||g.keypointFilterMap.delete(t)}))}return[2,d]}}))}))},t.prototype.filterCropRegion=function(e){if(e){var t=this.cropRegionFilterYMin.apply(e.yMin),n=this.cropRegionFilterXMin.apply(e.xMin),i=this.cropRegionFilterYMax.apply(e.yMax),r=this.cropRegionFilterXMax.apply(e.xMax);return{yMin:t,xMin:n,yMax:i,xMax:r,height:i-t,width:r-n}}return this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset(),null},t.prototype.dispose=function(){this.moveNetModel.dispose()},t.prototype.reset=function(){this.cropRegion=null,this.resetFilters()},t.prototype.resetFilters=function(){this.keypointFilter.reset(),this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset()},t}();function qe(e){return void 0===e&&(e=Ee),a(this,void 0,void 0,(function(){var t,r,s,o;return u(this,(function(a){switch(a.label){case 0:return t=Ve(e),s=!0,t.modelUrl?(s="string"==typeof t.modelUrl&&t.modelUrl.indexOf("https://tfhub.dev")>-1,[4,i.loadGraphModel(t.modelUrl,{fromTFHub:s})]):[3,2];case 1:return r=a.sent(),[3,4];case 2:return o=void 0,"SinglePose.Lightning"===t.modelType?o="https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4":"SinglePose.Thunder"===t.modelType?o="https://tfhub.dev/google/tfjs-model/movenet/singlepose/thunder/4":"MultiPose.Lightning"===t.modelType&&(o="https://tfhub.dev/google/tfjs-model/movenet/multipose/lightning/1"),[4,i.loadGraphModel(o,{fromTFHub:s})];case 3:r=a.sent(),a.label=4;case 4:return"webgl"===n.getBackend()&&n.env().set("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",0),[2,new He(r,t)]}}))}))}var Ke={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:{height:257,width:257}},Xe=["MobileNetV1","ResNet50"],je={MobileNetV1:[8,16],ResNet50:[16]},Ye=[8,16,32],Qe={MobileNetV1:[.5,.75,1],ResNet50:[1]},Ze=[1,2,4],Je={maxPoses:1,flipHorizontal:!1},et={maxPoses:5,flipHorizontal:!1,scoreThreshold:.5,nmsRadius:20},tt=[-123.15,-115.9,-103.06];function nt(e){return Math.floor(e/2)}var it=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(nt(e),e);)this.exchange(e,nt(e)),e=nt(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var n=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=n},e}();function rt(e,t,n,i,r,s){for(var o=s.shape,a=o[0],u=o[1],l=!0,h=Math.max(n-r,0),c=Math.min(n+r+1,a),d=h;d<c;++d){for(var p=Math.max(i-r,0),f=Math.min(i+r+1,u),m=p;m<f;++m)if(s.get(d,m,e)>t){l=!1;break}if(!l)break}return l}function st(e){return a(this,void 0,void 0,(function(){return u(this,(function(t){return[2,Promise.all(e.map((function(e){return e.buffer()})))]}))}))}function ot(e,t,n,i){return{y:i.get(e,t,n),x:i.get(e,t,n+17)}}function at(e,t,n){var i=ot(e.heatmapY,e.heatmapX,e.id,n),r=i.y,s=i.x;return{x:e.heatmapX*t+s,y:e.heatmapY*t+r}}function ut(e,t,n,i){var r=n.x,s=n.y;return e.some((function(e){var n,o,a,u,l,h,c=e.keypoints;return n=s,o=r,a=c[i].y,u=c[i].x,(l=a-n)*l+(h=u-o)*h<=t}))}var lt=h.reduce((function(e,t,n){return e[t]=n,e}),{}),ht=[["nose","left_eye"],["left_eye","left_ear"],["nose","right_eye"],["right_eye","right_ear"],["nose","left_shoulder"],["left_shoulder","left_elbow"],["left_elbow","left_wrist"],["left_shoulder","left_hip"],["left_hip","left_knee"],["left_knee","left_ankle"],["nose","right_shoulder"],["right_shoulder","right_elbow"],["right_elbow","right_wrist"],["right_shoulder","right_hip"],["right_hip","right_knee"],["right_knee","right_ankle"]].map((function(e){var t=e[0],n=e[1];return[lt[t],lt[n]]})),ct=ht.map((function(e){return e[1]})),dt=ht.map((function(e){return e[0]}));function pt(e,t,n){return e<t?t:e>n?n:e}function ft(e,t,n,i){return{y:pt(Math.round(e.y/t),0,n-1),x:pt(Math.round(e.x/t),0,i-1)}}function mt(e,t){return{x:e.x+t.x,y:e.y+t.y}}function gt(e,t,n,i,r,s,o,a){void 0===a&&(a=2);for(var u=i.shape,l=u[0],c=u[1],d={y:t.y,x:t.x},p=mt(d,function(e,t,n){var i=n.shape[2]/2;return{y:n.get(t.y,t.x,e),x:n.get(t.y,t.x,i+e)}}(e,ft(d,s,l,c),o)),f=0;f<a;f++){var m=ft(p,s,l,c),g=ot(m.y,m.x,n,r);p=mt({x:m.x*s,y:m.y*s},{x:g.x,y:g.y})}var b=ft(p,s,l,c),y=i.get(b.y,b.x,n);return{y:p.y,x:p.x,name:h[n],score:y}}function bt(e,t,n,i,r,s){var o=t.shape[2],a=ct.length,u=new Array(o),l=e.part,c=e.score,d=at(l,i,n);u[l.id]={score:c,name:h[l.id],y:d.y,x:d.x};for(var p=a-1;p>=0;--p){var f=ct[p],m=dt[p];u[f]&&!u[m]&&(u[m]=gt(p,u[f],m,t,n,i,s))}for(p=0;p<a;++p){f=dt[p],m=ct[p];u[f]&&!u[m]&&(u[m]=gt(p,u[f],m,t,n,i,r))}return u}function yt(e,t,n){return n.reduce((function(n,i,r){var s=i.y,o=i.x,a=i.score;return ut(e,t,{y:s,x:o},r)||(n+=a),n}),0)/n.length}function xt(e,t,n,i,r,s,o,l){return void 0===o&&(o=.5),void 0===l&&(l=20),a(this,void 0,void 0,(function(){var a,h,c,d,p,f,m,g,b,y,x,w;return u(this,(function(u){switch(u.label){case 0:return[4,st([e,t,n,i])];case 1:for(a=u.sent(),h=a[0],c=a[1],d=a[2],p=a[3],f=[],m=function(e,t,n){for(var i=n.shape,r=i[0],s=i[1],o=i[2],a=new it(r*s*o,(function(e){return e.score})),u=0;u<r;++u)for(var l=0;l<s;++l)for(var h=0;h<o;++h){var c=n.get(u,l,h);c<e||rt(h,c,u,l,t,n)&&a.enqueue({score:c,part:{heatmapY:u,heatmapX:l,id:h}})}return a}(o,1,h),g=l*l;f.length<s&&!m.empty();)b=m.dequeue(),y=at(b.part,r,c),ut(f,g,y,b.part.id)||(x=bt(b,h,c,r,d,p),w=yt(f,g,x),f.push({keypoints:x,score:w}));return[2,f]}}))}))}const wt=n.env();wt.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15),wt.registerFlag("WEBGPU_CPU_FORWARD",()=>!0),wt.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1),wt.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!1),wt.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1),wt.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3),wt.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1),wt.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0),wt.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1),wt.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>0),wt.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1);class kt{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}class vt{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireUploadBuffer(e,t){return this.acquireBuffer(e,t,!0)}acquireBuffer(e,t,n=!1){const i=St(e,t);if(this.freeBuffers.has(i)||this.freeBuffers.set(i,[]),this.usedBuffers.has(i)||this.usedBuffers.set(i,[]),this.numBytesUsed+=e,this.numUsedBuffers++,this.freeBuffers.get(i).length>0){this.numFreeBuffers--;const e=this.freeBuffers.get(i).shift();return this.usedBuffers.get(i).push(e),e}this.numBytesAllocated+=e;const r=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n});return this.usedBuffers.get(i).push(r),r}releaseBuffer(e,t,n){if(0===this.freeBuffers.size)return;const i=St(t,n);this.freeBuffers.has(i)||this.freeBuffers.set(i,[]),this.freeBuffers.get(i).push(e),this.numFreeBuffers++,this.numUsedBuffers--;const r=this.usedBuffers.get(i),s=r.indexOf(e);if(s<0)throw new Error("Cannot release a buffer that was never provided by this buffer manager");r.splice(s,1),this.numBytesUsed-=t}releaseUploadBuffer(e,t,n){e.mapAsync(GPUMapMode.WRITE).then(()=>{this.releaseBuffer(e,t,n)},e=>{})}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function St(e,t){return`${e}_${t}`}class It{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,n,i){const r=e*t*Tt(n),s=Ct(e,t,n,i);if(this.freeTextures.has(s)||this.freeTextures.set(s,[]),this.usedTextures.has(s)||this.usedTextures.set(s,[]),this.numBytesUsed+=r,this.numUsedTextures++,this.freeTextures.get(s).length>0){this.numFreeTextures--;const e=this.freeTextures.get(s).shift();return this.usedTextures.get(s).push(e),e}this.numBytesAllocated+=r;const o=this.device.createTexture({size:[e,t],format:n,usage:i});return this.usedTextures.get(s).push(o),o}releaseTexture(e,t,n,i,r){if(0===this.freeTextures.size)return;const s=Ct(t,n,i,r);this.freeTextures.has(s)||this.freeTextures.set(s,[]),this.freeTextures.get(s).push(e),this.numFreeTextures++,this.numUsedTextures--;const o=this.usedTextures.get(s),a=o.indexOf(e);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");o.splice(a,1);const u=t*n*Tt(i);this.numBytesUsed-=u}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function Ct(e,t,n,i){return`${e}_${t}_${n}_${i}`}function Tt(e){if("rgba8unorm"===e)return 16;throw new Error(e+" is not supported!")}function Rt(e,t){if(Math.max(...e)>3)throw new Error("Cannot symbolically compute strides for rank > 4 tensor.");const n=e.length,i=e.map(e=>`${t}[${e}]`),r=new Array(n-1);r[n-2]=i[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${i[e+1]})`;return r}const At=(e,t,n)=>"int32"===n?`atomicAdd(${e}, bitcast<i32>(${t}));`:`\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${t});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${e}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`,$t=(e,t,i,r)=>{const s=function(e,t,i){const r=[],s=i.workgroupSize[0]*i.workgroupSize[1]*i.workgroupSize[2];if(r.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${Bt(i)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${s}u +\n                localIndex);\n        `}\n      }\n    `),i.isFromPixels){r.push(`\n        struct Uniform {\n          size            : i32,\n          numChannels     : i32,\n          outShapeStrides : vec2<i32>,\n        };\n\n        @group(0) @binding(0) var<storage, read_write> result: array<${Lt(t.dtype,i.isVec4)}>;\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);const e=Dt(i);return[Nt,r.join("\n"),Et(t.shape),i.getUserCode(),Mt(e,i)].join("\n")}let o="struct Uniforms { NAN : f32, INFINITY : f32, ";i.variableNames.forEach((t,n)=>{const i=Pt(e[n].shape.length);o+=`${t.charAt(0).toLowerCase()+t.slice(1)}Shape : ${i}, `});const a=Pt(t.shape.length);o+=`outShape : ${a}, `;const u=Pt(t.shape.length-1);o+=`\n         outShapeStrides: ${u}, `,i.size&&(o+="size : i32, ");i.uniforms&&(o+=i.uniforms);o+="};",o=function(e){e=e.replace(/(\w+)\s*:\s*vec(5|6)/g,e=>"@align(16) "+e);return e=e.replace(/vec(5|6)\s*,\s*(\w+)/g,(e,t,n)=>`vec${t}, @align(16) ${n}`)}(o),r.push(o),i.atomic?r.push("\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    "):r.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${Lt(t.dtype,i.isVec4)}>;\n    `);i.variableNames.forEach((t,n)=>{r.push(`\n      @group(0) @binding(${1+n}) var<storage, read> ${t}: array<${i.variableTypes?i.variableTypes[n]:Lt(e[n].dtype,i.isVec4)}>;\n        `)}),""!==o&&r.push(`\n      @group(0) @binding(${1+i.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);const l=function(e,t){const{x:n,y:i=[],z:r=[]}=t,s=e.length,o=n.length+i.length+r.length;if(o!==s)return"";if(n.length===s){const e=Pt(s);return`fn getOutputCoords() -> ${e}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `}let a="";const u=[n,i,r];for(let e=0;e<u.length;e++){const t=u[e];if(0!==t.length)if(1===t.length)a+=`let d${t[0]} = i32(globalId[${e}]);`;else{const n=Rt(t,"uniforms.outShape");a+=`var index${e} = i32(globalId[${e}]);`;for(let i=0;i<n.length;i++)a+=`let d${t[i]} = index${e} / ${n[i]};`,i===n.length-1?a+=`let d${t[i+1]} = index${e} - d${t[i]} * ${n[i]};`:a+=`index${e} = index${e} - d${t[i]} * ${n[i]};`}}const l=[];for(let e=0;e<o;e++)l.push("d"+e);const h=Pt(o);let c=`fn getOutputCoords() -> ${h} {\n  ${a}\n`;0===l.length?c+=`return ${h}(0); }`:c+=`return ${h}(${l.join(",")}); }`;return c}(t.shape,i.dispatchLayout),h=[Nt,r.join("\n")+Ft,Et(t.shape),l,Ot(t.shape.length)];i.atomic||h.push(function(e,t,n){const i=e.length,r=Lt(t,n);let s;s=n?`fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {\n      result[flatIndex] = ${r}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {\n      result[flatIndex] = ${r}(value);\n    }`:`fn setOutputAtIndex(flatIndex : i32, value : f32) {\n      result[flatIndex] = ${r}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {\n      result[flatIndex] = ${r}(value);\n    }`;if(i>=2){const e=["d0","d1","d2","d3","d4","d5"].slice(0,i),t=Pt(i);s+=n?`\n      fn setOutputAtCoords(${e.map(e=>e+" : i32").join(", ")}, value : vec4<f32>) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndex(flatIndex / 4, value);\n      }\n      fn setOutputAtCoordsI32(${e.map(e=>e+" : i32").join(", ")}, value : vec4<i32>) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndexI32(flatIndex / 4, value);\n      }\n    `:`\n      fn setOutputAtCoords(${e.map(e=>e+" : i32").join(", ")}, value : f32) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndex(flatIndex, value);\n      }\n      fn setOutputAtCoordsI32(${e.map(e=>e+" : i32").join(", ")}, value : i32) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndexI32(flatIndex, value);\n      }\n    `}return s}(t.shape,t.dtype,i.isVec4));const c=e.map((e,r)=>function(e,t,i,r){let s=function(e,t){const n=e.name,i=e.shape.length,r=Pt(i),s="get"+n.charAt(0).toUpperCase()+n.slice(1),o=["d0","d1","d2","d3","d4","d5"].slice(0,i),a=o.map(e=>e+" : i32").join(", ");if(i<1)return t?`\n        fn ${s}() -> vec4<f32> {\n          return vec4<f32>(${n}[0]);\n        }\n      `:`\n      fn ${s}() ->f32 {\n        return f32(${n}[0]);\n      }\n    `;const u=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`;let l=i+"D";0===i&&(l="1D");if(t)return`\n      fn ${s}(${a}) -> vec4<f32> {\n        return vec4<f32>(${n}[getIndexFromCoords${l}(${r}(${o.join(",")}),\n          ${u}) / 4]);\n      }\n      `;return`\n    fn ${s}(${a}) -> f32 {\n      return f32(${n}[getIndexFromCoords${l}(${r}(${o.join(",")}),\n        ${u})]);\n    }\n   `}(e,i);e.shape.length<=t.length&&(s+=function(e,t,i,r){const s=e.name,o=s.charAt(0).toUpperCase()+s.slice(1),a="get"+o+"ByOutput",u=e.shape.length,l=t.length,h=Pt(l);if(n.util.arraysEqual(e.shape,t)&&r)return i?`\n      fn ${a}Index(globalIndex : i32) -> vec4<f32> {\n        return vec4<f32>(${s}[globalIndex]);\n      }\n\n      fn ${a}Coords(coords : ${h}) -> vec4<f32> {\n        return vec4<f32>(${s}[${l>1?"getOutputIndexFromCoords(coords)":"coords"} / 4]);\n      }\n      `:`\n    fn ${a}Index(globalIndex : i32) -> f32 {\n      return f32(${s}[globalIndex]);\n    }\n\n    fn ${a}Coords(coords : ${h}) -> f32 {\n      return f32(${s}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}]);\n    }\n    `;const c=n.backend_util.getBroadcastDims(e.shape,t),d=l-u;let p="";if(0===u)return i?`\n    fn ${a}Index(globalIndex : i32) -> vec4<f32> {\n      return get${o}();\n    }\n\n    fn ${a}Coords(coords : ${h}) -> vec4<f32> {\n      return get${o}();\n    }\n  `:`\n    fn ${a}Index(globalIndex : i32) -> f32{\n      return get${o}();\n    }\n\n    fn ${a}Coords(coords : ${h}) -> f32{\n      return get${o}();\n    }\n  `;p=l<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${zt(e+d)} = 0;`).join("\n");let f="";if(l<2&&u>0)f="coords";else if(l>1){const t=Pt(u),n=e.shape.map((e,t)=>"coords."+zt(t+d)).join(", ");f=`${t}(${n})`}else f="coords";const m=`uniforms.${s.charAt(0).toLowerCase()+s.slice(1)}Shape`,g=u+"D";if(i)return`\n    fn ${a}Index(globalIndex : i32) -> vec4<f32> {\n      var coords = getCoordsFromIndex(globalIndex);\n      ${p}\n      return ${s}[getIndexFromCoords${g}(${f}, ${m}) / 4];\n    }\n\n    fn ${a}Coords(coordsIn : ${h}) -> vec4<f32> {\n      var coords = coordsIn;\n      ${p}\n      return ${s}[getIndexFromCoords${g}(${f}, ${m}) / 4];\n    }\n  `;return`\n  fn ${a}Index(globalIndex : i32) -> f32 {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${p}\n    return f32(${s}[getIndexFromCoords${g}(${f}, ${m})]);\n  }\n\n  fn ${a}Coords(coordsIn : ${h}) -> f32 {\n    var coords = coordsIn;\n    ${p}\n    return f32(${s}[getIndexFromCoords${g}(${f}, ${m})]);\n  }\n`}(e,t,i,r));return s}(e,t.shape,i.variableTypes?"vec4<f32>"===i.variableTypes[r]:i.isVec4,i.dispatchLayout.x.length===t.shape.length)).join("\n");h.push(c),h.push(i.getUserCode());const d=Dt(i);h.push(Mt(d,i));return h.join("\n")}(i,{dtype:r.dtype,shape:r.shape},t),o=e.createShaderModule({code:s,label:t.constructor.name});return e.createComputePipeline({compute:{module:o,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})};function Pt(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";if(6===e)return"vec6";throw Error(`GPU for rank ${e} is not yet supported`)}function zt(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";if(5===e)return"v";throw Error(`Index ${e} is not yet supported`)}function _t(...e){let t;switch(e.length){case 0:t="\n        fn main()\n      ";break;case 1:t=`\n        fn main(${e[0]} : i32)\n      `;break;default:throw Error("Unreachable")}return t}function Mt(e,t){let n;return n=`\n     ${function(e){return`\n  @compute @workgroup_size(${e.workgroupSize[0]}, ${e.workgroupSize[1]}, ${e.workgroupSize[2]})\n`}(t)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${e?"main(getGlobalIndex());":"main();"};\n      }\n    `,n}const Nt="\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  fn idiv(a: i32, b: i32, sign: f32) -> i32 {\n    var res: i32 = a / b;\n    let modulo: i32 = a % b;\n    if (sign < 0. && modulo != 0) {\n      res = res - 1;\n    }\n    return res;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n",Ft="\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n";function Et(e){const t=e.length;if(t<=1)return"fn getCoordsFromIndex(index : i32) -> i32 { return index; }";const i=n.util.computeStrides(e),r=Pt(t),s=[];for(let e=0;e<t;e++)s.push("d"+e);if(1===i.length)return"    fn getCoordsFromIndex(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;\n      return vec2<i32>(d0, d1);\n    }";let o;return o="var index2 = index;"+i.map((e,t)=>`${`let ${s[t]} = index2 / uniforms.outShapeStrides.${zt(t)}`}; ${t===i.length-1?`let ${s[t+1]} = index2 - ${s[t]} * uniforms.outShapeStrides.${zt(t)}`:`index2 = index2 - ${s[t]} * uniforms.outShapeStrides.${zt(t)}`};`).join(""),`\n    fn getCoordsFromIndex(index : i32) -> ${r} {\n      ${o}\n      return ${r}(${s.join(",")});\n    }\n  `}function Ot(e){let t="";switch(e){case 0:case 1:t+="\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        ";break;case 2:t+="\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        ";break;case 3:t+="\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        ";break;case 4:t+="\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        ";break;case 5:t+="\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        ";break;case 6:t+="\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        ";break;default:n.util.assert(!1,()=>`Unsupported ${e}D shape`)}return t}function Bt(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function Lt(e,t){return"float32"===e?t?"vec4<f32>":"f32":"int32"===e||"bool"===e?t?"vec4<i32>":"i32":e}function Dt(e){return(!e.dispatchLayout.hasOwnProperty("y")||0===e.dispatchLayout.y.length)&&(!e.dispatchLayout.hasOwnProperty("z")||0===e.dispatchLayout.z.length)}const Ut=e=>{let t=1;for(let n=0;n<e.length;n++)t*=e[n];return t};function Wt(e,t,n=[1,1,1],i=[1,1,1]){const[r,s,o]=[Math.ceil(Ut(e.x.map(e=>t[e]))/(n[0]*i[0])),e.y?Math.ceil(Ut(e.y.map(e=>t[e]))/(n[1]*i[1])):1,e.z?Math.ceil(Ut(e.z.map(e=>t[e]))/(n[2]*i[2])):1];return[r,s,o]}function Vt(e,t,n=!1){if(n)return[8,8,1];const i=Ut(e.x.map(e=>t[e])),r=Ut(e.y.map(e=>t[e]));return i<=4?[4,16,1]:r<=4?[16,4,1]:[16,16,1]}function Gt(e,t,n=!1){if(n)return[4,4,1];const i=Ut(e.x.map(e=>t[e])),r=Ut(e.y.map(e=>t[e]));return i<=4?[1,2,1]:r<=4?[2,1,1]:[2,2,1]}function Ht(e){return{x:e.map((e,t)=>t)}}function qt(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw new Error("Unknown dtype "+e)}function Kt(){return("undefined"!=typeof window||"undefined"!=typeof WorkerGlobalScope)&&!!navigator.gpu}var Xt;!function(e){e[e.MatMulReduceProgram=0]="MatMulReduceProgram",e[e.MatMulSplitKProgram=1]="MatMulSplitKProgram",e[e.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",e[e.MatMulPackedProgram=3]="MatMulPackedProgram",e[e.MatMulMax=4]="MatMulMax"}(Xt||(Xt={}));const jt=n.env().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");class Yt extends n.KernelBackend{constructor(e,t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchNumberInEncoder=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,!Kt())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.currentCommandEncoder=null,this.currentComputePass=null,this.supportTimeQuery=e.features.has("timestamp-query-inside-passes"),this.adapterInfo=new kt(t),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new vt(this.device),this.textureManager=new It(this.device),this.tensorMap=new n.DataStorage(this,n.engine()),this.supportTimeQuery&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2})),n.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}nextDataId(){return Yt.nextDataId++}floatPrecision(){return 32}defaultGpuBufferUsage(){return GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}disposeData(e,t=!1){if(this.tensorDataPendingDisposal.indexOf(e)>=0)return!1;if(!this.tensorMap.has(e))return!0;const n=this.tensorMap.get(e);if(this.decRef(e),!t&&n.refCount>0)return!1;if(this.commandQueueOwnedIds.has(e))return this.tensorDataPendingDisposal.push(e),!1;const{complexTensorInfos:i}=this.tensorMap.get(e);return null!=i&&(this.disposeData(i.real.dataId,t),this.disposeData(i.imag.dataId,t)),this.releaseResource(e),this.tensorMap.delete(e),!0}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){const t=this.tensorMap.get(e);if(t&&t.resourceInfo)if(t.external)t.resourceInfo=null;else{if("texture"in t.resourceInfo){const e=t.resourceInfo;e.texture instanceof GPUTexture&&this.textureManager.releaseTexture(e.texture,e.width,e.height,e.format,e.usage),e.texture=null}else{const e=t.resourceInfo;this.bufferManager.releaseBuffer(e.buffer,e.size,e.usage),e.buffer=null}t.resourceInfo=null}}refCount(e){if(this.tensorMap.has(e)){return this.tensorMap.get(e).refCount}return 0}incRef(e){this.tensorMap.get(e).refCount++}decRef(e){if(this.tensorMap.has(e)){this.tensorMap.get(e).refCount--}}write(e,t,n){if("complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const i={id:this.nextDataId()};return this.tensorMap.set(i,{dtype:n,shape:t,values:e,refCount:1}),i}move(e,t,n,i,r){if("complex64"===i)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:i,shape:n,values:t,refCount:r})}submitQueue(){this.ensureComputePassEnded(),this.queue.submit([this.currentCommandEncoder.finish()]),this.currentCommandEncoder=null,this.dispatchNumberInEncoder=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e.buffer,e.size,e.usage)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseUploadBuffer(e.buffer,e.size,e.usage)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.currentCommandEncoder||(this.currentCommandEncoder=this.device.createCommandEncoder())}ensureComputePassEnded(){this.currentComputePass&&(this.currentComputePass.end(),this.currentComputePass=null)}getComputePass(){return this.currentComputePass||(this.currentComputePass=this.currentCommandEncoder.beginComputePass()),this.currentComputePass}async getBufferData(e,t){const i=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(e,0,i,0,t),this.submitQueue(),await i.mapAsync(GPUMapMode.READ);const r=i.getMappedRange().slice(0);return i.unmap(),null!=i&&this.bufferManager.releaseBuffer(i,t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ),n.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(n.util.assert(void 0!==this.dummyContext,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),r}convertAndCacheOnCPU(e,t){const n=this.tensorMap.get(e);return this.releaseResource(e),n.values=t,n.values}readSync(e){const t=this.tensorMap.get(e),{values:n}=t;if(null==n)throw new Error("WebGPU readSync is only available for CPU-resident tensors.");return n}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);const t=this.tensorMap.get(e),{values:i}=t;if(null!=i)return this.convertAndCacheOnCPU(e,i);let r;if("complex64"===t.dtype){const e=await Promise.all([this.read(t.complexTensorInfos.real.dataId),this.read(t.complexTensorInfos.imag.dataId)]),i=e[0],s=e[1];r=n.backend_util.mergeRealAndImagArrays(i,s)}else{const e=t.resourceInfo,i=await this.getBufferData(e.buffer,e.size);r=n.util.convertBackendValuesAndArrayBuffer(i,t.dtype)}return this.convertAndCacheOnCPU(e,r),r}copyBuffer(e,t,n){const i=this.bufferManager.acquireBuffer(t,n);return this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(e,0,i,0,t),this.submitQueue(),i}createTensorFromGPUData(e,t,i){let r=e.buffer;if("complex64"===i)throw new Error("Cannot write to a complex64 dtype. ");const s={id:this.nextDataId()};this.tensorMap.set(s,{dtype:i,shape:t,values:null,refCount:1,external:e.zeroCopy});const o=this.tensorMap.get(s),a=qt(o.dtype)*n.util.sizeFromShape(o.shape);if(e.buffer.size<a)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${a})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(r=this.copyBuffer(r,a,r.usage)),o.resourceInfo={size:r.size,usage:r.usage,buffer:r},n.engine().makeTensorFromDataId(s,t,i,this)}readToGPU(e){const t=this.tensorMap.get(e),{values:i,dtype:r,shape:s,resourceInfo:o}=t;if("complex64"===r)throw new Error("Does not support reading buffer for complex64 dtype.");if(null==o)throw null!=i?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const a=o.size,u=this.bufferManager.acquireBuffer(a,o.usage);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(o.buffer,0,u,0,a),this.submitQueue();const l=this.makeTensorInfo(s,r),h=n.engine().makeTensorFromTensorInfo(l);return this.tensorMap.get(l.dataId).resourceInfo={size:a,usage:this.defaultGpuBufferUsage(),buffer:u},{tensorRef:h,buffer:u,bufSize:a}}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const i=t.map(e=>n.util.decodeString(e));return n.buffer(e.shape,e.dtype,i)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return n.buffer(e.shape,e.dtype,t)}async time(e){this.supportTimeQuery||console.warn("This device doesn't support timestamp-query-inside-passes extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis then try again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled. Using performance.now is not workable for webgpu since it doesn't support synchronous data read from GPU.");const t=this.activeTimers,i=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=i,r=!0):this.activeTimers.push(i),this.activeTimers=i,e();const s=n.util.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),o=n.util.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);const a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},u=await Promise.all(s);return a.kernelMs=n.util.sum(u),a.getExtraProfileInfo=()=>u.map((e,t)=>({name:o[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,a}makeTensorInfo(e,t,i){"string"===t&&null!=i&&i.length>0&&n.util.isString(i[0])&&(i=i.map(e=>n.util.encodeString(e)));return{dataId:this.write(i,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;const t=this.tensorMap.get(e.dataId);if("texture"in t.resourceInfo){const e=t.resourceInfo;return e.texture instanceof GPUExternalTexture?e.texture:e.texture.createView()}const n=t.resourceInfo;return{offset:0,size:n.size,buffer:n.buffer}}async getQueryTime(e){return this.supportTimeQuery?this.getTimeFromQuerySet(e):0}uploadToGPU(e){const t=this.tensorMap.get(e);if(t.resourceInfo)return;const i=qt(t.dtype)*n.util.sizeFromShape(t.shape),r=this.bufferManager.acquireBuffer(i,this.defaultGpuBufferUsage());if(t.resourceInfo={size:i,usage:this.defaultGpuBufferUsage(),buffer:r},t.values){const e=this.bufferManager.acquireUploadBuffer(i,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC),n=e.getMappedRange();"int32"===t.dtype||"bool"===t.dtype?new Int32Array(n).set(t.values):new Float32Array(n).set(t.values),e.unmap(),this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(e,0,r,0,i);const s={size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,buffer:e};this.stagingPendingDisposal.push(s)}}makeUniforms(e){let t=0,i=0;const r=[];let s=1;e.forEach(e=>{let o;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:o=4;break;case 2:o=8;break;case 3:case 4:case 5:case 6:o=16;break;default:n.util.assert(!1,()=>`Unsupported ${e.data.length}D shape`)}5!==i&&6!==i||(o=16),o>s&&(s=o),t=Math.ceil(t/o)*o,i=e.data.length,r.push(t),t+=4*e.data.length}),t=Math.ceil(t/s)*s;const o=new ArrayBuffer(t);e.forEach((e,t)=>{const n=r[t];"int32"===e.type?new Int32Array(o,n,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(o,n,e.data.length).set(e.data):new Float32Array(o,n,e.data.length).set(e.data)});const a=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.queue.writeBuffer(a,0,o,0,t);const u={size:t,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,buffer:a};return this.uniformPendingDisposal.push(u),{offset:0,size:t,buffer:a}}runWebGPUProgram(e,t,i,r,s){if(s||(s=this.makeTensorInfo(e.outputShape,i)),0===n.util.sizeFromShape(s.shape))return this.tensorMap.get(s.dataId).values=n.util.getTypedArrayFromDType(s.dtype,0),s;this.uploadToGPU(s.dataId),e.dispatch=((e,t)=>{const i=e.limits.maxComputeWorkgroupsPerDimension,r=t.dispatchLayout,s=t.dispatch;if(s.every(e=>e<=i))return s;n.util.assert(s[0]>i&&void 0===r.y&&void 0===r.z,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let o=Math.ceil(Math.sqrt(s[0]));return o>i?(o=Math.ceil(Math.cbrt(s[0])),n.util.assert(o<=i,()=>"Total dispatch size exceeds WebGPU maximum."),[o,o,o]):[o,o,1]})(this.device,e);let o=[],a=[];if(!e.isFromPixels){o.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),a=t.concat(s).map(e=>e.shape);const i="int32";a.map(e=>{o.push({type:i,data:e})});const r=n.util.computeStrides(s.shape);if(o.push({type:i,data:r}),e.size){const t=n.util.sizeFromShape(e.outputShape);o.push({type:i,data:[e.isVec4?t/4:t]})}}const u=t.map((t,n)=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(t.dataId),{dtype:this.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[n]}}),l=function(e,t,i,r){let s=e.shaderKey;if(e.isFromPixels)return s;const o=i.map(e=>e.dtype).concat(r.dtype),a=i.map(e=>n.backend_util.getBroadcastDims(e.shape,r.shape)),u=i.map(e=>n.util.arraysEqual(e.shape,r.shape)).join("_"),l=a.map(e=>e.join("_")).join(";"),h=Bt(e)?"flatDispatch":"";return s+="_"+(e.workgroupSize?e.workgroupSize.join(","):"")+t.map(e=>e.length).join(",")+o.join(",")+e.variableNames.join(",")+l+u+h,s}(e,a,u,s);let h;l in this.pipelineCache?h=this.pipelineCache[l]:(h=$t(this.device,e,u,s),this.pipelineCache[l]=h),r&&(o=[...o,...r]);const c=[this.tensorToBinding(s),...t.map(e=>this.tensorToBinding(e)),this.makeUniforms(o)],d=this.device.createBindGroup({layout:h.getBindGroupLayout(0),entries:c.map((e,t)=>({binding:t,resource:e}))});this.ensureCommandEncoderReady();const p=this.getComputePass(),f=null!=this.activeTimers;return f&&this.supportTimeQuery&&p.writeTimestamp(this.querySet,0),p.setPipeline(h),p.setBindGroup(0,d),p.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),f&&this.supportTimeQuery&&p.writeTimestamp(this.querySet,1),this.dispatchNumberInEncoder++,t.forEach(e=>{this.commandQueueOwnedIds.add(e.dataId)}),this.commandQueueOwnedIds.add(s.dataId),n.env().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchNumberInEncoder&&this.submitQueue(),f&&this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(this.querySet)}),s}async getTimeFromQuerySet(e){const t=this.bufferManager.acquireBuffer(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),n=this.bufferManager.acquireBuffer(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.resolveQuerySet(e,0,2,t,0),this.currentCommandEncoder.copyBufferToBuffer(t,0,n,0,16),this.submitQueue(),await n.mapAsync(GPUMapMode.READ);const i=new BigUint64Array(n.getMappedRange()),r=Number(i[1]-i[0]);return n.unmap(),this.bufferManager.releaseBuffer(n,16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST),this.bufferManager.releaseBuffer(t,16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),r/1e6}shouldExecuteOnCPU(e,t=jt){return n.env().getBool("WEBGPU_CPU_FORWARD")&&e.every(e=>null==this.tensorMap.get(e.dataId).resourceInfo&&n.util.sizeFromShape(e.shape)<t)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}var Qt;Yt.nextDataId=0,Kt()&&n.registerBackend("webgpu",async()=>{n.env().set("CHECK_COMPUTATION_FOR_ERRORS",!1);const e={powerPreference:n.env().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(e),i={};t.features.has("timestamp-query-inside-passes")&&(i.requiredFeatures=["timestamp-query-inside-passes"]);const r=t.limits;i.requiredLimits={maxComputeWorkgroupStorageSize:r.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.maxStorageBufferBindingSize};const s=await t.requestDevice(i),o=await t.requestAdapterInfo();return new Yt(s,o)},3),function(e){e[e.ADD=0]="ADD",e[e.ATAN2=1]="ATAN2",e[e.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",e[e.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",e[e.DIV=4]="DIV",e[e.EQUAL=5]="EQUAL",e[e.GREATER=6]="GREATER",e[e.GREATER_EQUAL=7]="GREATER_EQUAL",e[e.INT_DIV=8]="INT_DIV",e[e.LESS=9]="LESS",e[e.LESS_EQUAL=10]="LESS_EQUAL",e[e.LOGICAL_AND=11]="LOGICAL_AND",e[e.LOGICAL_OR=12]="LOGICAL_OR",e[e.MAX=13]="MAX",e[e.MIN=14]="MIN",e[e.MOD=15]="MOD",e[e.MUL=16]="MUL",e[e.NOT_EQUAL=17]="NOT_EQUAL",e[e.POW=18]="POW",e[e.PRELU=19]="PRELU",e[e.SQUARED_DIFFERENCE=20]="SQUARED_DIFFERENCE",e[e.SUB=21]="SUB"}(Qt||(Qt={}));const Zt="\n  if (isnan(a)) { return a; }\n  if (isnan(b)) { return b; }\n  ",Jt="\n  resultTemp = select(\n      resultTemp, vec4<f32>(valueForNaN),\n      vec4<bool>(isNaN) | isnanVec4(a) | isnanVec4(b));\n  ",en=`\n  ${Zt}\n  if (b == 0.) {\n    return uniforms.NAN;\n  }\n  var resultTemp = a % b;\n  if ((a < 0. && b < 0.) || (a >= 0. && b > 0.)) {\n    return resultTemp;\n  } else {\n    return (resultTemp + b) % b;\n  }\n`,tn=`\n  let isNaN = !vec4<bool>(b);\n  let valueForNaN = uniforms.NAN;\n  var resultTemp = vec4<f32>(a % b);\n  ${Jt}\n\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n\n  return resultTemp;\n`,nn=`\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n  ${Jt}\n\n  return resultTemp;\n`,rn=`\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n  let valueForNaN = uniforms.NAN;\n  ${Jt}\n  return resultTemp;\n`;function sn(e,t,n="uniforms.NAN"){const i=t?Jt:Zt;return t?`\n    let valueForNaN = ${n};\n    var resultTemp = vec4<f32>(${e}(a, b));\n    `+i+"\n    return resultTemp;\n  ":i+`\n    return ${e}(a, b);\n  `}function on(e,t){switch(e){case Qt.ADD:return"return a + b;";case Qt.ATAN2:return sn("atan2",t);case Qt.COMPLEX_MULTIPLY_IMAG:return"return areal * bimag + aimag * breal;";case Qt.COMPLEX_MULTIPLY_REAL:return"return areal * breal - aimag * bimag;";case Qt.DIV:return"return a / b;";case Qt.EQUAL:return t?"return vec4<f32>(a == b);":"return f32(a == b);";case Qt.GREATER:return t?"return vec4<f32>(a > b);":"return f32(a > b);";case Qt.GREATER_EQUAL:return t?"return vec4<f32>(a >= b);":"return f32(a >= b);";case Qt.INT_DIV:return t?"\n  let ia = vec4<i32>(round(a));\n  let ib = vec4<i32>(round(b));\n  let cond = ib != vec4<i32>(0);\n  var resultTemp = vec4<i32>(0);\n  let s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    resultTemp[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    resultTemp[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    resultTemp[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    resultTemp[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4<f32>(resultTemp);\n":"\n  let s = sign(a) * sign(b);\n  let ia = i32(round(a));\n  let ib = i32(round(b));\n  return f32(idiv(ia, ib, s));\n";case Qt.LESS:return t?"return vec4<f32>(a < b);":"return f32(a < b);";case Qt.LESS_EQUAL:return t?"return vec4<f32>(a <= b);":"return f32(a <= b);";case Qt.LOGICAL_AND:return t?"return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));":"return f32(a >= 1.0 && b >= 1.0);";case Qt.LOGICAL_OR:return t?"return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));":"return f32(a >= 1.0 || b >= 1.0);";case Qt.MAX:return sn("max",t);case Qt.MIN:return sn("min",t);case Qt.MOD:return t?tn:en;case Qt.MUL:return"return a * b;";case Qt.NOT_EQUAL:return t?nn:"\n  if (isnan(a) || isnan(b)) {\n    return 1.0;\n  }\n  return f32(a != b);\n";case Qt.POW:return t?rn:"\n  if(a < 0.0 && floor(b) < b) {\n    return uniforms.NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  if (round(abs(b) % 2.0) != 1.0) {\n    return pow(abs(a), b);\n  }\n  return sign(a) * pow(abs(a), b);\n";case Qt.PRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return b * a; }  return a;";case Qt.SQUARED_DIFFERENCE:return"return (a - b) * (a - b);";case Qt.SUB:return"return a - b;";default:throw new Error(`BinaryType ${e} is not implemented!`)}}var an;!function(e){e[e.ABS=0]="ABS",e[e.ACOS=1]="ACOS",e[e.ACOSH=2]="ACOSH",e[e.ASIN=3]="ASIN",e[e.ASINH=4]="ASINH",e[e.ATAN=5]="ATAN",e[e.ATANH=6]="ATANH",e[e.CEIL=7]="CEIL",e[e.COS=8]="COS",e[e.COSH=9]="COSH",e[e.ELU=10]="ELU",e[e.ERF=11]="ERF",e[e.EXP=12]="EXP",e[e.EXPM1=13]="EXPM1",e[e.FLOOR=14]="FLOOR",e[e.IS_FINITE=15]="IS_FINITE",e[e.IS_INF=16]="IS_INF",e[e.IS_NAN=17]="IS_NAN",e[e.LINEAR=18]="LINEAR",e[e.LOG=19]="LOG",e[e.LOG1P=20]="LOG1P",e[e.LOGICAL_NOT=21]="LOGICAL_NOT",e[e.NEG=22]="NEG",e[e.RELU=23]="RELU",e[e.RELU6=24]="RELU6",e[e.LEAKYRELU=25]="LEAKYRELU",e[e.RECIPROCAL=26]="RECIPROCAL",e[e.ROUND=27]="ROUND",e[e.RSQRT=28]="RSQRT",e[e.SELU=29]="SELU",e[e.SIGMOID=30]="SIGMOID",e[e.SIGN=31]="SIGN",e[e.SIN=32]="SIN",e[e.SINH=33]="SINH",e[e.SOFTPLUS=34]="SOFTPLUS",e[e.SQRT=35]="SQRT",e[e.SQUARE=36]="SQUARE",e[e.STEP=37]="STEP",e[e.TAN=38]="TAN",e[e.TANH=39]="TANH",e[e.TO_INT=40]="TO_INT"}(an||(an={}));const un=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  let p = ${n.backend_util.ERF_P};\n  let a1 = ${n.backend_util.ERF_A1};\n  let a2 = ${n.backend_util.ERF_A2};\n  let a3 = ${n.backend_util.ERF_A3};\n  let a4 = ${n.backend_util.ERF_A4};\n  let a5 = ${n.backend_util.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`,ln=`\n  if (a >= 0.0) {\n    return ${n.backend_util.SELU_SCALE} * a;\n  } else {\n    return ${n.backend_util.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;function hn(e,t){switch(e){case an.ABS:return"return abs(a);";case an.ACOS:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n";case an.ACOSH:return"\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n";case an.ASIN:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n";case an.ASINH:return"return asinh(a);";case an.ATAN:return"\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n";case an.ATANH:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n";case an.COS:return"return cos(a);";case an.COSH:return"\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n";case an.CEIL:return"return ceil(a);";case an.ELU:return t?"\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n":"if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";case an.ERF:return un;case an.EXP:return"return exp(a);";case an.EXPM1:return"return exp(a) - 1.0;";case an.FLOOR:return"return floor(a);";case an.IS_FINITE:return"return f32(!isnan(a) && !isinf(a));";case an.IS_INF:return"return f32(isinf(a));";case an.IS_NAN:return"return f32(isnan(a));";case an.LINEAR:return"return a;";case an.LOG:return"if (a < 0.0) { return uniforms.NAN; }\n  return log(a);";case an.LOG1P:return"\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n";case an.LOGICAL_NOT:return"return f32(!(a >= 1.0));";case an.NEG:return"return -a;";case an.LEAKYRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return uniforms.alpha * a; } return a;";case an.RECIPROCAL:return"return 1.0 / a;";case an.RELU:return t?"\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n":"return select(a, 0.0, a < 0.0);";case an.RELU6:return t?"return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));":"return clamp(a, 0.0, 6.0);";case an.ROUND:return"return round(a);";case an.RSQRT:return"return inverseSqrt(a);";case an.SELU:return ln;case an.SIGMOID:return"return 1.0 / (1.0 + exp(-1.0 * a));";case an.SIGN:return"return sign(a);";case an.SIN:return"return sin(a);";case an.SINH:return"\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n";case an.SOFTPLUS:return"\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n";case an.SQRT:return"return sqrt(a);";case an.SQUARE:return"return a * a;";case an.STEP:return"\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n";case an.TAN:return"return tan(a);";case an.TANH:return"\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n";case an.TO_INT:return"return f32(i32((a)));";default:throw new Error(`BinaryType ${e} is not implemented!`)}}const cn=e=>{switch(e){case 1:return"f32";case 2:return"vec2<f32>";case 3:return"vec3<f32>";case 4:return"vec4<f32>";default:throw new Error(e+"-component is not supported.")}};function dn(e,t=!1,n=!1,i=3){if(null===e)return"";let r="";if("linear"===e)r=hn(an.LINEAR);else if("relu"===e)r=hn(an.RELU,n);else if("elu"===e)r=hn(an.ELU,n);else if("relu6"===e)r=hn(an.RELU6,n);else if("prelu"===e)r=on(Qt.PRELU,n);else if("sigmoid"===e)r=hn(an.SIGMOID,n);else{if("leakyrelu"!==e)throw new Error(`Activation ${e} has not been implemented for the WebGPU backend.`);r=hn(an.LEAKYRELU,n)}const s=cn(n?4:1);let o="";return o=t?`\n      fn activation(a : ${s}, coords : vec${i}<i32>) -> ${s} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${r}\n      }`:`\n      fn activation(a : ${s}, coords : vec${i}<i32>) -> ${s} {\n        ${r}\n      }`,o}function pn(e,t){return`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      ${t?"value = activation(value, coords);":""}\n      `}function fn(e,t,i=!1,r=!1,s=!1,o=1){n.util.assert(e&&1===o||!e,()=>`transposeA ${e} is not compatible with component size ${o}`);const a=`\n      ${e?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}\n\n    `,u=t?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`\n  fn mm_readA(batch: i32, row: i32, colIn: i32) -> ${cn(o)} {\n    var value = ${cn(o)}(0.0);\n    let col = colIn * ${o};\n    ${i&&s?a:`\n    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}\n    {\n      ${a}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, colIn: i32) -> ${cn(o)} {\n    let col = colIn * ${o};\n    var value = ${cn(o)}(0.0);\n    ${u}\n    return value;\n  }\n  `}function mn(e,t,n,i,r=!1,s=!1,o=!1,a=1){return`\n  ${fn(n,i,r,s,o,a)}\n  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${cn(a)}) {\n    let col = colIn * ${a};\n    ${r&&s?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${pn(e,t)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `}function gn(e,t,i=!1,r=32,s=!1,o=32,a=!1,u=!1){const l=t[1]*e[1],h=t[0]*e[0],c=i?l:r,d=i?r:l,p=c/t[0],f=r/t[1],m=e[1];return n.util.assert((i&&4===p&&4===e[1]||!i&&(3===p||4===p))&&c%t[0]==0&&r%t[1]==0&&4===e[0],()=>`If transposeA ${i} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.\n          Otherwise, innerElementSize ${p} must be 3 or 4.\n      tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}. tileInner ${r} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`),`\n  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${c/p}>, ${d}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${h/e[0]}>, ${r}>;\n\n  ${_t()} {\n    let localRow = i32(localId.y);\n    let tileRow = ${a?"0":"localRow * "+m};\n    let tileCol = i32(localId.x);\n\n    let globalRow = ${a?"0":"i32(globalId.y) * "+m};\n    let globalCol = i32(globalId.x);\n    let batch = ${s?"0":"i32(globalId.z)"};\n    let batchA = ${s||!u?"batch":"batch % uniforms.aShape[0]"};\n    let batchB = ${s||!u?"batch":"batch % uniforms.bShape[0]"};\n    let globalRowStart = i32(workgroupId.y) * ${l};\n\n    let numTiles = ${s?""+Math.ceil(o/r):`(uniforms.dimInner - 1) / ${r} + 1`};\n    var kStart = ${s?"i32(globalId.z) * "+o:"0"};\n\n    var acc: array<vec4<f32>, ${m}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${f};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${((e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart / ${t} + inputCol);\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart / ${t} + inputCol);\n        `)(i,p)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${f}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${r};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${r/p}; k++) {\n            let BCached0 = mm_Bsub[k * ${p}][tileCol];\n            let BCached1 = mm_Bsub[k * ${p} + 1][tileCol];\n            let BCached2 = mm_Bsub[k * ${p} + 2][tileCol];\n            ${3===p?"":`let BCached3 = mm_Bsub[k * ${p} + 3][tileCol];`}\n\n            ${((e,t,n)=>e?`\n        let ACached0 = mm_Asub[k * ${t}][localRow];\n        let ACached1 = mm_Asub[k * ${t} + 1][localRow];\n        let ACached2 = mm_Asub[k * ${t} + 2][localRow];\n        ${3===t?"":`let ACached3 = mm_Asub[k * ${t} + 3][localRow];`}\n        for (var i = 0; i < ${n}; i++) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < ${n}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`)(i,p,m)}\n        }\n\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`}const bn=e=>e?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        ":"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        ";function yn(e,t,i=!1,r=32,s=!1,o=32,a=!1,u=!1){const l=e[1]*t[1],h=e[0]*t[0],c=i?l:r,d=i?r:l;n.util.assert(d%t[1]==0&&c%t[0]==0&&r%t[1]==0,()=>`tileAHight ${d} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${r} must be divisible by workgroupSize[1]${t[1]}`);const p=d/t[1],f=c/t[0],m=r/t[1],g=e[1],b=e[0],y=a?`\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${l};\n      let globalColStart = i32(workgroupId.x) * ${h};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${t[1]}) {\n          for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\n            ${bn(i)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${t[1]}) {\n              for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${r};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${b}>;\n        for (var k = 0; k < ${r}; k++) {\n          for (var inner = 0; inner < ${b}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n            let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${b}; innerCol++) {\n              acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                  ACached * BCached[innerCol];\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n        for (var innerCol = 0; innerCol < ${b}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${t[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      `:`\n  let tileRow = i32(localId.y) * ${g};\n  let tileCol = i32(localId.x) * ${b};\n\n  let globalRow = i32(globalId.y) * ${g};\n  let globalCol = i32(globalId.x) * ${b};\n  let globalRowStart = i32(workgroupId.y) * ${l};\n\n  let tileRowA = i32(localId.y) * ${p};\n  let tileColA = i32(localId.x) * ${f};\n  let tileRowB = i32(localId.y) * ${m};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${p}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${f}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${bn(i)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${b}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${r};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${b}>;\n    for (var k = 0; k < ${r}; k++) {\n      for (var inner = 0; inner < ${b}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n        ${(e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(i)}\n        for (var innerCol = 0; innerCol < ${b}; innerCol++) {\n          acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${b}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;return`\n    var<workgroup> mm_Asub : array<array<f32, ${c}>, ${d}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${h}>, ${r}>;\n\n    ${_t()} {\n      let batch = ${s?"0":"i32(globalId.z)"};\n      let batchA = ${s||!u?"batch":"batch % uniforms.aShape[0]"};\n      let batchB = ${s||!u?"batch":"batch % uniforms.bShape[0]"};\n      let numTiles = ${s?""+Math.ceil(o/r):`(uniforms.dimInner - 1) / ${r} + 1`};\n      var kStart = ${s?"i32(globalId.z) * "+o:"0"};\n\n      var acc : array<array<f32, ${b}>, ${g}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${g}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${b}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${y}\n    }\n  `}class xn{constructor(e,t,n=!1,i=!1,r=null,s=null,o=null,a=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};const u=n?e[1]:e[2];if(this.isVec4=(u%4==0&&!n||t[1]%4==0&&n)&&t[2]%4==0&&!i,this.isVectorA=1===t[1]&&!n,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{const e=function(e,t,n,i=!1){const r=[8,8,1],s=[4,4,1];return i||(e<=8&&(s[1]=1),t<=16&&n<=16&&(r[0]=4)),{workgroupSize:r,elementsPerThread:s}}(t[1],u,t[2],n);this.workgroupSize=e.workgroupSize,this.elementsPerThread=e.elementsPerThread}this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);const l=null!=r,h=null!=o;l&&this.variableNames.push("bias"),h&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=a,this.transposeA=n,this.transposeB=i,this.addBias=l,this.activation=s,this.hasPreluActivationWeights=h,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],u),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${n}_${i}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,n){const i=this.workgroupSize[1]*this.elementsPerThread[1],r=this.workgroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=4*this.workgroupSize[0]:this.tileInner=r;return[e%i==0,t%r==0,n%this.tileInner==0]}getUserCode(){return`\n      ${dn(this.activation,this.hasPreluActivationWeights,this.isVec4)}\n      ${mn(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}\n      ${this.isVec4?gn(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.isVectorA,!0):this.isVectorA?function(e,t=!1){n.util.assert(1===e[1]&&1===e[2],()=>`A linear work group size is required. But got ${e}.`);const i=4*e[0];return`\n    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;\n\n    ${_t()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${i} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${i} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${(e=>e?"\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ":"\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  ")(t)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${i/4}; k++) {\n          let rowB = t * ${i} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `}(this.workgroupSize,this.transposeA):yn(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}\n    `}}class wn{constructor(e,t=!1,n=!1,i=null,r=null,s=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize);const o=null!=i,a=null!=s;o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=n,this.addBias=o,this.activation=r,this.hasPreluActivationWeights=a,this.shaderKey=`matMulReduce_${this.activation}_${t}_${n}`}getUserCode(){var e;return`\n      ${dn(this.activation,this.hasPreluActivationWeights)}\n      ${mn(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${e=this.workgroupSize[0],`\n    var<workgroup> sumValues : array<f32, ${e}>;\n    ${_t()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${e}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${e/2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `}\n    `}}class kn{constructor(e,t,n,i=!1,r=!1,s=null,o=null,a=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=n,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(n[2]/this.workgroupSize[0]),Math.ceil(n[1]/this.workgroupSize[1]),n[0]];const u=null!=s;u&&this.variableNames.push("bias");const l=null!=a;l&&this.variableNames.push("preluActivationWeights"),this.transposeA=i,this.transposeB=r,this.addBias=u,this.activation=o,this.hasPreluActivationWeights=l,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${i}_${r}`}getUserCode(){return`\n      ${dn(this.activation,this.hasPreluActivationWeights)}\n      ${mn(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function(e){const t=e[1],n=e[0],i=t>n?t:n;return`\n  var<workgroup> mm_Asub : array<array<f32, ${i}>, ${t}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${n}>, ${i}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${_t()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${i} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${i};\n    globalRowB = globalRowB + ${i};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${i};\n      globalRowB = globalRowB + ${i};\n\n      for (var k = 0; k < ${i}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `}(this.workgroupSize)}\n    `}}class vn{constructor(e,t,i=!1,r=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.isVec4=!1,this.splitedDimInner=128,n.util.assert(1===e[0],()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]},this.isVec4=(i&&this.outputShape[1]%4==0||!i&&t%4==0)&&this.outputShape[2]%4==0,this.elementsPerThread=[4,4,this.splitedDimInner],this.isVec4||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=Wt(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workgroupSize,this.elementsPerThread),this.transposeA=i,this.transposeB=r,this.shaderKey=`matMulSplitK_${i}_${r}_${this.elementsPerThread}_${this.isVec4}`}getUserCode(){const e=this.isVec4?4:1;return`\n      ${fn(!1,this.transposeB,!1,!1,!1,e)}\n      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${cn(e)}) {\n        let col = colIn * ${e};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${e}; i = i + 1) {\n            ${At("&result[flatIndex + i]",""+(e>1?"value[i]":"value"),"float32")}\n          }\n        }\n      }\n      ${this.isVec4?gn(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):yn(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}\n    `}}class Sn{constructor(e,t=null,n=null,i=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=i,this.activation=n,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey="biasActivation_"+n}getUserCode(){return`\n    ${dn(this.activation,this.hasPreluActivationWeights)}\n    ${_t("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${pn(this.addBias,this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `}}class In{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`\n    ${_t("index")} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `}}function Cn(e){const{backend:t,attrs:i}=e,{shape:r,value:s}=i;let{dtype:o}=i;if(o=o||n.util.inferDtype(s),"string"===o){const e=n.util.getArrayFromDType(o,n.util.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,o,e)}{const e=new In(r),n=[{type:"float32",data:[s]}];return t.runWebGPUProgram(e,[],o,n)}}const Tn={kernelName:n.Fill,backendName:"webgpu",kernelFunc:Cn};function Rn(e){const{inputs:t,attrs:i}=e,{x:r}=t,{shape:s}=i,o=n.util.sizeFromShape(r.shape),a=n.util.inferFromImplicitShape(s,o),u=n.util.sizeFromShape(a);return n.util.assert(o===u,()=>`The new shape (${a}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),e.backend.incRef(r.dataId),{dataId:r.dataId,shape:a,dtype:r.dtype}}const An={kernelName:n.Reshape,backendName:"webgpu",kernelFunc:Rn};function $n({a:e,b:t,transposeA:i,transposeB:r,backend:s,bias:o=null,preluActivationWeights:a=null,leakyreluAlpha:u=0,activation:l=null}){const h=e.shape.length,c=t.shape.length,d=i?e.shape[h-2]:e.shape[h-1],p=r?t.shape[c-1]:t.shape[c-2],f=i?e.shape[h-1]:e.shape[h-2],m=r?t.shape[c-2]:t.shape[c-1],g=e.shape.slice(0,-2),b=t.shape.slice(0,-2),y=n.util.sizeFromShape(g),x=n.util.sizeFromShape(b),w=n.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);n.util.assert(d===p,()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${i} and transposeB=${r} must match.`);const k=i?[y,d,f]:[y,f,d],v=r?[x,m,p]:[x,p,m],S=Rn({inputs:{x:e},backend:s,attrs:{shape:k}}),I=Rn({inputs:{x:t},backend:s,attrs:{shape:v}}),C=[S,I],T=Math.max(y,x),R=[S,I],A=[{type:"int32",data:[f]},{type:"int32",data:[m]},{type:"int32",data:[d]}];let $,P;const z=[T,f,m];let _=n.env().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(_<0){const e=n.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),t=e>0?e:s.thresholdToIncreaseWorkgroups,i=T*Math.ceil(f/32)*Math.ceil(m/32);_=i<=t||f<=8&&i<=2*t?T*f*m<=128?Xt.MatMulReduceProgram:1===T&&p>=2e3?Xt.MatMulSplitKProgram:Xt.MatMulSmallOutputSizeProgram:Xt.MatMulPackedProgram}switch(_){case Xt.MatMulReduceProgram:$=new wn(z,i,r,o,l,a);break;case Xt.MatMulSplitKProgram:if(P=Cn({backend:s,attrs:{shape:z,value:0,dtype:e.dtype}}),$=new vn(z,p,i,r),o||l){P=s.runWebGPUProgram($,R,e.dtype,A,P);const t=new Sn(P.shape,o,l,a);let n=null;const i=[P];o&&i.push(o),a&&i.push(a),"leakyrelu"===l&&(n=[{type:"float32",data:[u]}],t.uniforms+=" alpha : f32,");const r=s.runWebGPUProgram(t,i,P.dtype,n);C.push(P);const h=Rn({inputs:{x:r},backend:s,attrs:{shape:w}});C.push(r);for(const e of C)s.disposeData(e.dataId);return h}break;case Xt.MatMulSmallOutputSizeProgram:$=new kn(k,v,z,i,r,o,l,a);break;case Xt.MatMulPackedProgram:const t=s.adapterInfo.isIntel();$=new xn(k,z,i,r,o,l,a,t);break;default:throw new Error(`Unsupported MatMulProgramType ${_}.`)}o&&R.push(o),a&&R.push(a),"leakyrelu"===l&&(A.push({type:"float32",data:[u]}),$.uniforms+=" alpha : f32,"),P=s.runWebGPUProgram($,R,e.dtype,A,P);const M=Rn({inputs:{x:P},backend:s,attrs:{shape:w}});C.push(P);for(const e of C)s.disposeData(e.dataId);return M}const Pn={kernelName:n._FusedMatMul,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{a:r,b:s,bias:o,preluActivationWeights:a}=t,{transposeA:u,transposeB:l,activation:h,leakyreluAlpha:c}=i;return $n({a:r,b:s,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:a,leakyreluAlpha:c,activation:h})}};class zn{constructor(e,t,i){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=n.backend_util.assertAndGetBroadcastShape(t,i),this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="binaryOpComplex_"+e,this.op=e}getUserCode(){return`\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${on(this.op,!1)}\n      }\n\n      ${_t("index")} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `}}class _n{constructor(e,t,i){this.size=!0,this.variableNames=["A","B"],this.outputShape=n.backend_util.assertAndGetBroadcastShape(t,i),this.dispatchLayout=Ht(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length<=1&&i.length>1&&t[0]<128,this.useSharedMemoryWithB=i.length<=1&&t.length>1&&i[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB?(this.isVec4=!1,this.lastDimensionSize=this.useSharedMemoryWithB?i[0]:t[0],this.shaderKey=`binary_${this.type}_${e}_${this.lastDimensionSize}_${this.useSharedMemoryWithB}`,this.type="shared",this.workgroupSize=[256,1,1],this.workPerThread=1):(n.util.arraysEqual(t,i)&&n.util.sizeFromShape(t)%4==0?(this.isVec4=!0,this.type="vec4",this.workPerThread=4):(this.isVec4=!1,this.type="plain",this.workPerThread=1),this.shaderKey=`binary_${this.type}_${e}`,this.workgroupSize=[128,1,1]),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1])}getUserCode(){let e;const t=this.isVec4?"vec4<f32>":"f32",n=`\n    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {\n      let isNaN = false;\n      {\n        ${on(this.op,this.isVec4)}\n      }\n    };\n    `;if("shared"===this.type){const t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",i=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);\n          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];\n          let b = getBByOutputIndex(index);`;e=`\n        ${n}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${_t("index")} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${i}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `}else e=`\n       ${n}\n       ${_t("index")} {\n         if (index < uniforms.size) {\n           let a = getAByOutputIndex(index);\n           let b = getBByOutputIndex(index);\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;return e}}function Mn(e){const{inputs:t}=e,{x:n}=t;return e.backend.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}const Nn={kernelName:n.Identity,backendName:"webgpu",kernelFunc:Mn};function Fn(e){const{inputs:t,backend:n}=e,{real:i,imag:r}=t,s=n.makeTensorInfo(i.shape,"complex64"),o=n.tensorMap.get(s.dataId),a=Mn({inputs:{x:i},backend:n}),u=Mn({inputs:{x:r},backend:n});return o.complexTensorInfos={real:a,imag:u},s}const En={kernelName:n.Complex,backendName:"webgpu",kernelFunc:Fn};class On{constructor(e,t,n=""){this.variableNames=["A"],this.size=!0;this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==n&&(this.uniforms=n),this.shaderKey="unary_"+t}getUserCode(){return`\n      fn unaryOperation(a : f32) -> f32 {\n        ${hn(this.op,!1)}\n      }\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `}}function Bn({opType:e,cpuKernelImpl:t,dtype:n}){return({inputs:i,backend:r})=>{const{x:s}=i,o=r,a=n||s.dtype;if(o.shouldExecuteOnCPU([s])&&null!=t){const e=o.tensorMap.get(s.dataId),n=t(e.values,a);return o.makeTensorInfo(s.shape,a,n)}const u=new On(s.shape,e);return o.runWebGPUProgram(u,[s],a)}}function Ln({opType:e,cpuKernelImpl:t,supportsComplex:i=!1,dtype:r}){return({inputs:s,backend:o})=>{const{a:a,b:u}=s,l=o;if(i&&"complex64"===a.dtype){const t=l.tensorMap.get(a.dataId),i=l.tensorMap.get(u.dataId);let r,s;if(e!==Qt.MUL)[r,s]=[[t.complexTensorInfos.real,i.complexTensorInfos.real],[t.complexTensorInfos.imag,i.complexTensorInfos.imag]].map(t=>{const[i,r]=t,s={dataId:i.dataId,dtype:i.dtype,shape:a.shape},o={dataId:r.dataId,dtype:r.dtype,shape:u.shape},h=new _n(e,a.shape,u.shape);return l.runWebGPUProgram(h,[s,o],n.upcastType(i.dtype,r.dtype))});else{const e=new zn(Qt.COMPLEX_MULTIPLY_REAL,a.shape,u.shape),n=new zn(Qt.COMPLEX_MULTIPLY_IMAG,a.shape,u.shape),o=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:u.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:u.shape}];r=l.runWebGPUProgram(e,o,"float32"),s=l.runWebGPUProgram(n,o,"float32")}const o=Fn({inputs:{real:r,imag:s},backend:l});return l.disposeData(r.dataId),l.disposeData(s.dataId),o}const h=r||n.upcastType(a.dtype,u.dtype);if(("string"===a.dtype||"string"===u.dtype||l.shouldExecuteOnCPU([a,u]))&&null!=t){const e=l.tensorMap.get(a.dataId).values,i=l.tensorMap.get(u.dataId).values,r="string"===a.dtype?n.backend_util.fromUint8ToStringArray(e):e,s="string"===a.dtype?n.backend_util.fromUint8ToStringArray(i):i,[o,c]=t(a.shape,u.shape,r,s,h);return l.makeTensorInfo(c,h,o)}const c=new _n(e,a.shape,u.shape);return l.runWebGPUProgram(c,[a,u],h)}}function Dn(e){return(t,i,r,s,o)=>{const a=n.backend_util.assertAndGetBroadcastShape(t,i),u=a.length,l=n.util.computeStrides(a),h=n.util.sizeFromShape(a),c=n.util.getTypedArrayFromDType(o,h),d=t.length,p=i.length,f=n.util.computeStrides(t),m=n.util.computeStrides(i),g=n.backend_util.getBroadcastDims(t,a),b=n.backend_util.getBroadcastDims(i,a);if(g.length+b.length===0)for(let t=0;t<c.length;++t)c[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<c.length;++t){const i=n.util.indexToLoc(t,u,l),o=i.slice(-d);g.forEach(e=>o[e]=0);const a=n.util.locToIndex(o,d,f),h=i.slice(-p);b.forEach(e=>h[e]=0);const y=n.util.locToIndex(h,p,m);c[t]=e(r[a],s[y])}return[c,a]}}const Un=Dn((e,t)=>e+t);function Wn(e){return(t,i,r)=>{const s=n.util.getTypedArrayFromDType(i,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const Vn=Wn(e=>Math.ceil(e));const Gn=Dn((e,t)=>e===t?1:0),Hn=Wn(e=>Math.exp(e)),qn=Wn(e=>Math.expm1(e)),Kn=Wn(e=>Math.floor(e));const Xn=Dn((e,t)=>e>t?1:0),jn=Dn((e,t)=>e>=t?1:0),Yn=Dn((e,t)=>e<t?1:0),Qn=Dn((e,t)=>e<=t?1:0);const Zn=Wn(e=>Math.log(e));const Jn=Dn((e,t)=>Math.max(e,t)),ei=Dn((e,t)=>Math.min(e,t)),ti=Dn((e,t)=>e*t);const ni=Dn((e,t)=>e!==t?1:0);function ii(e,t,n,i){const r=[];let s=0;const o=t.length-1+n.length,a=new Array(o).fill(null).map(()=>[0]);!function(e,t){for(let n=0;n<e.length;++n){const i=e[n],r=n===e.length-1?t:e[n+1].length;if(0===i.length)throw new Error("Ragged splits may not be empty");if(i[0]<0)throw new Error("Ragged splits must be non-negative");if(i[i.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<i.length;++e)if(i[e-1]>i[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,i);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)a[e].push(t*n)}for(let i=0;i<e.length;++i){let o=e[i],u=e[i]+1;for(let e=0;e<n.length;++e){const i=n[e],r=e+t.length-1;if(r>=0){const e=a[r],t=e[e.length-1]-i[o];for(let e=o;e<u;++e)a[r].push(i[e+1]+t)}o=i[o],u=i[u]}u!==o&&(r.push([o,u]),s+=u-o)}return{outSplits:a,valueSlices:r,numValues:s}}function ri(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let i=t;i<e.length;i++)n[t-1]*=e[i];return n}function si(e,t,i,r,s){const o=t.slice();o[0]=s;const a=n.util.getArrayFromDType(i,n.util.sizeFromShape(o)),u=e.length;return function(e,t,n,i,r,s){const o=ri(t,2)[1],a=ri(s,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<i;++t)r[u*a+t]=e[n*o+t];++u}}(e,t,r,0===u?0:u/t[0],a,o),[a,o]}var oi=n.backend_util.RowPartitionType;class ai{constructor(e,t,i,r,s,o,a,u,l,h){this.shape=e,this.shapeShape=t,this.values=i,this.valuesShape=r,this.valuesDType=s,this.defaultValue=o,this.defaultValueShape=a,this.rowPartitionValues=u,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=n.backend_util.getRowPartitionTypesHelper(h),this.raggedRank=n.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===oi.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===oi.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case oi.VALUE_ROWIDS:return ai.getMaxWidthValueRowID(t);case oi.ROW_SPLITS:return ai.getMaxWidthRowSplit(t);default:throw new Error("Cannot handle partition type "+oi[this.getRowPartitionTypeByDimension(e-1)])}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let i=0;i<t-1;++i){const t=e[i+1]-e[i];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,i=e[0],r=0;for(let s=1;s<t;++s){const t=e[s];t!==i&&(i=t,r=Math.max(s-n,r),n=s)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return li(e,n)}calculateOutputSize(e){const t=this.valuesShape,i=this.defaultValueShape;n.backend_util.validateDefaultValueShape(i,t);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=n.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,i){const r=Math.min(e,i),s=[];let o=0;for(let e=0;e<r;++e,o+=t)s.push(o);for(let t=r;t<e;++t)s.push(-1);return n.util.assert(s.length===e,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(e,t,n,i){const r=e.length,s=[];for(let o=0;o<r-1;++o){const r=e[o+1]-e[o];let a=Math.min(i,r),u=t[o];-1===u&&(a=0);for(let e=0;e<a;++e)s.push(u),u+=n;for(let e=0;e<r-a;++e)s.push(-1)}if(r>0&&s.length!==e[r-1])throw new Error("Invalid row split size.");return s}calculateOutputIndexValueRowID(e,t,n,i){const r=e.length,s=[];if(0===r)return[];let o=0,a=e[0];if(a>=t.length)throw new Error(`Got currentValueRowId=${a}, which is not less than ${t.length}`);let u=t[a];s.push(u);for(let l=1;l<r;++l){const r=e[l];if(r===a)u>=0&&(++o,o<i?u+=n:u=-1);else{if(o=0,a=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);u=t[r]}s.push(u)}if(s.length!==e.length)throw new Error("Invalid row ids.");return s}calculateOutputIndex(e,t,n,i){const r=this.getRowPartitionTensor(e),s=this.getRowPartitionTypeByDimension(e);switch(s){case oi.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,i);case oi.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,i);default:throw new Error("Unsupported partition type: "+oi[s])}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case oi.FIRST_DIM_SIZE:return e[0];case oi.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case oi.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error("Cannot handle type "+oi[t])}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),i=new Array(this.raggedRank+1);i[i.length-1]=1;for(let e=i.length-2;e>=0;--e)i[e]=i[e+1]*t[e+1];const r=li(t,!1),s=n.util.getArrayFromDType(this.valuesDType,n.util.sizeFromShape(r));if(i[0]*t[0]>0){let n=this.calculateFirstParentOutputIndex(e,i[0],t[0]);for(let e=1;e<=this.raggedRank;++e){n=this.calculateOutputIndex(e-1,n,i[e],t[e])}this.setOutput(this.raggedRank,n,s,r)}return[r,s]}setOutput(e,t,i,r){if(0===i.length)return;const s=this.values,o=i;let a=r.slice();a=a.slice(e+1);const u=n.util.sizeFromShape(a),l=t.length;let h=this.defaultValue;if(h.length!==u&&1!==h.length){const e=this.defaultValueShape;n.tidy(()=>{const t=n.reshape(h,e),i=n.broadcastTo(t,a);h=i.dataSync()})}let c=0,d=0,p=0;for(let e=0;e<=l;++e){let n=e<l?t[e]:-1;if(n!==p){if(d<p){const e=s.subarray(c*u);ui(o.subarray(d*u),e,(p-d)*u)}if(e>=l){const e=i.length;n=Math.floor(e/u)}if(n>p)if(1===this.defaultValue.length)o.subarray(p*u,n*u).fill(this.defaultValue[0]),p=n;else for(;n>p;){ui(o.slice(p*u),h,u),++p}n<0?(c=e+1,d=p):(c=e,d=p,p=d+1)}else++p}}}function ui(e,t,n){for(let i=0;i<n;i++)e[i]=t[i]}function li(e,t){const n=[];for(let i of e){if(i<0){if(!t)throw new Error(`Dimension ${i} must be >= 0`);if(i<-1)throw new Error(`Dimension ${i} must be >= -1`);i=-1}n.push(i)}return n}const hi=Wn(e=>1/Math.sqrt(e));const ci=Wn(e=>1/(1+Math.exp(-e)));const di=Wn(e=>Math.sqrt(e)),pi=Dn((e,t)=>{const n=e-t;return n*n});class fi{constructor(e,t,i,r,s,o){this.separator=n.util.encodeString(e),this.nGramWidths=t,this.leftPad=n.util.encodeString(i),this.rightPad=n.util.encodeString(r),this.padWidth=s,this.preserveShort=o}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,i,r,s){for(let o=0;o<r;++o){const a=this.getPadWidth(s),u=Math.max(0,a-o),l=Math.max(0,a-(r-(o+1))),h=s-(u+l),c=t+(u>0?0:o-a);let d=0;d+=u*this.leftPad.length;for(let t=0;t<h;++t)d+=e[c+t].length;d+=l*this.rightPad.length;d+=(u+l+h-1)*this.separator.length,n[i+o]=new Uint8Array(d);const p=n[i+o];let f=0;const m=e=>e.forEach(e=>p[f++]=e);for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<h-1;++t)m(e[c+t]),m(this.separator);if(h>0){m(e[c+h-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const i=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error("First split value must be 0, got "+e);for(let n=1;n<r;++n){let r=t[n]>=e;if(r=r&&t[n]<=i,!r)throw new Error(`Invalid split value ${t[n]}, must be in [${e}, ${i}]`);e=t[n]}if(e!==i)throw new Error(`Last split value must be data size. Expected ${i}, got ${e}`)}const s=r-1,o=n.util.getArrayFromDType("int32",r);if(0===i||0===r){const e=new Array(i);for(let e=0;e<=s;++e)o[e]=0;return[e,o]}o[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let i=0;this.nGramWidths.forEach(e=>{i+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===i&&(i=1),o[e]=o[e-1]+i}const a=new Array(o[s]);for(let n=0;n<s;++n){const i=t[n];let r=o[n];if(this.nGramWidths.forEach(s=>{const o=t[n+1]-t[n],u=this.getNumNGrams(o,s);this.createNGrams(e,i,a,r,u,s),r+=u}),this.preserveShort&&r===o[n]){const s=t[n+1]-t[n];if(0===s)continue;const o=s+2*this.padWidth,u=1;this.createNGrams(e,i,a,r,u,o)}}return[a,o]}}function mi(e,t,n,i){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)i.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let s=e.indexOf(r);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||i.push(t),s=(e=e.subarray(s+1)).indexOf(r)}return void(n&&0===e.length||i.push(e))}let r=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(r,s);n&&0===t.length||i.push(t),r=s+1}}const gi=Dn((e,t)=>e-t);const bi=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function yi(e,t,i=0,r=e.length-1){for(;r>i;){if(r-i>600){const n=r-i+1,s=t-i+1,o=Math.log(n),a=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*a*(n-a)/n)*Math.sign(s-n/2);yi(e,t,Math.max(i,Math.floor(t-s*a/n+u)),Math.min(r,Math.floor(t+(n-s)*a/n+u)))}const s=e[t];let o=i,a=r;for(n.util.swap(e,i,t),bi(e[r],s)>0&&n.util.swap(e,i,r);o<a;){for(n.util.swap(e,o,a),o++,a--;bi(e[o],s)<0;)o+=1;for(;bi(e[a],s)>0;)a-=1}0===bi(e[i],s)?n.util.swap(e,i,a):(a+=1,n.util.swap(e,a,r)),a<=t&&(i=a+1),t<=a&&(r=a-1)}}var xi=Object.freeze({__proto__:null,simpleAbsImpl:function(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t},addImpl:Un,bincountImpl:function(e,t,i,r,s){const o=n.util.sizeFromShape(r),a=n.util.makeZerosTypedArray(s,i);for(let n=0;n<e.length;n++){const i=e[n];if(i<0)throw new Error("Input x must be non-negative!");i>=s||(a[i]+=o>0?t[n]:1)}return a},bincountReduceImpl:function(e,t,i,r=!1){const s=e.shape[0],o=e.shape[1],a=n.buffer([s,i],t.dtype);for(let n=0;n<s;n++)for(let s=0;s<o;s++){const o=e.get(n,s);if(o<0)throw new Error("Input x must be non-negative!");o>=i||(r?a.set(1,n,o):t.size>0?a.set(a.get(n,o)+t.get(n,s),n,o):a.set(a.get(n,o)+1,n,o))}return a},castImpl:function(e,t,i,r){if("int32"===r){return[t,"int32",Int32Array.from(e)]}if("bool"===r){const r=n.util.toTypedArray([0],i),[s,o]=Dn((e,t)=>e!==t?1:0)(t,[],e,r,"bool");return[o,"bool",s]}throw new Error(`Error in Cast: failed to cast ${i} to ${r}`)},ceilImpl:Vn,concatImpl:function(e,t,i,r){const s=n.util.getArrayFromDType(i,n.util.sizeFromShape(t));if(r&&"string"!==i){let t=0;e.forEach(e=>{const i=n.util.sizeFromShape(e.shape);s.set(e.vals,t),t+=i})}else{let r=0;e.forEach(e=>{const o="string"===i?n.backend_util.fromUint8ToStringArray(e.vals):e.vals;let a=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=o[a++]}r+=e.shape[1]})}return s},equalImpl:Gn,expImpl:Hn,expm1Impl:qn,floorImpl:Kn,gatherNdImpl:function(e,t,i,r,s,o,a,u,l){const h=n.buffer([r,o],i);for(let n=0;n<r;n++){const i=[];let r=0;for(let t=0;t<s;t++){const o=e[n*s+t];r+=o*a[t],i.push(o)}if(r<0||r>=l/o)throw new Error(`Invalid indices: ${i} does not index into ${u}`);for(let e=0;e<o;e++)h.values[n*o+e]=t.get(...t.indexToLoc(r*o+e))}return h},gatherV2Impl:function(e,t,i){const r=n.buffer(i,e.dtype);for(let n=0;n<r.size;++n){const i=r.indexToLoc(n).slice(),s=i[0],o=i[2],a=t.locToIndex([s,o]);i[2]=t.values[a];const u=e.locToIndex(i);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r},greaterImpl:Xn,greaterEqualImpl:jn,lessImpl:Yn,lessEqualImpl:Qn,linSpaceImpl:function(e,t,i){const r=(t-e)/(i-1),s=n.util.makeZerosTypedArray(i,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s},logImpl:Zn,maxImpl:function(e,t,i,r){const s=n.util.getTypedArrayFromDType(r,n.util.sizeFromShape(i));for(let n=0;n<s.length;++n){const i=n*t;let r=e[i];for(let n=0;n<t;++n){const t=e[i+n];(Number.isNaN(t)||t>r)&&(r=t)}s[n]=r}return s},maximumImpl:Jn,minimumImpl:ei,multiplyImpl:ti,negImpl:function(e,t,i){const r=n.util.createScalarValue(-1,i);return ti([],t,r,e,i)},notEqualImpl:ni,prodImpl:function(e,t,i,r){const[s,o]=n.backend_util.computeOutAndReduceShapes(e,r),a=n.upcastType(t,"int32"),u=n.util.makeZerosTypedArray(n.util.sizeFromShape(s),a),l=n.util.sizeFromShape(o);for(let e=0;e<u.length;++e){const t=e*l;let n=1;for(let e=0;e<l;++e)n*=i[t+e];u[e]=n}return{outVals:u,outShape:s,outDtype:a}},raggedGatherImpl:function(e,t,i,r,s,o,a,u){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,i){e.forEach((e,r)=>{if(e<0||e>=i){const s=n.util.indexToLoc(r,t.length,n.util.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${i})`)}})}(o,a,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const l=r[0],{outSplits:h,valueSlices:c,numValues:d}=ii(o,a,e,l),p=function(e){const t=[];for(let i=0;i<e.length;++i){const r=e[i].length,s=n.util.getArrayFromDType("int32",r);t.push(s),e[i].forEach((e,t)=>s[t]=e)}return t}(h),f=si(i,r,s,c,d);return[p,f[0],f[1]]},raggedRangeImpl:function(e,t,i,r,s,o,a){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");const u=0===t.length,l=0===s.length,h=0===a.length,c=[];u||c.push(t[0]),l||c.push(s[0]),h||c.push(a[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const d=0===c.length?1:c[0],p=n.util.getArrayFromDType("int32",d+1);p[0]=0;for(let t=0;t<d;++t){const n=u?e[0]:e[t],i=l?r[0]:r[t],s=h?o[0]:o[t];if(0===s)throw new Error("Requires delta != 0");let a;if(s>0&&i<n||s<0&&i>n)a=0;else if(a=Math.ceil(Math.abs((i-n)/s)),a>2147483647)throw new Error("Requires ((limit - start) / delta) <= 2147483647");p[t+1]=p[t]+a}const f=p[d],m=n.util.getArrayFromDType(i,f);let g=0;for(let t=0;t<d;++t){const n=p[t+1]-p[t];let i=u?e[0]:e[t];const r=h?o[0]:o[t];for(let e=0;e<n;++e)m[g++]=i,i+=r}return[p,m]},raggedTensorToTensorImpl:function(e,t,n,i,r,s,o,a,u,l){return new ai(e,t,n,i,r,s,o,a,u,l).compute()},rangeImpl:function(e,t,i,r){if(e===t||e<t&&i<0||t<e&&i>1)return n.util.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/i)),o=n.util.makeZerosTypedArray(s,r);t<e&&1===i&&(i=-1),o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+i;return o},rsqrtImpl:hi,scatterImpl:function(e,t,i,r,s,o,a,u,l,h){const c=[r/s,s],d=e.values,p=t.values;if(0===r)return n.buffer(i,t.dtype);const f=n.buffer(c,t.dtype);"string"==typeof l||"number"==typeof l?f.values.fill(l):"boolean"==typeof l&&f.values.fill(+l);for(let e=0;e<o;e++){const n=[];let o=0;for(let t=0;t<a;t++){const i=d[e*a+t];n.push(i),o+=i*u[t]}if(o<0||o>=r/s)throw new Error(`Invalid indices: ${n} does not index into ${i}`);for(let n=0;n<s;n++)h?f.values[o*s+n]+=p[e*s+n]:f.values[o*s+n]=0===t.rank?p[0]:p[e*s+n]}return f},sigmoidImpl:ci,sliceImpl:function(e,t,i,r,s){const o=n.slice_util.isSliceContinous(r,t,i),a=n.util.sizeFromShape(i),u=n.util.computeStrides(r);if(o){const i=n.slice_util.computeFlatOffset(t,u);return"string"===s?e.slice(i,i+a):e.subarray(i,i+a)}const l="string"===s?n.backend_util.fromUint8ToStringArray(e):e,h=n.buffer(r,s,l),c=n.buffer(i,s);for(let e=0;e<c.size;++e){const n=c.indexToLoc(e),i=n.map((e,n)=>e+t[n]);c.set(h.get(...i),...n)}return"string"===s?n.backend_util.fromStringArrayToUint8(c.values):c.values},sparseFillEmptyRowsImpl:function(e,t,i,r,s,o,a){const u=t[0],l=o[0],h=new Array(l),c=new Array(u),d=t[1];if(0===l){if(0!==u)throw new Error(n.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[n.util.getArrayFromDType(i,0),[0,d],n.util.getArrayFromDType(s,0),h,c]}let p=!0,f=0;const m=new Array(l).fill(0);for(let t=0;t<u;++t){const i=e[t*d];if(i<0)throw new Error(n.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,i));if(i>=l)throw new Error(n.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,i,l));++m[i],p=p&&i>=f,f=i}let g=!0;for(let e=0;e<l;++e){const t=0===m[e];h[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&p){const t=e,n=r;for(let e=0;e<u;++e)c[e]=e;return[t,[u,d],n,h,c]}{const t=m[l-1],o=n.util.getArrayFromDType(i,t*d),p=n.util.getArrayFromDType(s,t),f=new Array(l).fill(0);for(let t=0;t<u;++t){const n=e[t*d],i=f[n],s=(0===n?0:m[n-1])+i;f[n]++;for(let n=0;n<d;++n)o[s*d+n]=e[t*d+n];p[s]=r[t],c[t]=s}for(let e=0;e<l;++e){if(0===f[e]){const t=0===e?0:m[e-1];o[t*d+0]=e;for(let e=1;e<d;++e)o[t*d+e]=0;p[t]=a}}return[o,[t,d],p,h,c]}},sparseReshapeImpl:function(e,t,i,r,s){const o=n.util.sizeFromShape(r),a=t[0],u=s.length,l=[];let h=1,c=-1;for(let e=0;e<u;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(n.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(n.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,t));h*=t,l.push(t)}}if(-1!==c){if(h<=0)throw new Error(n.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(o/h);if(h*e!==o)throw new Error(n.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[c]=e}if(n.util.sizeFromShape(l)!==o)throw new Error(n.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(r,l));const d=r.length,p=[];if(d>0){p[d-1]=1;for(let e=d-2;e>=0;--e)p[e]=p[e+1]*r[e+1]}const f=[];if(u>0){f[u-1]=1;for(let e=u-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const m=n.util.getArrayFromDType(i,a*u);for(let t=0;t<a;++t){let n=0;for(let i=0;i<d;++i)n+=e[t*d+i]*p[i];for(let e=0;e<u;++e)m[t*u+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[a,u],l]},sparseSegmentReductionImpl:function(e,t,i,r,s,o=!1,a=0){const u=r.length,l=[t[0],e.length/t[0]],h=l[1],c=u>0?s[u-1]+1:0;if(c<0)throw new Error(n.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const d=t.slice();d[0]=c;const p=d.reduce((e,t)=>e*t,1),f=n.util.getArrayFromDType(i,p);if(0===u)return c>0&&f.fill(a),[f,d];if(c<=0)throw new Error(n.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,b=0,y=s[m];for(;;){let t=0;if(g<u){if(t=s[g],y===t){++g;continue}if(y>=t)throw new Error(n.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(n.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>b&&f.fill(a,b*h,y*h);for(let t=m;t<g;++t){const i=r[t];if(i<0||i>=l[0])throw new Error(n.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],l[0]));for(let t=0;t<h;t++)f[y*h+t]+=e[i*h+t]}if(o)for(let e=0;e<h;e++)f[y*h+e]/=g-m;if(m=g,++g,b=y+1,y=t,g>u)break}return b<c&&f.fill(a,b*h,c*h),[f,d]},sqrtImpl:di,squaredDifferenceImpl:pi,stridedSliceImpl:function(e,t,i,r){const s=n.buffer(e,t.dtype);for(let e=0;e<s.size;e++){const n=s.indexToLoc(e),o=new Array(n.length);for(let e=0;e<o.length;e++)o[e]=n[e]*i[e]+r[e];s.set(t.get(...o),...n)}return s},stringNGramsImpl:function(e,t,n,i,r,s,o,a){return new fi(n,i,r,s,o,a).compute(e,t)},stringSplitImpl:function(e,t,i){const r=e.length,s=[];let o=0,a=0;const u=new Array(r);for(let n=0;n<r;++n){const r=s.length;mi(e[n],t,i,s);const l=s.length-r;u[n]=l,o+=l,a=Math.max(a,l)}const l=n.util.getArrayFromDType("int32",2*o),h=new Array(o),c=[r,a];let d=0;for(let e=0;e<r;++e)for(let t=0;t<u[e];++t)l[2*d]=e,l[2*d+1]=t,h[d]=s[d],++d;return[l,h,c]},stringToHashBucketFastImpl:function(e,t){const i=n.util.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)i[r]=n.util.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return i},subImpl:gi,tileImpl:function(e,t){const i=new Array(e.rank);for(let n=0;n<i.length;n++)i[n]=e.shape[n]*t[n];const r=n.buffer(i,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),i=new Array(e.rank);for(let t=0;t<i.length;t++)i[t]=n[t]%e.shape[t];const s=e.locToIndex(i);r.values[t]=e.values[s]}return r},topKImpl:function(e,t,i,r,s){const o=t[t.length-1],[a,u]=[e.length/o,o],l=n.util.getTypedArrayFromDType(i,a*r),h=n.util.getTypedArrayFromDType("int32",a*r);for(let t=0;t<a;t++){const n=t*u,i=e.subarray(n,n+u);let o=new Array(i.length);i.forEach((e,t)=>o[t]={value:e,index:t}),r<o.length&&(yi(o,r),o=o.slice(0,r)),s&&o.sort(bi);const a=t*r,c=l.subarray(a,a+r),d=h.subarray(a,a+r);for(let e=0;e<r;e++)c[e]=o[e].value,d[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[n.buffer(c,i,l),n.buffer(c,"int32",h)]},transposeImpl:function(e,t,i,r,s){const o=t.length,a=n.util.sizeFromShape(t),u=n.util.computeStrides(t),l=n.util.computeStrides(s),h=n.util.getTypedArrayFromDType(i,n.util.sizeFromShape(s));for(let t=0;t<a;++t){const i=n.util.indexToLoc(t,o,u),s=new Array(i.length);for(let e=0;e<s.length;e++)s[e]=i[r[e]];h[n.util.locToIndex(s,o,l)]=e[t]}return h},uniqueImpl:function(e,t,i,r){const s=n.util.parseAxisParam(t,i)[0],o=[1,i[0],1];for(let e=0;e<s;e++)o[0]*=i[e];o[1]=i[s];for(let e=s+1;e<i.length;e++)o[2]*=i[e];const a={},u=new Int32Array(i[s]),l=new n.TensorBuffer(o,r,e),h=[],c=1===o[0]&&1===o[2];for(let t=0;t<i[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<o[0];n++)for(let i=0;i<o[2];i++)e.push(l.get(n,t,i));n=e.join(",")}if(void 0!==a[n])u[t]=a[n];else{const e=Object.keys(a).length;a[n]=e,u[t]=e,h.push(t)}}const d=o.slice();d[1]=Object.keys(a).length;const p=new n.TensorBuffer(d,r);h.forEach((e,t)=>{for(let n=0;n<o[0];n++)for(let i=0;i<o[2];i++)p.set(l.get(n,e,i),n,t,i)});const f=i.slice();return f[s]=d[1],{outputValues:p.values,outputShape:f,indices:u}}});const{addImpl:wi,castImpl:ki,ceilImpl:vi,concatImpl:Si,equalImpl:Ii,expImpl:Ci,expm1Impl:Ti,floorImpl:Ri,gatherNdImpl:Ai,gatherV2Impl:$i,greaterEqualImpl:Pi,greaterImpl:zi,lessEqualImpl:_i,lessImpl:Mi,logImpl:Ni,maxImpl:Fi,maximumImpl:Ei,minimumImpl:Oi,multiplyImpl:Bi,negImpl:Li,notEqualImpl:Di,prodImpl:Ui,rangeImpl:Wi,rsqrtImpl:Vi,scatterImpl:Gi,simpleAbsImpl:Hi,sliceImpl:qi,stridedSliceImpl:Ki,stringNGramsImpl:Xi,subImpl:ji,tileImpl:Yi,topKImpl:Qi,transposeImpl:Zi,uniqueImpl:Ji}=xi,er=Bn({opType:an.ABS,cpuKernelImpl:Hi}),tr={kernelName:n.Abs,backendName:"webgpu",kernelFunc:er},nr=Bn({opType:an.ACOS}),ir={kernelName:n.Acos,backendName:"webgpu",kernelFunc:nr},rr=Bn({opType:an.ACOSH}),sr={kernelName:n.Acosh,backendName:"webgpu",kernelFunc:rr},or=Ln({opType:Qt.ADD,cpuKernelImpl:wi,supportsComplex:!0}),ar={kernelName:n.Add,backendName:"webgpu",kernelFunc:or};class ur{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((e,t)=>"T"+t),this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){const e=[];this.variableNames.forEach(t=>{e.push(`let v${t} = get${t}ByOutputCoords(coords);`)});const t=this.variableNames.map(e=>"v"+e).join(" + ");return`\n      ${_t("index")} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${e.join("\n        ")}\n            setOutputAtIndex(flatIndex, ${t});\n          }\n        }\n      }\n    `}}const lr={kernelName:n.AddN,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i}=e,r=t;if(1===r.length)return Mn({inputs:{x:r[0]},backend:i});const s=r.map(e=>e.dtype).reduce((e,t)=>n.upcastType(e,t)),o=r.map(e=>e.shape),a=new ur(o);return i.runWebGPUProgram(a,r,s)}};class hr{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];this.outputShape=n,this.dispatchLayout={x:[0],y:[1]},this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){n.util.assert(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);const e=this.workgroupSize[0];return`\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;\n      ${_t()} {\n        var x = i32(workgroupId.x) * ${e} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${e} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${e} + i32(localId.x);\n        y = i32(workgroupId.x) * ${e} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `}}class cr{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[t[i]];this.outputShape=n,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey="transpose_"+t}getUserCode(){const e=Pt(this.outputShape.length),t=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=new Array(t);for(let t=0;t<e.length;t++)n[e[t]]="resRC."+zt(t);return n.join()}(this.newDim);return`\n      ${_t("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let resRC = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${e}(${t}), uniforms.aShape)]);\n          }\n        }\n      }\n    `}}function dr(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{perm:o}=r,a=i,u=s.shape.length,l=new Array(u);for(let e=0;e<l.length;e++)l[e]=s.shape[o[e]];if(i.shouldExecuteOnCPU([s])){const e=a.tensorMap.get(s.dataId).values,t=Zi(e,s.shape,s.dtype,o,l);return i.makeTensorInfo(l,s.dtype,t)}if(2===s.shape.length&&n.util.arraysEqual(o,[1,0])){const e=new hr(s.shape,o);return a.runWebGPUProgram(e,[s],s.dtype)}const h=new cr(s.shape,o);return a.runWebGPUProgram(h,[s],s.dtype)}const pr={kernelName:n.Transpose,backendName:"webgpu",kernelFunc:dr};class fr{constructor(e,t){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];const[i]=n.backend_util.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=0===i.length?[1]:i,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey="reduce_"+t}getUserCode(){let e="",t="0.0";const n=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e=`\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)\n           {  bestValue = candidate; }`,t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");const i="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${`\n         var<workgroup> xBestValues : array<f32, ${n}>;\n       `}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;\n          return offset;\n       }\n       ${_t("index")} {\n         let outputIndex = index / ${n};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${t};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${n}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${n}) {\n           let candidate = f32(x[offset + k]);\n           ${e}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${n}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${e}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${i}\n        }\n       }\n     `}}function mr(e,t,i,r,s){const o=e.shape.length,a=[],u=n.util.parseAxisParam(t,e.shape);let l=u;const h=n.backend_util.getAxesPermutation(l,o);let c=e;null!=h&&(c=dr({inputs:{x:e},attrs:{perm:h},backend:s}),l=n.backend_util.getInnerMostAxes(l.length,o),a.push(c)),n.backend_util.assertAxesAreInnerMostDims(r,l,o);const[d,p]=n.backend_util.computeOutAndReduceShapes(c.shape,l);let f,m=d;if(i&&(m=n.backend_util.expandShapeToKeepDim(d,u)),"max"!==r&&"prod"!==r||!s.shouldExecuteOnCPU([c])){const t=n.util.sizeFromShape(p),i={windowSize:t,inSize:t,batchSize:n.util.sizeFromShape(c.shape)/t,outSize:1},o="mean"===r?"float32":n.sumOutType(e.dtype),u=[{type:"int32",data:[t]}],l=new fr(i,r),h=s.runWebGPUProgram(l,[c],o,u);a.push(h),f=Rn({inputs:{x:h},attrs:{shape:m},backend:s})}else{const t=s.tensorMap.get(c.dataId).values;switch(r){case"max":const i=Fi(t,n.util.sizeFromShape(p),m,e.dtype);f=s.makeTensorInfo(m,e.dtype,i);break;case"prod":const{outVals:o,outShape:a,outDtype:u}=Ui(c.shape,c.dtype,t,l);f=s.makeTensorInfo(a,u,o);break;default:throw new Error(r+" CPU implementation is not yet supported.")}}return a.forEach(e=>s.disposeData(e.dataId)),f}const gr={kernelName:n.All,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{keepDims:s,axis:o}=i;return mr(r,o,s,"all",n)}};const br={kernelName:n.Any,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{keepDims:s,axis:o}=i;return mr(r,o,s,"any",n)}};class yr{constructor(e,t,i){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;const r=[t];this.op="min"===i?"<":">";const[s,o]=n.backend_util.computeOutAndReduceShapes(e,r);this.outputShape=0===s.length?[1]:s,this.dispatchLayout=Ht(this.outputShape),n.util.sizeFromShape(o)<32||n.util.sizeFromShape(s)>1e3?(this.type="plain",this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=Wt(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){const e=this.workgroupSize[0],t=()=>1===this.inputShape.length?"uniforms.xShape":"uniforms.xShape."+zt(this.inputShape.length-1),n=()=>{let e="";if(1===this.outputShape.length)1!==this.inputShape.length&&(e+="outputCoords,");else for(let t=0;t<this.outputShape.length;t++)e+=`outputCoords.${zt(t)},`;return e};if("shared"===this.type){return`\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${`\n      var<workgroup> xBestIndices : array<i32, ${e}>;\n      var<workgroup> xBestValues : array<f32, ${e}>;\n    `}\n\n      ${_t("index")} {\n        let outputIndex = index / ${e};\n        let reduceLength = ${t()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${e}) {\n          let candidate = getX(${n()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${e}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `}return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${n()} 0);\n          let reduceLength = ${t()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${n()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `}}const xr={kernelName:n.ArgMax,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{axis:o}=r;let a=n.util.parseAxisParam(o,s.shape);const u=n.backend_util.getAxesPermutation(a,s.shape.length);let l=s;const h=[];null!=u&&(l=dr({inputs:{x:s},backend:i,attrs:{perm:u}}),h.push(l),a=n.backend_util.getInnerMostAxes(a.length,l.shape.length)),n.backend_util.assertAxesAreInnerMostDims("argMax",[a[0]],l.shape.length);const c=new yr(l.shape,a[0],"max"),d=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],p=i.runWebGPUProgram(c,[l],"int32",d);return h.forEach(e=>i.disposeData(e.dataId)),p}};const wr={kernelName:n.ArgMin,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{axis:o}=r;let a=n.util.parseAxisParam(o,s.shape);const u=n.backend_util.getAxesPermutation(a,s.shape.length);let l=s;const h=[];null!=u&&(l=dr({inputs:{x:s},backend:i,attrs:{perm:u}}),h.push(l),a=n.backend_util.getInnerMostAxes(a.length,l.shape.length)),n.backend_util.assertAxesAreInnerMostDims("argMin",[a[0]],l.shape.length);const c=new yr(l.shape,a[0],"min"),d=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],p=i.runWebGPUProgram(c,[l],"int32",d);return h.forEach(e=>i.disposeData(e.dataId)),p}},kr=Bn({opType:an.ASIN}),vr={kernelName:n.Asin,backendName:"webgpu",kernelFunc:kr},Sr=Bn({opType:an.ASINH}),Ir={kernelName:n.Asinh,backendName:"webgpu",kernelFunc:Sr},Cr=Bn({opType:an.ATAN}),Tr={kernelName:n.Atan,backendName:"webgpu",kernelFunc:Cr},Rr=Ln({opType:Qt.ATAN2}),Ar={kernelName:n.Atan2,backendName:"webgpu",kernelFunc:Rr},$r=Bn({opType:an.ATANH}),Pr={kernelName:n.Atanh,backendName:"webgpu",kernelFunc:$r};class zr{constructor(e,t){this.variableNames=["x"],this.uniforms="stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="pool2D_"+t,this.poolType=t}getUserCode(){let e="resultValue = max(value, resultValue);";"avg"===this.poolType&&(e="resultValue = resultValue + value; count = count + 1.0;");let t="resultValue";"avg"===this.poolType&&(t="resultValue / max(count, 1.0)");return`\n      ${_t("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};\n          var count = 0.0;\n\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, coords[3]);\n              ${e}\n            }\n          }\n\n          setOutputAtIndex(index, ${t});\n        }\n      }\n    `}}class _r{constructor(e){this.variableNames=["x"],this.uniforms="stride : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.stride;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}function Mr(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{reductionIndices:s,keepDims:o}=i;return mr(r,s,o,"max",n)}const Nr={kernelName:n.Max,backendName:"webgpu",kernelFunc:Mr};function Fr(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{keepDims:s,axis:o}=i;return mr(r,o,s,"mean",n)}const Er={kernelName:n.Mean,backendName:"webgpu",kernelFunc:Fr};function Or(e,t,i,r){if(1===t.filterWidth&&1===t.filterHeight&&n.util.arraysEqual(t.inShape,t.outShape))return Mn({inputs:{x:e},backend:r});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&1===t.batchSize&&"VALID"===t.padInfo.type){const s=e.shape.length,o=Rn({inputs:{x:e},backend:r,attrs:{shape:[e.shape[s-3]*e.shape[s-2],e.shape[s-1]]}});let a;"avg"===i?a=Fr({inputs:{x:o},backend:r,attrs:{axis:0,keepDims:!1}}):(n.util.assert("max"===i,()=>"Invalid pool type "+i),a=Mr({inputs:{x:o},backend:r,attrs:{reductionIndices:0,keepDims:!1}}));const u=Rn({inputs:{x:a},backend:r,attrs:{shape:t.outShape}});return r.disposeData(o.dataId),r.disposeData(a.dataId),u}let s;const o=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return 1===t.filterHeight&&1===t.filterWidth?s=new _r(t):("avg"===i?s=new zr(t,"avg"):(n.util.assert("max"===i,()=>"Invalid pool type "+i),s=new zr(t,"max")),o.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),r.runWebGPUProgram(s,[e],e.dtype,o)}const Br={kernelName:n.AvgPool,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{filterSize:o,strides:a,pad:u,dimRoundingMode:l}=r;return Or(s,n.backend_util.computePool2DInfo(s.shape,o,a,1,u,l),"avg",i)}};class Lr{constructor(e){this.variableNames=["dy"],this.uniforms="stride : vec2<i32>, pads : vec2<i32>, dilation : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avg_pool2d_backprop"}getUserCode(){return`\n      ${_t("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilation[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.stride[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilation[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.stride[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const Dr={kernelName:n.AvgPoolGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{dy:s,input:o}=t,a=o;var u,l;u=[s,o],l="avgPoolGrad",Array.isArray(u)||(u=[u]),u.forEach(e=>{null!=e&&n.util.assert("complex64"!==e.dtype,()=>l+" does not support complex64 tensors in the WebGPU backend.")});const{filterSize:h,strides:c,pad:d}=r,p=n.backend_util.computePool2DInfo(a.shape,h,c,1,d),f=new Lr(p),m=1/(p.filterHeight*p.filterWidth),g=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]},{type:"int32",data:[p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"float32",data:[m]}];return i.runWebGPUProgram(f,[s],a.dtype,g)}};const Ur={kernelName:n.BatchMatMul,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{a:r,b:s}=t,{transposeA:o,transposeB:a}=i;return $n({a:r,b:s,transposeA:o,transposeB:a,backend:n})}};class Wr{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${Pt(e.length)}, `,this.shaderKey="slice"}getUserCode(){const e=Pt(this.rank),t=function(e){if(1===e)return"sourceLoc";if(e<=6)return Vr.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let n;n=1===this.start.length?this.outputShape.map((e,t)=>"sourceLoc = uniforms.start + coords;"):this.outputShape.map((e,t)=>`sourceLoc.${Vr[t]} = uniforms.start.${zt(t)} + coords.${Vr[t]};`);return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${e};\n          let coords = getCoordsFromIndex(index);\n          ${n.join("\n")}\n          setOutputAtIndex(index, getSource(${t}));\n        }\n      }\n    `}}const Vr=["x","y","z","w","u","v"];function Gr(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{begin:o,size:a}=r,[u,l]=n.slice_util.parseSliceParams(s,o,a);if(n.slice_util.assertParamsValid(s,u,l),i.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=i.tensorMap.get(s.dataId),t=qi(e.values,u,l,s.shape,s.dtype);return i.makeTensorInfo(l,s.dtype,t)}if(0===n.util.sizeFromShape(l))return i.makeTensorInfo(l,s.dtype,[]);const h=new Wr(u,l),c=[{type:"int32",data:u}];return i.runWebGPUProgram(h,[s],s.dtype,c)}const Hr={kernelName:n.Slice,backendName:"webgpu",kernelFunc:Gr},qr={kernelName:n.BatchToSpaceND,backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{blockShape:o,crops:a}=r;n.util.assert(s.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");const u=o.reduce((e,t)=>e*t),l=n.backend_util.getReshaped(s.shape,o,u),h=n.backend_util.getPermuted(l.length,o.length),c=n.backend_util.getReshapedPermuted(s.shape,o,u),d=n.backend_util.getSliceBeginCoords(a,o.length),p=n.backend_util.getSliceSize(c,a,o.length),f=[],m=Rn({inputs:{x:s},backend:i,attrs:{shape:l}}),g=dr({inputs:{x:m},backend:i,attrs:{perm:h}}),b=Rn({inputs:{x:g},backend:i,attrs:{shape:c}}),y=Gr({inputs:{x:b},backend:i,attrs:{begin:d,size:p}});return f.push(m),f.push(g),f.push(b),f.forEach(e=>i.disposeData(e.dataId)),y}},Kr=`\n  fn bincount_write(index: i32, value: f32) {\n    ${At("&result[index]","value","float32")}\n  }\n`;class Xr{constructor(e,t,n=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=n,n&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`\n    ${this.binaryOutput?"\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n":Kr}\n  ${_t("index")} {\n    ${1===this.rank?`if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};\n        bincount_write(indexVal, value);\n      }\n    }`:`let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `}}const jr={kernelName:n.Bincount,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,weights:o}=t,{size:a}=r,u=n.util.sizeFromShape(s.shape),l=n.util.sizeFromShape(o.shape)>0,h=[a],c=o.dtype,d=Cn({backend:i,attrs:{shape:h,value:0,dtype:c}}),p=new Xr([u],l),f=[{type:"int32",data:[a]}],m=l?[s,o]:[s];return i.runWebGPUProgram(p,m,c,f,d)}},Yr=Ln({opType:Qt.NOT_EQUAL,dtype:"bool",cpuKernelImpl:Di}),Qr={kernelName:n.NotEqual,backendName:"webgpu",kernelFunc:Yr};function Zr(e){const{inputs:t,backend:n}=e,{input:i}=t;return Mn({inputs:{x:n.tensorMap.get(i.dataId).complexTensorInfos.real},backend:n})}const Jr={kernelName:n.Real,backendName:"webgpu",kernelFunc:Zr};const es={kernelName:n.Cast,backendName:"webgpu",kernelFunc:function e(t){const{inputs:i,backend:r,attrs:s}=t,{x:o}=i,{dtype:a}=s;if("complex64"===a){if("complex64"===o.dtype)return Mn({inputs:{x:o},backend:r});const t=n.zeros(o.shape),i=e({inputs:{x:o},backend:r,attrs:{dtype:"float32"}}),s=Fn({inputs:{real:i,imag:t},backend:r});return t.dispose(),r.disposeData(i.dataId),s}if("complex64"===o.dtype){const t=Zr({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:a}});return r.disposeData(t.dataId),n}if(!n.util.hasEncodingLoss(o.dtype,a)){const e=Mn({inputs:{x:o},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:a}}if(r.shouldExecuteOnCPU([o])){const e=r.tensorMap.get(o.dataId).values,[t,n,i]=ki(e,o.shape,o.dtype,a);return r.makeTensorInfo(t,n,i)}if("int32"===a)return function(e,t){const n=new On(e.shape,an.TO_INT),i=t.runWebGPUProgram(n,[e],"int32");return{dataId:i.dataId,shape:i.shape,dtype:i.dtype}}(o,r);if("bool"===a){const e=r.makeTensorInfo([],"bool",n.util.getTypedArrayFromDType("bool",1)),t=Yr({inputs:{a:o,b:e},backend:r});return r.disposeData(e.dataId),t}throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${a}`)}},ts=Bn({opType:an.CEIL,cpuKernelImpl:vi}),ns={kernelName:n.Ceil,backendName:"webgpu",kernelFunc:ts};class is{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.isVec4=!0,this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`\n      ${_t("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `}}class rs{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`\n      ${_t("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `}}const ss={kernelName:n.ClipByValue,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{clipValueMin:o,clipValueMax:a}=r;let u;const l=[{type:"float32",data:[o]},{type:"float32",data:[a]}];return u=n.util.sizeFromShape(s.shape)%4==0?new is(s.shape):new rs(s.shape),i.runWebGPUProgram(u,[s],s.dtype,l)}};class os{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=n.backend_util.computeOutShape(e,1),this.variableNames=e.map((e,t)=>"T"+t),this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){const e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let t=1;t<this.offsetLength;t++)e.push(`else if (yC < uniforms.offset${[t]}){ setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${t-1})); }`);const t=this.offsetLength,n=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${n})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`\n      ${_t("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${e.join("\n        ")}\n          }\n        }\n      }\n    `}}function as(e){const{inputs:t,backend:n}=e,{input:i}=t;return Mn({inputs:{x:n.tensorMap.get(i.dataId).complexTensorInfos.imag},backend:n})}const us={kernelName:n.Imag,backendName:"webgpu",kernelFunc:as};function ls(e,t,i){const r=e[0].dtype;if("complex64"===r){const n=e.map(e=>Zr({inputs:{input:e},backend:i})),r=e.map(e=>as({inputs:{input:e},backend:i})),s=ls(n,t,i),o=ls(r,t,i),a=Fn({inputs:{real:s,imag:o},backend:i});return n.forEach(e=>i.disposeData(e.dataId)),r.forEach(e=>i.disposeData(e.dataId)),i.disposeData(s.dataId),i.disposeData(o.dataId),a}let s=i.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map(e=>{const r=n.util.sizeFromShape(e.shape.slice(t));return Rn({inputs:{x:e},backend:i,attrs:{shape:[-1,r]}})}),o=s.map(e=>({vals:i.readSync(e.dataId),shape:e.shape})),a=n.backend_util.computeOutShape(s.map(e=>e.shape),1),u=1===s[0].shape[0],l=Si(o,a,r,u),h=n.backend_util.computeOutShape(e.map(e=>e.shape),t),c=i.makeTensorInfo(h,r,l);return s.forEach(e=>i.disposeData(e.dataId)),c}const o=i.device.limits.maxStorageBuffersPerShaderStage-1;if(e.length>o){const n=[];for(let r=0;r<e.length;r+=o){const s=e.slice(r,r+o);n.push(ls(s,t,i))}const r=ls(n,t,i);for(const e of n)i.disposeData(e.dataId);return r}const{tensors2D:a,outShape:u}=function(e,t,i){const r=n.backend_util.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>Rn({inputs:{x:e},backend:i,attrs:{shape:[n.util.sizeFromShape(e.shape.slice(0,t)),n.util.sizeFromShape(e.shape.slice(t))]}})),outShape:r}}(e,t,i),l=a.map(e=>e.shape),h=new os(l),c=[],d=new Array(l.length-1);if(d.length>0){d[0]=l[0][1],c.push({type:"int32",data:[d[0]]});for(let e=1;e<d.length;e++)d[e]=d[e-1]+l[e][1],c.push({type:"int32",data:[d[e]]})}const p=i.runWebGPUProgram(h,a,a[0].dtype,c);a.forEach(e=>i.disposeData(e.dataId));const f=Rn({inputs:{x:p},backend:i,attrs:{shape:u}});return i.disposeData(p.dataId),f}function hs(e){const{inputs:t,backend:i,attrs:r}=e,{axis:s}=r,o=n.util.parseAxisParam(s,t[0].shape)[0],a=t.map(e=>e.shape);n.backend_util.assertParamsConsistent(a,o);const u=n.backend_util.computeOutShape(t.map(e=>e.shape),o);if(0===n.util.sizeFromShape(u))return i.makeTensorInfo(u,t[0].dtype,[]);const l=t.filter(e=>n.util.sizeFromShape(e.shape)>0);return 1===l.length?Mn({inputs:{x:l[0]},backend:i}):ls(l,o,i)}const cs={kernelName:n.Concat,backendName:"webgpu",kernelFunc:hs};class ds{constructor(e,t,n,i,r=!1,s=null,o=!1,a=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=Vt(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=Gt(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableTypes=["f32","vec4<f32>"]):(this.innerElementSize=4,this.variableTypes=["vec4<f32>","vec4<f32>"]),r&&(this.variableNames.push("bias"),this.variableTypes.push("vec4<f32>")),o&&(this.variableNames.push("preluActivationWeights"),this.variableTypes.push("vec4<f32>"))):(this.innerElementSize=this.elementsPerThread[0],r&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=a,this.addBias=r,this.activation=s,this.hasPreluActivationWeights=o,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=n%this.tileBOuter==0,this.fitInner=i%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){const e=this.isVec4?gn(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):yn(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`\n    ${function(e,t,n,i,r=!1,s=null,o=!1,a=4,u=4,l=4){const h=e?"\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      ",c=e?"\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ":"\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      ",d=e?"uniforms.xShape[1]":"uniforms.xShape[2]",p=e?"uniforms.xShape[2]":"uniforms.xShape[3]",f=e?"row":"col",m=e?"col":"row",g=`\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n      let outRow = ${f} / outWidth;\n      let outCol = ${f} % outWidth;\n\n      let WRow = ${m} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${m} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n      let xCh = ${m} % inChannels;\n      var resData = ${cn(a)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${d} && xCol >= 0 && xCol < ${p}) {\n        ${h}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(a)}\n      }\n      return resData;`,b=e?t&&i?`\n      let col = colIn * ${a};\n      ${g}`:`\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${g}\n      }\n      return ${cn(a)}(0.0);`:i&&n?`\n      let col = colIn * ${a};\n      ${g}`:`\n      let col = colIn * ${a};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${g}\n      }\n      return ${cn(a)}(0.0);`,y=""+(e=>{switch(e){case 1:return"return W[row * uniforms.wShape[3] + colIn];";case 4:return"return W[row * uniforms.wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u),x=cn(l),w=cn(e?a:u),k=cn(e?u:a);return`\n      ${dn(s,o,4===l,4)}\n      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${w} {\n        ${e?b:y}\n      }\n\n      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${k} {\n        ${e?y:b}\n      }\n\n      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${x}) {\n        let col = colIn * ${l};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n        ${c}\n        ${pn(r,s)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}\n    ${e}\n  `}}class ps{constructor(e,t=!1,n=null,i=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=n,this.hasPreluActivationWeights=i,t&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`\n       ${dn(this.activation,this.hasPreluActivationWeights,!1,4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${pn(this.addBias,this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${_t("index")} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}\n         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}\n         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * row - uniforms.pad[0];\n             let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * col - uniforms.pad[1];\n             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {\n               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `}}class fs{constructor(e,t){this.variableNames=["x"],this.uniforms="pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey="im2col_"+this.isChannelsLast}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?"coords[1]":"coords[2]",i=this.isChannelsLast?"coords[2]":"coords[1]",r=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`\n    ${_t("index")} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${n};\n        let col = ${i};\n        let offsetY = (row / uniforms.outWidth) * uniforms.stride[0] - uniforms.pad[0];\n        let xRow = offsetY + uniforms.dilation[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.stride[1] -\n              uniforms.pad[1];\n          let xCol = offsetX + uniforms.dilation[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {\n            value = ${r};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `}}function ms(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function gs({x:e,filter:t,convInfo:i,backend:r,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:u=null}){const l=null!=s,h=null!=o,c="channelsLast"===i.dataFormat,d=c&&i.filterHeight===i.inHeight&&i.filterWidth===i.inWidth&&"VALID"===i.padInfo.type,p=n.env().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!p&&(d||1===i.filterHeight&&1===i.filterWidth&&1===i.dilationHeight&&1===i.dilationWidth&&1===i.strideHeight&&1===i.strideWidth&&("SAME"===i.padInfo.type||"VALID"===i.padInfo.type)))return function({x:e,filter:t,convInfo:n,backend:i,bias:r=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:a=null}){const u="channelsLast"===n.dataFormat,l=!u,h=[];let c,d;if(u&&n.filterHeight===n.inHeight&&n.filterWidth===n.inWidth&&"VALID"===n.padInfo.type){const r=n.inHeight*n.inWidth*n.inChannels;c=Rn({inputs:{x:e},backend:i,attrs:{shape:[1,n.batchSize,r]}}),d=Rn({inputs:{x:t},backend:i,attrs:{shape:[1,r,n.outChannels]}})}else c=Rn({inputs:{x:e},backend:i,attrs:{shape:u?[n.batchSize,n.inHeight*n.inWidth,n.inChannels]:[n.batchSize,n.inChannels,n.inHeight*n.inWidth]}}),d=Rn({inputs:{x:t},backend:i,attrs:{shape:[1,n.inChannels,n.outChannels]}});if(h.push(c),h.push(d),null!=s){const e=ms(s.shape,u);null!=e&&(s=Rn({inputs:{x:s},backend:i,attrs:{shape:e}}),h.push(s))}if(null!=r){const e=ms(r.shape,u);null!=e&&(r=Rn({inputs:{x:r},backend:i,attrs:{shape:e}}),h.push(r))}const p=$n({a:u?c:d,b:u?d:c,transposeA:l,transposeB:!1,backend:i,bias:r,activation:a,preluActivationWeights:s,leakyreluAlpha:o}),f=Rn({inputs:{x:p},backend:i,attrs:{shape:n.outShape}});h.push(p);for(const e of h)i.disposeData(e.dataId);return f}({x:e,filter:t,convInfo:i,backend:r,bias:s,activation:u,preluActivationWeights:o,leakyreluAlpha:a});const f=n.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),m=f>0?f:r.thresholdToIncreaseWorkgroups,g=i.batchSize*Math.ceil(i.outHeight*i.outWidth/32)*Math.ceil(i.outChannels/32);if(n.env().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||g<=m)return function({x:e,filter:t,convInfo:n,backend:i,bias:r=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:a=null}){const{filterWidth:u,filterHeight:l,inChannels:h,strideWidth:c,strideHeight:d,padInfo:p,outWidth:f,outHeight:m,dilationWidth:g,dilationHeight:b,dataFormat:y}=n,x="channelsLast"===y,w=u*l*h,k=m*f,v=x?[n.batchSize,k,w]:[n.batchSize,w,k],S=new fs(v,x),I=[{type:"int32",data:[p.top,p.left]},{type:"int32",data:[d,c]},{type:"int32",data:[b,g]},{type:"int32",data:[f]},{type:"int32",data:[h*u]},{type:"int32",data:[h]}],C=i.runWebGPUProgram(S,[e],e.dtype,I),T=[];T.push(C);const R=Rn({inputs:{x:t},backend:i,attrs:{shape:[1,w,-1]}});if(T.push(R),null!=s){const e=ms(s.shape,x);null!=e&&(s=Rn({inputs:{x:s},backend:i,attrs:{shape:e}}),T.push(s))}if(null!=r){const e=ms(r.shape,x);null!=e&&(r=Rn({inputs:{x:r},backend:i,attrs:{shape:e}}),T.push(r))}const A=$n({a:x?C:R,b:x?R:C,transposeA:!x,transposeB:!1,backend:i,bias:r,activation:a,preluActivationWeights:s,leakyreluAlpha:o}),$=Rn({inputs:{x:A},backend:i,attrs:{shape:n.outShape}});T.push(A);for(const e of T)i.disposeData(e.dataId);return $}({x:e,filter:t,convInfo:i,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:a,activation:u});let b;const y=[i.padInfo.top,i.padInfo.left],x=[{type:"int32",data:[i.filterHeight,i.filterWidth]},{type:"int32",data:[...y]},{type:"int32",data:[i.strideHeight,i.strideWidth]},{type:"int32",data:[i.dilationHeight,i.dilationWidth]}];if(p)b=new ps(i,l,u,h);else{const e=c?i.outHeight*i.outWidth:i.outChannels,t=c?i.outChannels:i.outHeight*i.outWidth,n=i.filterHeight*i.filterWidth*i.inChannels;x.push({type:"int32",data:[e]},{type:"int32",data:[t]},{type:"int32",data:[n]});const s=r.adapterInfo.isIntel();b=new ds(i,e,t,n,l,u,h,s)}const w=[],k=[e,t];l&&(c||1!==s.shape.length||(s=Rn({inputs:{x:s},backend:r,attrs:{shape:[s.shape[0],1,1]}}),w.push(s)),k.push(s)),h&&(c||1!==o.shape.length||(o=Rn({inputs:{x:o},backend:r,attrs:{shape:[o.shape[0],1,1]}}),w.push(o)),k.push(o)),"leakyrelu"===u&&(x.push({type:"float32",data:[a]}),b.uniforms+=" alpha : f32,");const v=r.runWebGPUProgram(b,k,e.dtype,x);for(const e of w)r.disposeData(e.dataId);return v}const bs={kernelName:n.Conv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,attrs:i,backend:r}=e,{x:s,filter:o}=t,{strides:a,pad:u,dataFormat:l,dilations:h,dimRoundingMode:c}=i,d=n.backend_util.convertConv2DDataFormat(l);return gs({x:s,filter:o,convInfo:n.backend_util.computeConv2DInfo(s.shape,o.shape,a,h,u,c,!1,d),backend:r})}};class ys{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey="conv2DDerInput_"+this.isChannelsLast}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?3:1;return`\n    ${_t("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${n}];\n\n        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              if (${this.isChannelsLast}) {\n                let xValue = getDy(batch, idyR, idyC, d2);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              } else {\n                let xValue = getDy(batch, d2, idyR, idyC);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class xs{constructor(e){this.variableNames=["x","dy"],this.uniforms="pad : vec2<i32>, stride : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey="conv2DDerFilter_"+this.isChannelsLast}getUserCode(){return`\n    ${_t("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.stride[0] - uniforms.pad[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.stride[1] - uniforms.pad[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}const ws={kernelName:n.Conv2DBackpropFilter,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,dy:o}=t,{strides:a,pad:u,dataFormat:l,dimRoundingMode:h,filterShape:c}=r,d=n.backend_util.convertConv2DDataFormat(l),p=n.backend_util.computeConv2DInfo(s.shape,c,a,1,u,h,!1,d),f=new xs(p),m=[{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]}];return i.runWebGPUProgram(f,[s,o],s.dtype,m)}};class ks{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,n.util.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=Vt(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=Gt(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.variableTypes=["vec4<f32>","f32"]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){const e=this.isVec4?gn(this.elementsPerThread,this.workgroupSize):yn(this.elementsPerThread,this.workgroupSize);return`\n    ${function(e=4){const t=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${`\n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${cn(e)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${cn(e)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${e}];`}\n      }\n      return ${cn(e)}(0.0);`;return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${cn(e)} {\n    let col = colIn * ${e};\n    ${t}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${cn(e)} {\n    let col = colIn * ${e};\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${(e=>{switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(e)}\n    }\n    return ${cn(e)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${cn(e)}) {\n    let col = colIn * ${e};\n    if (row < uniforms.dimAOuter && (col + ${e-1}) < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${e}] = value;\n    }\n  }`}(this.isVec4?4:1)}\n    ${e}\n    `}}const vs={kernelName:n.Conv2DBackpropInput,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{dy:s,filter:o}=t,{inputShape:a,strides:u,pad:l,dataFormat:h,dimRoundingMode:c}=r,d=n.backend_util.convertConv2DDataFormat(h),p=n.backend_util.computeConv2DInfo(a,o.shape,u,1,l,c,!1,d),f=[{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.filterHeight-1-p.padInfo.top,p.filterWidth-1-p.padInfo.left]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.batchSize,p.outHeight,p.outWidth,p.outChannels]}];let m;if(n.env().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||p.filterHeight<=2&&p.filterWidth<=2&&p.outChannels<=16&&1===p.inChannels)m=new ys(p);else{m=new ks(p);const e=p.inHeight*p.inWidth,t=p.inChannels,n=p.filterHeight*p.filterWidth*p.outChannels;f.push({type:"uint32",data:[e]},{type:"uint32",data:[t]},{type:"uint32",data:[n]})}return i.runWebGPUProgram(m,[s,o],"float32",f)}},Ss=Bn({opType:an.COS}),Is={kernelName:n.Cos,backendName:"webgpu",kernelFunc:Ss},Cs=Bn({opType:an.COSH}),Ts={kernelName:n.Cosh,backendName:"webgpu",kernelFunc:Cs};class Rs{constructor(e,t,n,i){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;const[r]=t;this.outputShape=[r,n[0],n[1],e],this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId="bilinear"===i?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){const[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[n,i,r]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+e],[s,o,a]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+t];return`\n    ${_t("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${n});\n        let width_ratio = f32(${s});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${i};\n        let width_scale = ${o};\n        let in_y = ${r};\n        if( in_y < 0.0 || in_y > ${e} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${a};\n        if( in_x < 0.0 || in_x > ${t} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `}}const As={kernelName:n.CropAndResize,backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n,attrs:i}=e,{image:r,boxes:s,boxInd:o}=t,{cropSize:a,method:u,extrapolationValue:l}=i,h=new Rs(r.shape[3],s.shape,a,u),c=[{type:"float32",data:[l]}];return n.runWebGPUProgram(h,[r,s,o],"float32",c)}};var $s;!function(e){e.Prod="*",e.Sum="+"}($s||($s={}));class Ps{constructor(e,t,n,i){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=n,this.reverse=i,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){const e=this.outputShape.length,t=this.op===$s.Prod?"1.0":"0.0",n=this.exclusive?t:`getX(${zs(e,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let r="",s="";return this.exclusive?(r=this.reverse?"end != "+(i-1):"end != 0",s=this.reverse?"end + 1":"end - 1"):(r=this.reverse?"end + pow2 < "+i:"end >= pow2",s=this.reverse?"end + pow2":"end - pow2"),`\n      ${_t("index")} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${_s(e,"coords",this.op)};\n         var val = ${n};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${r}) {\n           let idx = ${s};\n           ${_s(e,"coords",this.op)} = idx;\n           val ${this.op}= getX(${zs(e,"coords",this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `}}function zs(e,t,n){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function _s(e,t,n){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Ms(e,t,i,r,s,o){const a=t.shape.length,u=n.backend_util.getAxesPermutation([r],a);let l=t;null!=u&&(l=dr({inputs:{x:t},backend:i,attrs:{perm:u}}));const h=n.backend_util.getInnerMostAxes(1,a)[0];if(h!==a-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=`+r);const c=l.shape[h];let d=Mn({inputs:{x:l},backend:i});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const n=new Ps(e,l.shape,!1,o),r=d,s=[{type:"float32",data:[t]}];d=i.runWebGPUProgram(n,[d],d.dtype,s),i.disposeData(r.dataId)}if(s){const t=new Ps(e,l.shape,s,o),n=d,r=[{type:"float32",data:[0]}];d=i.runWebGPUProgram(t,[d],d.dtype,r),i.disposeData(n.dataId)}if(null!=u){const e=dr({inputs:{x:d},backend:i,attrs:{perm:n.backend_util.getUndoAxesPermutation(u)}});return i.disposeData(d.dataId),i.disposeData(l.dataId),e}return d}const Ns={kernelName:n.Cumprod,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{axis:s,exclusive:o,reverse:a}=i;return Ms($s.Prod,r,n,s,o,a)}};const Fs={kernelName:n.Cumsum,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{axis:s,exclusive:o,reverse:a}=i;return Ms($s.Sum,r,n,s,o,a)}};const Es={kernelName:n.DenseBincount,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,weights:o}=t,{size:a,binaryOutput:u}=r,l=1===s.shape.length,h=n.util.sizeFromShape(o.shape)>0,c=o.dtype,d=l?[s.shape[0]]:[s.shape[0],s.shape[1]],p=Cn({backend:i,attrs:{shape:l?[a]:[s.shape[0],a],value:0,dtype:c}}),f=new Xr(d,h,u),m=[{type:"int32",data:[a]}],g=h?[s,o]:[s];return i.runWebGPUProgram(f,g,c,m,p)}};class Os{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthToSpace_"+t,this.dataFormat=t}getUserCode(){return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Bs={kernelName:n.DepthToSpace,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{blockSize:s,dataFormat:o}=i,a=r.shape[0],u=("NHWC"===o?r.shape[1]:r.shape[2])*s,l=("NHWC"===o?r.shape[2]:r.shape[3])*s,h=("NHWC"===o?r.shape[3]:r.shape[1])/(s*s),c=[{type:"int32",data:[s]}],d=new Os("NHWC"===o?[a,u,l,h]:[a,h,u,l],o);return n.runWebGPUProgram(d,[r],r.dtype,c)}};class Ls{constructor(e,t,n,i=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),i&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.addBias=i,this.activation=r,this.hasPreluActivation=s,this.filterHeight=t,this.filterWidth=n,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){const e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],n=this.workgroupSize[1]+this.filterHeight-1,i=this.workgroupSize[0]+this.filterWidth-1;return`\n      ${dn(this.activation,this.hasPreluActivation,!1,4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${i}>, ${n}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${_t()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${i}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${pn(this.addBias,this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}class Ds{constructor(e,t=!1,i=null,r=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[4,4,4],this.workPerThread=4,this.isVec4=!0,this.outputShape=e.outShape,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1]),n.util.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=i,this.hasPreluActivation=r,this.shaderKey=`depthwiseVec4_${i}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){const e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,n=this.convInfo.strideWidth;return`\n      ${dn(this.activation,this.hasPreluActivation,!0,4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${_t()} {\n        let batch = i32(globalId.z) / uniforms.outShape[1];\n        let r = i32(globalId.z) % uniforms.outShape[1];\n        let c = i32(globalId.y) * ${this.workPerThread};\n        let d1 = i32(globalId.x) * 4;\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${n}) - uniforms.pad;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${e}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${e}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${n} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${pn(this.addBias,this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `}}class Us{constructor(e,t=!1,n=null,i=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=i,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`\n      ${dn(this.activation,this.hasPreluActivation,!1,4)}\n\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.stride - uniforms.pad;\n          let d2 = coords[${this.isChannelsLast?3:1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilation[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilation[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilation[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilation[1];\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilation[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilation[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${pn(this.addBias,this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}const Ws={kernelName:n.DepthwiseConv2dNative,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,filter:o}=t,{strides:a,pad:u,dataFormat:l,dilations:h,dimRoundingMode:c}=r,d=n.backend_util.convertConv2DDataFormat(l);let p=h;null==p&&(p=[1,1]);const f=n.backend_util.computeConv2DInfo(s.shape,o.shape,a,p,u,c,!0,d),m=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],g="channelsLast"===f.dataFormat;let b;return!g&&f.inHeight>16&&f.inWidth>16&&1===f.strideHeight&&1===f.strideWidth&&1===f.dilationWidth&&1===f.dilationHeight&&f.inChannels===f.outChannels?b=new Ls(f.outShape,f.filterHeight,f.filterWidth):g&&f.outHeight>4&&f.outWidth>4&&f.strideWidth<=2&&f.inChannels===f.outChannels&&1===f.dilationHeight&&1===f.dilationWidth&&f.inChannels%4==0?b=new Ds(f):(b=new Us(f),m.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),i.runWebGPUProgram(b,[s,o],s.dtype,m)}};class Vs{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}const Gs={kernelName:n.Diag,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i}=e,{x:r}=t,s=[...r.shape,...r.shape],o=n.util.sizeFromShape(r.shape),a=Rn({inputs:{x:r},backend:i,attrs:{shape:[o]}}),u=new Vs(o),l=i.runWebGPUProgram(u,[a],a.dtype),h=Rn({inputs:{x:l},backend:i,attrs:{shape:s}});return i.disposeData(a.dataId),i.disposeData(l.dataId),h}};class Hs{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`\n       ${_t("index")} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.stride - uniforms.pad;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilation[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilation[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `}}const qs={kernelName:n.Dilation2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,filter:o}=t,{strides:a,pad:u,dilations:l}=r,h=n.backend_util.computeDilation2DInfo(s.shape,o.shape,a,u,"NHWC",l),c=[h.padInfo.top,h.padInfo.left],d=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[...c]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]}],p=new Hs(h);return i.runWebGPUProgram(p,[s,o],s.dtype,d)}},Ks=Ln({opType:Qt.MUL,cpuKernelImpl:Bi,supportsComplex:!0}),Xs={kernelName:n.Multiply,backendName:"webgpu",kernelFunc:Ks};function js(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{axis:s,keepDims:o}=i;return mr(r,s,o,"sum",n)}const Ys={kernelName:n.Sum,backendName:"webgpu",kernelFunc:js};const Qs={kernelName:n.Einsum,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{equation:s}=r,o=t,{allDims:a,summedDims:u,idDims:l}=n.backend_util.decodeEinsumEquation(s,o.length);n.backend_util.checkEinsumDimSizes(a.length,l,o);const{path:h,steps:c}=n.backend_util.getEinsumComputePath(u,l),d=c.length;let p=null,f=a.length;const m=[];for(let e=0;e<d;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=n.backend_util.getEinsumPermutation(f,l[t]);let s;n.backend_util.isIdentityPermutation(e)?s=o[t]:(s=dr({inputs:{x:o[t]},backend:i,attrs:{perm:e}}),m.push(s));const a=s.shape.slice();for(let e=0;e<r.length;++e)a.splice(r[e],0,1);n.util.arraysEqual(s.shape,a)||(s=Rn({inputs:{x:s},backend:i,attrs:{shape:a}}),m.push(s)),null===p?p=s:(p=Ks({inputs:{a:s,b:p},backend:i}),m.push(p))}e<d-1&&(h[e]>=0&&(p=js({inputs:{x:p},backend:i,attrs:{axis:h[e]-(a.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&i.disposeData(e.dataId);return p}},Zs=Bn({opType:an.ELU}),Js={kernelName:n.Elu,backendName:"webgpu",kernelFunc:Zs},eo=Ln({opType:Qt.EQUAL,dtype:"bool",cpuKernelImpl:Ii}),to={kernelName:n.Equal,backendName:"webgpu",kernelFunc:eo},no=Bn({opType:an.ERF}),io={kernelName:n.Erf,backendName:"webgpu",kernelFunc:no},ro=Bn({opType:an.EXP,cpuKernelImpl:Ci,dtype:"float32"}),so={kernelName:n.Exp,backendName:"webgpu",kernelFunc:ro};function oo(e){const{inputs:t,attrs:i,backend:r}=e,{dim:s}=i,{input:o}=t,a=o.shape.length,u=o.shape.slice();let l=s;return s<0&&(n.util.assert(-(a+1)<=s,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+s+1),u.splice(l,0,1),Rn({inputs:{x:o},backend:r,attrs:{shape:u}})}const ao={kernelName:n.ExpandDims,backendName:"webgpu",kernelFunc:oo},uo=Bn({opType:an.EXPM1,cpuKernelImpl:Ti}),lo={kernelName:n.Expm1,backendName:"webgpu",kernelFunc:uo};class ho{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey="fft_"+e}getUserCode(){return`\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${"real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${_t("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `}}function co(e,t,i){const r=i.tensorMap.get(e.dataId),s=n.util.sizeFromShape(e.shape),o=e.shape[e.shape.length-1],a=[],u=Rn({inputs:{x:e},backend:i,attrs:{shape:[s/o,o]}});a.push(u);const l=u.shape,h=new ho("real",l),c=new ho("imag",l),d=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:l},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:l}],p=[{type:"float32",data:[t?2*Math.PI:-2*Math.PI]},{type:"float32",data:[t?l[1]:1]}],f=i.runWebGPUProgram(h,d,"float32",p);a.push(f);const m=i.runWebGPUProgram(c,d,"float32",p);a.push(m);const g=Fn({inputs:{real:f,imag:m},backend:i});a.push(g);const b=Rn({inputs:{x:g},backend:i,attrs:{shape:e.shape}});return a.forEach(e=>i.disposeData(e.dataId)),b}const po={kernelName:n.FFT,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:i}=t;return co(i,!1,n)}};class fo{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `}}const mo={kernelName:n.FlipLeftRight,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,i=t,r=new fo(n.shape);return i.runWebGPUProgram(r,[n],n.dtype)}},go=Bn({opType:an.FLOOR,cpuKernelImpl:Ri}),bo={kernelName:n.Floor,backendName:"webgpu",kernelFunc:go},yo=Ln({opType:Qt.INT_DIV,dtype:"int32"}),xo={kernelName:n.FloorDiv,backendName:"webgpu",kernelFunc:yo};class wo{constructor(e,t,n=!1){this.isFromPixels=!0,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=n,this.shaderKey="fromPixels_"+this.importVideo}getUserCode(){const e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`\n      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};\n      ${_t("index")} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${e};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `}}const ko={kernelName:n.FromPixels,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e;let{pixels:s}=t;const{numChannels:o}=r;if(null==s)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");const a="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,l="undefined"!=typeof HTMLCanvasElement&&s instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&s instanceof OffscreenCanvas,h="undefined"!=typeof ImageBitmap&&s instanceof ImageBitmap,[c,d]=a?[s.videoWidth,s.videoHeight]:[s.width,s.height],p=[d,c,o],f=a||u;if(h||l||f){let e;{if(f){const e=n.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=vo&&e===So||(So=e,vo=document.createElement("canvas").getContext("2d",{willReadFrequently:So})),vo.canvas.width=c,vo.canvas.height=d,vo.drawImage(s,0,0,c,d),s=vo.canvas}const t=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,r="rgba8unorm",o=i.textureManager.acquireTexture(p[1],p[0],r,t);i.queue.copyExternalImageToTexture({source:s},{texture:o},[p[1],p[0]]),e={width:c,height:d,format:r,usage:t,texture:o}}const t=n.util.sizeFromShape(p),r=n.util.computeStrides(p),a=new wo(p,o,!1),u=[{type:"uint32",data:[t]},{type:"uint32",data:[o]},{type:"uint32",data:[...r]}],l=i.makeTensorInfo([d,c],"int32");i.tensorMap.get(l.dataId).resourceInfo=e;const h=i.runWebGPUProgram(a,[l],"int32",u);return i.disposeData(l.dataId),h}const m=s.data;let g=m;if(null!=o&&4!==o){g=new Uint8Array(s.width*s.height*o);const e=m.length;let t=0;for(let n=0;n<e;n++)n%4<o&&(g[t++]=m[n])}const b=i.makeTensorInfo(p,"int32",new Int32Array(g));return i.uploadToGPU(b.dataId),b}};let vo,So=n.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class Io{constructor(e,t,i,r,s){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],n.backend_util.assertAndGetBroadcastShape(e,t),n.backend_util.assertAndGetBroadcastShape(e,i),this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=r&&(n.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset")),null!=s&&(n.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale")),this.offsetShape=r,this.scaleShape=s,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");let t="1.0";null!=this.scaleShape&&(t="getScaleByOutputIndex(index)");return`\n      ${_t("index")} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${e};\n          let scaleValue = ${t};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `}}const Co={kernelName:n.FusedBatchNorm,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:i,scale:r,offset:s,mean:o,variance:a}=e,{varianceEpsilon:u}=t,l=n,h=[i,o,a];let c=null;null!=s&&(c=s.shape,h.push(s));let d=null;null!=r&&(d=r.shape,h.push(r));const p=new Io(i.shape,o.shape,a.shape,c,d),f=[{type:"float32",data:[u]}];return l.runWebGPUProgram(p,h,i.dtype,f)}};const To={kernelName:n.FusedConv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,filter:o,bias:a,preluActivationWeights:u}=t,{strides:l,pad:h,dataFormat:c,dilations:d,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=r,g=n.backend_util.convertConv2DDataFormat(c);return gs({x:s,filter:o,convInfo:n.backend_util.computeConv2DInfo(s.shape,o.shape,l,d,h,p,!1,g),backend:i,bias:a,preluActivationWeights:u,leakyreluAlpha:m,activation:f})}};const Ro={kernelName:n.FusedDepthwiseConv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,filter:o,bias:a,preluActivationWeights:u}=t,{strides:l,pad:h,dilations:c,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r;let m=c;null==m&&(m=[1,1]),n.util.assert(n.backend_util.eitherStridesOrDilationsAreOne(l,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);const g=n.backend_util.computeConv2DInfo(s.shape,o.shape,l,m,h,d,!0),b=[s,o],y=null!=a,x=null!=u;y&&b.push(a),x&&b.push(u);const w=[{type:"int32",data:[g.padInfo.top,g.padInfo.left]},{type:"int32",data:[g.inHeight,g.inWidth]}];let k;return g.outHeight>4&&g.outWidth>4&&g.strideWidth<=2&&g.inChannels===g.outChannels&&1===g.dilationHeight&&1===g.dilationWidth&&g.inChannels%4==0?k=new Ds(g,y,p,x):(k=new Us(g,y,p,x),w.push({type:"int32",data:[g.filterHeight]},{type:"int32",data:[g.filterWidth]},{type:"int32",data:[g.strideHeight,g.strideWidth]},{type:"int32",data:[g.dilationHeight,g.dilationWidth]})),"leakyrelu"===p&&(w.push({type:"float32",data:[f]}),k.uniforms+=" alpha : f32,"),i.runWebGPUProgram(k,b,"float32",w)}};class Ao{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gathernd_"+e,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${Pt(e)},`}getUserCode(){let e;e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides";return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${e};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `}}const $o={kernelName:n.GatherNd,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i}=e,{params:r,indices:s}=t,o=s.shape,a=o[o.length-1],u=n.util.sizeFromShape(r.shape),[l,h,c,d]=n.backend_util.prepareAndValidate(r,s),p=Rn({inputs:{x:s},backend:i,attrs:{shape:[h,a]}}),f=Rn({inputs:{x:r},backend:i,attrs:{shape:[n.util.sizeFromShape(r.shape)/c,c]}});if(i.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=i.readSync(s.dataId),t=i.bufferSync(r),n=Ai(e,t,r.dtype,h,a,c,d,r.shape,u);return i.makeTensorInfo(l,r.dtype,n.values)}const m=new Ao(a,[h,c]),g=[{type:"int32",data:[a]},{type:"int32",data:d}],b=i.runWebGPUProgram(m,[f,p],f.dtype,g),y=Rn({inputs:{x:b},backend:i,attrs:{shape:l}});return i.disposeData(p.dataId),i.disposeData(f.dataId),i.disposeData(b.dataId),y}};class Po{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){const e=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let i=0;i<e.length;i++)2===i?n.push("indexZ"):n.push(""+t[i]);return n.join()}(this.aShape);return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${e}));\n        }\n      }\n    `}}function zo(e){const{inputs:t,backend:i,attrs:r}=e,{x:s,indices:o}=t,{axis:a,batchDims:u}=r,l=n.util.parseAxisParam(a,s.shape)[0],h=n.backend_util.segment_util.collectGatherOpShapeInfo(s,o,l,u),c=n.util.sizeFromShape(o.shape),d=[],p=Rn({inputs:{x:s},backend:i,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),f=Rn({inputs:{x:o},backend:i,attrs:{shape:[h.batchSize,c/h.batchSize]}});d.push(p),d.push(f);const m=[h.batchSize,h.outerSize,c/h.batchSize,h.sliceSize];if(i.shouldExecuteOnCPU([s,o])){const e=i.tensorMap.get(f.dataId).values,t=n.buffer(f.shape,f.dtype,e),r=i.tensorMap.get(p.dataId).values,s=n.buffer(p.shape,p.dtype,r),o=$i(s,t,m);return d.forEach(e=>i.disposeData(e.dataId)),i.makeTensorInfo(h.outputShape,o.dtype,o.values)}const g=new Po(p.shape,m),b=i.runWebGPUProgram(g,[p,f],p.dtype);d.push(b);const y=Rn({inputs:{x:b},backend:i,attrs:{shape:h.outputShape}});return d.forEach(e=>i.disposeData(e.dataId)),y}const _o={kernelName:n.GatherV2,backendName:"webgpu",kernelFunc:zo},Mo=Ln({opType:Qt.GREATER,cpuKernelImpl:zi,dtype:"bool"}),No={kernelName:n.Greater,backendName:"webgpu",kernelFunc:Mo},Fo=Ln({opType:Qt.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:Pi}),Eo={kernelName:n.GreaterEqual,backendName:"webgpu",kernelFunc:Fo};const Oo={kernelName:n.IFFT,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:i}=t;return co(i,!0,n)}},Bo=Bn({opType:an.IS_FINITE,dtype:"bool"}),Lo={kernelName:n.IsFinite,backendName:"webgpu",kernelFunc:Bo},Do=Bn({opType:an.IS_INF,dtype:"bool"}),Uo={kernelName:n.IsInf,backendName:"webgpu",kernelFunc:Do},Wo=Bn({opType:an.IS_NAN,dtype:"bool"}),Vo={kernelName:n.IsNan,backendName:"webgpu",kernelFunc:Wo};const Go={kernelName:n.LeakyRelu,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{alpha:s}=i,o=[{type:"float32",data:[s]}],a=new On(r.shape,an.LEAKYRELU,"alpha : f32,");return n.runWebGPUProgram(a,[r],"float32",o)}},Ho=Ln({opType:Qt.LESS,dtype:"bool",cpuKernelImpl:Mi}),qo={kernelName:n.Less,backendName:"webgpu",kernelFunc:Ho},Ko=Ln({opType:Qt.LESS_EQUAL,dtype:"bool",cpuKernelImpl:_i}),Xo={kernelName:n.LessEqual,backendName:"webgpu",kernelFunc:Ko};class jo{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `}}const Yo={kernelName:n.LinSpace,backendName:"webgpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:i,stop:r,num:s}=n,o=(r-i)/(s-1),a=new jo(s),u=[{type:"float32",data:[i]},{type:"float32",data:[o]}];return t.runWebGPUProgram(a,[],"float32",u)}},Qo=Bn({opType:an.LOG,cpuKernelImpl:Ni}),Zo={kernelName:n.Log,backendName:"webgpu",kernelFunc:Qo},Jo=Bn({opType:an.LOG1P}),ea={kernelName:n.Log1p,backendName:"webgpu",kernelFunc:Jo},ta=Ln({opType:Qt.LOGICAL_AND,dtype:"bool"}),na={kernelName:n.LogicalAnd,backendName:"webgpu",kernelFunc:ta},ia=Bn({opType:an.LOGICAL_NOT}),ra={kernelName:n.LogicalNot,backendName:"webgpu",kernelFunc:ia},sa=Ln({opType:Qt.LOGICAL_OR}),oa={kernelName:n.LogicalOr,backendName:"webgpu",kernelFunc:sa},aa="\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n";class ua{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`\n    ${_t("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${aa}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `}}class la{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,n.util.assert(t<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=Wt(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${_t()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${aa}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `}}const ha={kernelName:n.LRN,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{depthRadius:s,bias:o,alpha:a,beta:u}=i;let l;l=s>16?new ua(r.shape):new la(r.shape,s);const h=[{type:"int32",data:[s]},{type:"float32",data:[o]},{type:"float32",data:[a]},{type:"float32",data:[u]}];return n.runWebGPUProgram(l,[r],r.dtype,h)}},ca=Ln({opType:Qt.MAX,cpuKernelImpl:Ei}),da={kernelName:n.Maximum,backendName:"webgpu",kernelFunc:ca};const pa={kernelName:n.MaxPool,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{filterSize:o,strides:a,pad:u,dimRoundingMode:l}=r;return Or(s,n.backend_util.computePool2DInfo(s.shape,o,a,1,u,l),"max",i)}};const fa={kernelName:n.Min,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{axis:s,keepDims:o}=i;return mr(r,s,o,"min",n)}},ma=Ln({opType:Qt.MIN,cpuKernelImpl:Oi}),ga={kernelName:n.Minimum,backendName:"webgpu",kernelFunc:ma};class ba{constructor(e,t,n){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]),this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.offset="reflect"===n?0:1,this.shaderKey="mirrorPad_"+n}getUserCode(){const e=this.xShape.length,t=this.xShape.map((e,t)=>`uniforms.pad${t}[0]`).join(","),n=this.xShape.map((t,n)=>`uniforms.pad${n}[0] + uniforms.xShape${e>1?`[${n}]`:""}`).join(","),i=1===e?"start":"start[i]",r=1===e?"end":"end[i]",s=1===e?"outC":"outC[i]",o=Pt(e),a=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let start = ${o}(${t});\n          let end = ${o}(${n});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${e}; i = i + 1) {\n            if (${s} < ${i}) {\n              ${s} = ${i} * 2 - ${s} - ${this.offset};\n            } else if(${s} >= ${r}) {\n              ${s} = (${r} - 1) * 2 - ${s} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${a}));\n        }\n      }\n    `}}const ya={kernelName:n.MirrorPad,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:i}=e,{paddings:r,mode:s}=t,o=n,a=r.map(e=>({type:"int32",data:[e[0],e[1]]})),u=new ba(i.shape,r,s);return o.runWebGPUProgram(u,[i],i.dtype,a)}},xa=Ln({opType:Qt.MOD}),wa={kernelName:n.Mod,backendName:"webgpu",kernelFunc:xa};const ka={kernelName:n.Neg,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:i}=t;if(n.shouldExecuteOnCPU([i])){const e=n.tensorMap.get(i.dataId),[t,r]=Li(e.values,i.shape,i.dtype);return n.makeTensorInfo(r,i.dtype,t)}const r=new On(i.shape,an.NEG);return n.runWebGPUProgram(r,[i],i.dtype)}};const va={kernelName:n.NonMaxSuppressionV3,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:i,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:a,iouThreshold:u,scoreThreshold:l}=r,h=i.readSync(s.dataId),c=i.readSync(o.dataId),{selectedIndices:d}=n.kernel_impls.nonMaxSuppressionV3Impl(h,c,a,u,l);return i.makeTensorInfo([d.length],"int32",new Int32Array(d))}};const Sa={kernelName:n.NonMaxSuppressionV5,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:i,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:a,iouThreshold:u,scoreThreshold:l,softNmsSigma:h}=r,c=i.readSync(s.dataId),d=i.readSync(o.dataId),p=a,f=u,m=l,g=h,{selectedIndices:b,selectedScores:y}=n.kernel_impls.nonMaxSuppressionV5Impl(c,d,p,f,m,g);return[i.makeTensorInfo([b.length],"int32",new Int32Array(b)),i.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class Ia{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`\n      ${_t("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `}}const Ca={kernelName:n.OneHot,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{indices:s}=t,{dtype:o,depth:a,onValue:u,offValue:l}=r,h=n.util.sizeFromShape(s.shape),c=new Ia(h,a),d=Rn({inputs:{x:s},backend:i,attrs:{shape:[h]}}),p=[{type:"float32",data:[u]},{type:"float32",data:[l]}],f=i.runWebGPUProgram(c,[d],o,p);i.disposeData(d.dataId);const m=Rn({inputs:{x:f},backend:i,attrs:{shape:[...s.shape,a]}});return i.disposeData(f.dataId),m}};function Ta(e){const{inputs:t,backend:n}=e,{x:i}=t;if("complex64"===i.dtype){const e=Zr({inputs:{input:i},backend:n}),t=Ta({inputs:{x:e},backend:n}),r=as({inputs:{input:i},backend:n}),s=Ta({inputs:{x:r},backend:n}),o=Fn({inputs:{real:t,imag:s},backend:n});return n.disposeData(e.dataId),n.disposeData(t.dataId),n.disposeData(r.dataId),n.disposeData(s.dataId),o}return Cn({attrs:{shape:i.shape,dtype:i.dtype,value:"string"===i.dtype?"":0},backend:n})}const Ra={kernelName:n.ZerosLike,backendName:"webgpu",kernelFunc:Ta};const Aa={kernelName:n.OnesLike,backendName:"webgpu",kernelFunc:function e(t){const{inputs:n,backend:i}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=Zr({inputs:{input:r},backend:i}),n=e({inputs:{x:t},backend:i}),s=as({inputs:{input:r},backend:i}),o=Ta({inputs:{x:s},backend:i}),a=Fn({inputs:{real:n,imag:o},backend:i});return i.disposeData(t.dataId),i.disposeData(n.dataId),i.disposeData(s.dataId),i.disposeData(o.dataId),a}return Cn({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:i})}};const $a={kernelName:n.Pack,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{axis:s}=r;if(1===t.length)return oo({inputs:{input:t[0]},backend:i,attrs:{dim:s}});const o=t[0].shape,a=t[0].dtype;t.forEach(e=>{n.util.assertShapesMatch(o,e.shape,"All tensors passed to stack must have matching shapes"),n.util.assert(a===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const u=[],l=hs({inputs:t.map(e=>{const t=oo({inputs:{input:e},backend:i,attrs:{dim:s}});return u.push(t),t}),backend:i,attrs:{axis:s}});return u.forEach(e=>i.disposeData(e.dataId)),l}};class Pa{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]),this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.xShape=e,this.shaderKey="pad"}getUserCode(){const e=this.xShape.length,t=Pt(e),n=this.xShape.map((e,t)=>`uniforms.pad${t}[0]`).join(","),i=this.xShape.map((t,n)=>`uniforms.pad${n}[0] + uniforms.xShape${e>1?`[${n}]`:""}`).join(","),r=e>1?`${t}(${n})`:""+n,s=e>1?`${t}(${i})`:""+i,o=e>1?"any(outC < start)":"outC < start",a=e>1?"any(outC >= end)":"outC >= end",u=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let start = ${r};\n          let end = ${s};\n          let outC = getCoordsFromIndex(index);\n\n          if (${o} || ${a}) {\n            setOutputAtIndex(index, uniforms.constantValue);\n          } else {\n            let coords = outC - start;\n            setOutputAtIndex(index, getX(${u}));\n          }\n        }\n      }\n    `}}const za=e=>{const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{paddings:o,constantValue:a}=r;if(o.every(e=>n.util.arraysEqual(e,[0,0])))return Mn({inputs:{x:s},backend:i});if(0===n.util.sizeFromShape(s.shape)){return Cn({backend:i,attrs:{shape:o.map((e,t)=>e[0]+s.shape[t]+e[1]),value:a,dtype:s.dtype}})}const u=[{type:"float32",data:[a]}];o.map(e=>u.push({type:"int32",data:[e[0],e[1]]}));const l=new Pa(s.shape,o);return i.runWebGPUProgram(l,[s],s.dtype,u)},_a={kernelName:n.PadV2,backendName:"webgpu",kernelFunc:za},Ma=Ln({opType:Qt.POW}),Na={kernelName:n.Pow,backendName:"webgpu",kernelFunc:Ma};const Fa={kernelName:n.Prelu,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:i,alpha:r}=t,s=new _n(Qt.PRELU,i.shape,r.shape);return n.runWebGPUProgram(s,[i,r],"float32")}};const Ea={kernelName:n.Prod,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:r}=t,{axis:s,keepDims:o}=i;return mr(r,s,o,"prod",n)}},Oa={kernelName:n.Range,backendName:"webgpu",kernelFunc:e=>{const{backend:t,attrs:n}=e,{start:i,stop:r,step:s,dtype:o}=n,a=Wi(i,r,s,o);return t.makeTensorInfo([a.length],o,a)}},Ba=Ln({opType:Qt.DIV}),La={kernelName:n.RealDiv,backendName:"webgpu",kernelFunc:Ba},Da=Bn({opType:an.RECIPROCAL}),Ua={kernelName:n.Reciprocal,backendName:"webgpu",kernelFunc:Da},Wa=Bn({opType:an.RELU}),Va={kernelName:n.Relu,backendName:"webgpu",kernelFunc:Wa},Ga=Bn({opType:an.RELU6}),Ha={kernelName:n.Relu6,backendName:"webgpu",kernelFunc:Ga};class qa{constructor(e,t,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const Ka={kernelName:n.ResizeBilinear,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{images:r}=t,{alignCorners:s,size:o,halfPixelCenters:a}=i,[u,l]=o,h=[{type:"float32",data:[s&&u>1?1:0,s&&l>1?1:0]},{type:"float32",data:[a?.5:0]}],c=new qa(r.shape,u,l);return n.runWebGPUProgram(c,[r],"float32",h)}};class Xa{constructor(e,t,n,i){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=i,this.shaderKey="resizeNearest_"+i}getUserCode(){let e;e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC";return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${e};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const ja={kernelName:n.ResizeNearestNeighbor,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:o,size:a}=i,[u,l]=a,h=[{type:"float32",data:[s&&u>1?1:0,s&&l>1?1:0]},{type:"float32",data:[s?.5:0]}],c=new Xa(r.shape,u,l,o);return n.runWebGPUProgram(c,[r],r.dtype,h)}};class Ya{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`\n      \n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    \n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `}}const Qa={kernelName:n.Reverse,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{dims:o}=r,a=s.shape.length;if(0===a)return Mn({inputs:{x:s},backend:i});const u=s.shape,l=[1,1,1,1];u.forEach((e,t)=>{l[t+4-a]=e});const h=n.util.parseAxisParam(o,s.shape),c=[0,0,0,0];h.forEach(e=>{c[e+4-a]=1});const d=[{type:"int32",data:c}],p=Rn({inputs:{x:s},backend:i,attrs:{shape:l}}),f=new Ya(l),m=i.runWebGPUProgram(f,[p],p.dtype,d);i.disposeData(p.dataId);const g=Rn({inputs:{x:m},backend:i,attrs:{shape:u}});return i.disposeData(m.dataId),g}};class Za{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,",this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`\n        ${_t("index")} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `}}const Ja={kernelName:n.RotateWithOffset,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:i})=>{const{image:r}=e,{radians:s,fillValue:o,center:a}=t,u=i,l=new Za(r.shape,o),[h,c]=n.backend_util.getImageCenter(a,r.shape[1],r.shape[2]),d=[{type:"float32",data:[h]},{type:"float32",data:[c]},{type:"float32",data:[Math.sin(s)]},{type:"float32",data:[Math.cos(s)]}];"number"==typeof o?d.push({type:"float32",data:[Number.parseFloat(o.toFixed(2))]}):d.push({type:"float32",data:o});return u.runWebGPUProgram(l,[r],r.dtype,d)}},eu=Bn({opType:an.ROUND}),tu={kernelName:n.Round,backendName:"webgpu",kernelFunc:eu},nu=Bn({opType:an.RSQRT,cpuKernelImpl:Vi}),iu={kernelName:n.Rsqrt,backendName:"webgpu",kernelFunc:nu};class ru{constructor(e,t,n,i,r,s,o,a=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=s,this.type=o,this.sumDupeIndices=a,this.dispatchLayout=Ht(e),this.dispatch=Wt(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${n}_${i}_${this.sliceDimGreaterThanOne}_${o}_${a}`;const u=Pt(r.length);this.uniforms=`sliceDim : i32, strides: ${u}, updatesSize: i32,`,this.updatesRank=i,this.indicesRank=n}getUserCode(){let e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");const t=`getIndices(${e})`,n=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides";let i="",r="";1===this.dispatchLayout.x.length?(i="flattenedIndex",r="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      "):2===this.dispatchLayout.x.length&&(i="vec2<i32>(flattenedIndex, coords[1])",r="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      ");const s=`getUpdates(${Array.from({length:this.updatesRank},(e,t)=>`coords[${t}]`).join(", ")})`;return`\n    ${r}\n      ${_t("index")} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${t}));\n            flattenedIndex = flattenedIndex + indexInside * ${n};\n          }\n          let updateValue =\n              ${Lt(this.type,!1)}(${s});\n          let flatIndex = getOutputIndexFromCoords(${i});\n\n          ${this.sumDupeIndices?At("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}\n        }\n      }`}}const su={kernelName:n.ScatterNd,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{indices:s,updates:o}=t,{shape:a}=r,{sliceRank:u,numUpdates:l,sliceSize:h,strides:c,outputSize:d}=n.backend_util.calculateShapes(o,s,a),p=[d/h,h];if(0===d)return i.makeTensorInfo(a,s.dtype);const f=Rn({inputs:{x:s},backend:i,attrs:{shape:[l,u]}}),m=Rn({inputs:{x:o},backend:i,attrs:{shape:[l,h]}}),g=m.dtype,b=Cn({backend:i,attrs:{shape:p,value:0,dtype:g}}),y=[{type:"int32",data:[u]},{type:"int32",data:c},{type:"int32",data:[n.util.sizeFromShape(m.shape)]}],x=new ru(m.shape,u,f.shape.length,m.shape.length,c,p,g),w=i.runWebGPUProgram(x,[m,f],g,y,b),k=Rn({inputs:{x:w},backend:i,attrs:{shape:a}});return i.disposeData(f.dataId),i.disposeData(m.dataId),i.disposeData(w.dataId),k}};class ou{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey="search_sorted_"+t}getUserCode(){return`\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${"left"===this.side?"<":"<="} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `}}const au={kernelName:n.SearchSorted,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{sortedSequence:r,values:s}=t,{side:o}=i,a=new ou([s.shape[0],s.shape[1]],o),u=[{type:"int32",data:[r.shape[1]]}];return n.runWebGPUProgram(a,[r,s],"int32",u)}};class uu{constructor(e,t,n){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=n,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)t="resRC",e="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],r=[];for(let e=0;e<this.outputShape.length;e++)r.push(""+n[e]),e<this.cRank&&i.push(""+n[e]);e=i.join(),t=r.join()}return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${e});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${t}));\n          } else {\n            setOutputAtIndex(index, getB(${t}));\n          }\n        }\n      }\n    `}}const lu={kernelName:n.Select,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i}=e,{condition:r,t:s,e:o}=t,a=new uu(r.shape.length,s.shape,s.shape.length);return i.runWebGPUProgram(a,[r,s,o],n.upcastType(s.dtype,o.dtype))}},hu=Bn({opType:an.SELU}),cu={kernelName:n.Selu,backendName:"webgpu",kernelFunc:hu},du=Bn({opType:an.SIGMOID}),pu={kernelName:n.Sigmoid,backendName:"webgpu",kernelFunc:du},fu=Bn({opType:an.SIGN}),mu={kernelName:n.Sign,backendName:"webgpu",kernelFunc:fu},gu=Bn({opType:an.SIN}),bu={kernelName:n.Sin,backendName:"webgpu",kernelFunc:gu},yu=Bn({opType:an.SINH}),xu={kernelName:n.Sinh,backendName:"webgpu",kernelFunc:yu},wu=Ln({opType:Qt.SUB,cpuKernelImpl:ji,supportsComplex:!0}),ku={kernelName:n.Sub,backendName:"webgpu",kernelFunc:wu};const vu={kernelName:n.Softmax,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{logits:s}=t,{dim:o}=r,a=n.util.parseAxisParam([o],s.shape),u=Mr({inputs:{x:s},backend:i,attrs:{reductionIndices:a,keepDims:!1}}),l=n.backend_util.expandShapeToKeepDim(u.shape,a),h=Rn({inputs:{x:u},backend:i,attrs:{shape:l}}),c=wu({inputs:{a:s,b:h},backend:i}),d=ro({inputs:{x:c},backend:i}),p=js({inputs:{x:d},backend:i,attrs:{axis:a,keepDims:!1}}),f=Rn({inputs:{x:p},backend:i,attrs:{shape:l}}),m=Ba({inputs:{a:d,b:f},backend:i});return i.disposeData(u.dataId),i.disposeData(h.dataId),i.disposeData(c.dataId),i.disposeData(d.dataId),i.disposeData(p.dataId),i.disposeData(f.dataId),m}},Su=Bn({opType:an.SOFTPLUS}),Iu={kernelName:n.Softplus,backendName:"webgpu",kernelFunc:Su},Cu={kernelName:n.SpaceToBatchND,backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{blockShape:o,paddings:a}=r;n.util.assert(s.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");const u=o.reduce((e,t)=>e*t),l=[[0,0]];l.push(...a);for(let e=1+o.length;e<s.shape.length;++e)l.push([0,0]);const h=[],c=za({inputs:{x:s},backend:i,attrs:{paddings:l,constantValue:0}}),d=n.backend_util.getReshaped(c.shape,o,u,!1),p=n.backend_util.getPermuted(d.length,o.length,!1),f=n.backend_util.getReshapedPermuted(c.shape,o,u,!1),m=Rn({inputs:{x:c},backend:i,attrs:{shape:d}}),g=dr({inputs:{x:m},backend:i,attrs:{perm:p}}),b=Rn({inputs:{x:g},backend:i,attrs:{shape:f}});return h.push(c),h.push(m),h.push(g),h.forEach(e=>i.disposeData(e.dataId)),b}};class Tu{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let i=0;i<n.length;i++)n[i]=e[i]*t[i];this.outputShape=n,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){const e=function(e,t=""){if(e>=5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`(resRC % ${t}aShape)`;const n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[];for(let r=0;r<e;r++)i.push(`(${n[r]} % ${t}aShape[${r}])`);return i.join()}(this.rank,"uniforms.");return`\n      ${_t("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${e}));\n        }\n      }\n    `}}function Ru(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{reps:o}=r;if(i.shouldExecuteOnCPU([s])||"string"===s.dtype||s.shape.length>=5){const e=i.readSync(s.dataId),t="string"===s.dtype?e.map(e=>n.util.decodeString(e)):e,r=n.buffer(s.shape,s.dtype,t),a=Yi(r,o);return i.makeTensorInfo(a.shape,a.dtype,a.values)}const a=new Tu(s.shape,o);return i.runWebGPUProgram(a,[s],s.dtype)}const Au={kernelName:n.Tile,backendName:"webgpu",kernelFunc:Ru};const $u={kernelName:n.SparseToDense,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{sparseIndices:s,sparseValues:o,defaultValue:a}=t,{outputShape:u}=r,{sliceRank:l,numUpdates:h,sliceSize:c,strides:d,outputSize:p}=n.backend_util.calculateShapes(o,s,u);if("string"===o.dtype){const e=i.bufferSync(s),t=i.bufferSync(o),r=n.util.decodeString(i.readSync(a.dataId)[0]),f=Gi(e,t,u,p,c,h,l,d,r,!1);return i.makeTensorInfo(u,f.dtype,f.values)}const f=[p/c,c],m=Rn({inputs:{x:s},backend:i,attrs:{shape:[h,l]}}),g=o.shape.length?Rn({inputs:{x:o},backend:i,attrs:{shape:[h,c]}}):Mn({inputs:{x:o},backend:i}),b=g.dtype,y=i.makeTensorInfo([],b,n.util.makeZerosTypedArray(1,b)),x=Rn({inputs:{x:a},backend:i,attrs:{shape:Array(f.length).fill(1)}}),w=Ru({inputs:{x:x},backend:i,attrs:{reps:f}}),k=[{type:"int32",data:[l]},{type:"int32",data:d},{type:"int32",data:[n.util.sizeFromShape([h,c])]}];switch(h){case 0:break;case 1:{const e=new ru([h,c],l,m.shape.length,g.shape.length,d,f,b,!1);i.runWebGPUProgram(e,[g,m],b,k,w)}break;default:{const e=new ru([h,c],l,m.shape.length,y.shape.length,d,f,b,!1);i.runWebGPUProgram(e,[y,m],b,k,w)}{const e=new ru([h,c],l,m.shape.length,g.shape.length,d,f,b);i.runWebGPUProgram(e,[g,m],b,k,w)}}const v=Rn({inputs:{x:w},backend:i,attrs:{shape:u}});return i.disposeData(m.dataId),i.disposeData(g.dataId),i.disposeData(x.dataId),i.disposeData(y.dataId),i.disposeData(w.dataId),v}};const Pu={kernelName:n.SplitV,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{numOrSizeSplits:o,axis:a}=r,u=n.util.parseAxisParam(a,s.shape)[0],l=n.backend_util.prepareSplitSize(s,o,u),h=s.shape.length,c=new Array(h).fill(0),d=s.shape.slice();return l.map(e=>{const t=[...d];t[u]=e;const n=Gr({inputs:{x:s},backend:i,attrs:{begin:c,size:t}});return c[u]+=e,n})}},zu=Bn({opType:an.SQRT}),_u={kernelName:n.Sqrt,backendName:"webgpu",kernelFunc:zu},Mu={kernelName:n.Square,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,i=t,r=new On(n.shape,an.SQUARE);return i.runWebGPUProgram(r,[n],n.dtype)}},Nu=Ln({opType:Qt.SQUARED_DIFFERENCE}),Fu={kernelName:n.SquaredDifference,backendName:"webgpu",kernelFunc:Nu};const Eu={kernelName:n.Step,backendName:"webgpu",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:i}=e,r=new On(i.shape,an.STEP,"stepAlpha : f32,"),s=[{type:"float32",data:[t.alpha]}];return n.runWebGPUProgram(r,[i],i.dtype,s)}};class Ou{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);const t=Pt(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e="";if(1===this.outputShape.length)e="coords * uniforms.strides + uniforms.begin";else{let t=0;e=this.outputShape.map((e,n)=>(t++,1===this.outputShape.length?`coords * uniforms.strides[${n}] + uniforms.begin[${n}]`:`coords[${t-1}] * uniforms.strides[${n}] + uniforms.begin[${n}]`)).join(",")}return`\n       ${_t("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${e}));\n         }\n       }\n     `}}const Bu={kernelName:n.StridedSlice,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{begin:o,end:a,strides:u,beginMask:l,endMask:h,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=r,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:b,isSimpleSlice:y,begin:x,end:w,strides:k}=n.slice_util.sliceInfo(s.shape,o,a,u,l,h,c,d,p);let v;if(g)v=Rn({inputs:{x:s},backend:i,attrs:{shape:m}});else if(b||y){n.util.assert(s.shape.length>=1,()=>"Input must have rank at least 1, got: "+s.shape.length);const e=n.slice_util.computeOutShape(x,w,k),t=Gr({inputs:{x:s},backend:i,attrs:{begin:x,size:e}});v=Rn({inputs:{x:t},backend:i,attrs:{shape:m}}),i.disposeData(t.dataId)}else{if(i.shouldExecuteOnCPU([s])){const e=i.readSync(s.dataId),t=n.buffer(s.shape,s.dtype,e),r=Ki(f,t,k,x);v=i.makeTensorInfo(m,s.dtype,r.values)}else{const e=new Ou(f),t=[{type:"int32",data:x},{type:"int32",data:k}],n=i.runWebGPUProgram(e,[s],s.dtype,t);v=Rn({inputs:{x:n},backend:i,attrs:{shape:m}}),i.disposeData(n.dataId)}}return v}};const Lu={kernelName:n.StringNGrams,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{separator:r,nGramWidths:s,leftPad:o,rightPad:a,padWidth:u,preserveShortSequences:l}=i,{data:h,dataSplits:c}=t,d=n.readSync(h.dataId),p=n.readSync(c.dataId),[f,m]=Xi(d,p,r,s,o,a,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(c.shape,"int32",m)]}},Du=Bn({opType:an.TAN}),Uu={kernelName:n.Tan,backendName:"webgpu",kernelFunc:Du},Wu=Bn({opType:an.TANH}),Vu={kernelName:n.Tanh,backendName:"webgpu",kernelFunc:Wu};class Gu{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,",this.shaderKey="swap"}getUserCode(){return`\n        ${_t("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}class Hu{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`\n        ${_t("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}function qu(e,t){null!==t&&e.disposeData(t.dataId)}function Ku(e){let t=1;for(;t<e;)t*=2;return t}const Xu={kernelName:n.TopK,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:i,attrs:r}=e,{x:s}=t,{k:o,sorted:a}=r,u=s.shape,l=u[u.length-1];if(i.shouldExecuteOnCPU([s])){const e=i.readSync(s.dataId),[t,n]=Qi(e,u,s.dtype,o,a);return[i.makeTensorInfo(t.shape,t.dtype,t.values),i.makeTensorInfo(n.shape,n.dtype,n.values)]}if(0===o)return u[u.length-1]=0,[i.makeTensorInfo(u,s.dtype,[]),i.makeTensorInfo(u,"int32",[])];if(1===l)return[s,Cn({attrs:{shape:u,dtype:"int32",value:0},backend:i})];const h=n.util.sizeFromShape(u)/l,c=Rn({inputs:{x:s},attrs:{shape:[h,l]},backend:i}),d=Ku(o),p=Ku(l);let f=null;const m=()=>null===f?[c,c]:[c,f],g=(e,t,n)=>{const r=m(),s=new Gu(n),o=[{type:"int32",data:[l]},{type:"int32",data:[null===f?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[e]},{type:"int32",data:[t]}],a=f;f=i.runWebGPUProgram(s,r,"int32",o),qu(i,a)};for(let e=1;e<d;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)g(t,n,[h,p])}for(let e=p;e>d;e/=2){const t=m(),n=new Hu([h,e/2]),r=[{type:"int32",data:[l]},{type:"int32",data:[null===f?1:0]},{type:"int32",data:[d]}],s=f;f=i.runWebGPUProgram(n,t,"int32",r),qu(i,s);const o=d/2,a=2*o;for(let e=o;e>=1;e/=2)g(a,e,f.shape)}let b=f;f=Gr({inputs:{x:f},backend:i,attrs:{begin:0,size:[h,o]}}),qu(i,b);let y=zo({inputs:{x:c,indices:f},backend:i,attrs:{axis:1,batchDims:1}});qu(i,c);const x=u.slice(0,-1);x.push(o),b=f,f=Rn({inputs:{x:f},attrs:{shape:x},backend:i}),qu(i,b);const w=y;return y=Rn({inputs:{x:y},attrs:{shape:x},backend:i}),qu(i,w),[y,f]}};class ju{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${_t("index")} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `}}const Yu=[Pn,tr,ir,sr,ar,lr,gr,br,xr,wr,vr,Ir,Tr,Ar,Pr,Br,Dr,Ur,qr,jr,es,ns,ss,En,cs,bs,ws,vs,Is,Ts,As,Ns,Fs,Es,Bs,Ws,Gs,qs,Qs,Js,to,io,so,ao,lo,po,Tn,mo,ko,bo,xo,Co,To,Ro,$o,_o,No,Eo,Nn,Oo,us,Lo,Uo,Vo,Go,qo,Xo,Yo,ea,Zo,na,ra,oa,ha,Nr,da,pa,Er,fa,ga,ya,wa,Xs,ka,va,Sa,Qr,Ca,Aa,$a,_a,Na,Fa,Ea,Oa,Jr,La,Ua,Va,Ha,An,Ka,ja,Qa,Ja,tu,iu,su,au,lu,cu,pu,mu,bu,xu,Hr,Eu,Bu,Lu,vu,Iu,Cu,$u,Pu,_u,Mu,Fu,ku,Ys,Uu,Vu,Au,Xu,{kernelName:n.Transform,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{image:r,transforms:s}=t,{interpolation:o,fillMode:a,fillValue:u,outputShape:l}=i,[h,c,d,p]=r.shape,[f,m]=null!=l?l:[c,d],g=new ju([h,f,m,p]),b="nearest"===o?1:2;let y;switch(a){case"constant":y=1;break;case"reflect":y=2;break;case"wrap":y=3;break;case"nearest":y=4;break;default:y=1}const x=[{type:"int32",data:[b]},{type:"int32",data:[y]},{type:"float32",data:[u]}];return n.runWebGPUProgram(g,[r,s],"float32",x)}},pr,{kernelName:n.Unpack,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{value:r}=t;let{axis:s}=i;s<0&&(s+=r.shape.length);const o=r,a=o.shape.length,u=r.shape[s],l=new Array(a-1);let h=0;for(let e=0;e<a;e++)e!==s&&(l[h++]=o.shape[e]);const c=[],d=new Array(a).fill(0),p=o.shape.slice();p[s]=1;const f=new Array(u);for(let e=0;e<f.length;e++){d[s]=e;const t=Gr({inputs:{x:o},backend:n,attrs:{begin:d,size:p}}),i=Rn({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=i,c.push(t)}return c.forEach(e=>n.disposeData(e.dataId)),f}},Ra];for(const e of Yu)n.registerKernel(e);function Qu(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];switch(t.length){case 0:e="fn main() ";break;case 1:e="fn main(".concat(t[0]," : i32)");break;default:throw Error("Unreachable")}return e}var Zu=function(){function e(e){this.variableNames=["A","B"],this.size=!0;this.workgroupSize=[32,1,1],this.outputShape=[e[0],1],this.dispatchLayout=Ht(this.outputShape),this.dispatch=Wt(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="getpointsConfidenceOp"}return e.prototype.getUserCode=function(){return"\n        ".concat(Qu("index")," {\n          if (index < uniforms.size) {\n            let y = B[index * 2];\n            let x = B[index * 2 + 1];\n            let outIndex = y * uniforms.aShape.x * uniforms.aShape.z + x * uniforms.aShape.z + index;\n            result[index] = A[outIndex];\n          }\n        }\n        ")},e}();function Ju(e,t){if(n.backend()instanceof Yt)return function(e,t){var i=n.backend(),r=new Zu(t.shape),s=i.runWebGPUProgram(r,[e,t],"float32");return n.engine().makeTensorFromTensorInfo(s)}(e,t);throw new Error("getPointsConfidenceWebGPU is not supported in this backend!")}var el=function(){function e(e){if(this.variableNames=["A","B"],this.size=!0,this.supportedLastDimension=2,2!==e.length||e[1]!==this.supportedLastDimension)throw new Error("GetOffsetVectorsProgram only supports shape of [x, ".concat(this.supportedLastDimension,"], but current shape is ").concat(e));this.workgroupSize=[32,1,1],this.outputShape=e;var t=[e[0],1];this.dispatchLayout=Ht(t),this.dispatch=Wt(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="GetOffsetVectors"}return e.prototype.getUserCode=function(){return"\n    fn getOffsetPoint(y: i32, x: i32, index: i32) -> vec2<i32> {\n      let outIndexY = y * uniforms.bShape.x * uniforms.bShape.y + x * uniforms.bShape.y + index;\n      let outIndexX = outIndexY + uniforms.bShape.z;\n      let outY = i32(B[outIndexY]);\n      let outX = i32(B[outIndexX]);\n      return vec2<i32>(outY, outX);\n    }\n\n    ".concat(Qu("index")," {\n      if (index < uniforms.size) {\n        let indexY = index * ").concat(this.supportedLastDimension,";\n        let indexX = indexY + 1;\n        let heatmapY = A[indexY];\n        let heatmapX = A[indexX];\n        let out = getOffsetPoint(i32(heatmapY), i32(heatmapX), index);\n        result[indexY] = f32(out[0]);\n        result[indexX] = f32(out[1]);\n      }\n    }\n    ")},e}();function tl(e,t){if(n.backend()instanceof Yt)return function(e,t){var i=n.backend(),r=new el(e.shape),s=i.runWebGPUProgram(r,[e,t],"float32");return n.engine().makeTensorFromTensorInfo(s)}(e,t);throw new Error("getOffsetVectorsGPU is not supported in this backend!")}function nl(e){var t=e.shape,i=t[0],r=t[1],s=t[2];return n.tidy((function(){var t,o,a=n.reshape(e,[i*r,s]),u=n.argMax(a,0),l=n.expandDims(n.div(u,n.scalar(r,"int32")),1),h=n.expandDims((t=u,o=r,n.tidy((function(){var e=n.div(t,n.scalar(o,"int32"));return n.sub(t,n.mul(e,n.scalar(o,"int32")))}))),1);return n.concat([l,h],1)}))}function il(e,t,i){return n.tidy((function(){var r=function(e,t){for(var i=[],r=0;r<h.length;r++){var s=e.get(r,0).valueOf(),o=e.get(r,1).valueOf(),a=rl(s,o,r,t),u=a.x,l=a.y;i.push(l),i.push(u)}return n.tensor2d(i,[h.length,2])}(e,i);return n.add(n.cast(n.mul(e.toTensor(),n.scalar(t,"int32")),"float32"),r)}))}function rl(e,t,n,i){return{y:i.get(e,t,n),x:i.get(e,t,n+h.length)}}function sl(e,t,n){return a(this,void 0,void 0,(function(){var i,r,s,o,a,l,c,d,p,f;return u(this,(function(u){switch(u.label){case 0:return i=0,r=nl(e),[4,Promise.all([e.buffer(),t.buffer(),r.buffer()])];case 1:return s=u.sent(),o=s[0],a=s[1],l=s[2],[4,(c=il(l,n,a)).buffer()];case 2:return d=u.sent(),p=Array.from(function(e,t){for(var n=t.shape[0],i=new Float32Array(n),r=0;r<n;r++){var s=t.get(r,0),o=t.get(r,1);i[r]=e.get(s,o,r)}return i}(o,l)),f=p.map((function(e,t){return i+=e,{y:d.get(t,0),x:d.get(t,1),score:e,name:h[t]}})),r.dispose(),c.dispose(),[2,{keypoints:f,score:i/f.length}]}}))}))}function ol(e,t,i){return a(this,void 0,void 0,(function(){var r,s,o;return u(this,(function(a){return r=nl(e),s=function(e,t,i){return n.tidy((function(){var r=tl(e,i);return n.add(n.cast(n.mul(e,n.scalar(t,"int32")),"float32"),r)}))}(r,i,t),o=Ju(e,r),[2,[s,o]]}))}))}function al(e,t){return(e-1)%t==0}var ul="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",ll="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/";function hl(e,t){return function(e,t){return(e-1)%t==0}(e,t)?e:Math.floor(e/t)*t+1}var cl=function(){function e(e,t){this.posenetModel=e;var i=this.posenetModel.inputs[0].shape;n.util.assert(-1===i[1]&&-1===i[2],(function(){return"Input shape [".concat(i[1],", ").concat(i[2],"] ")+"must both be equal to or -1"}));var r,s,o=(r=t.inputResolution,s=t.outputStride,{height:hl(r.height,s),width:hl(r.width,s)});!function(e){n.util.assert(Ye.indexOf(e)>=0,(function(){return"outputStride of ".concat(e," is invalid. ")+"It must be either 8 or 16."}))}(t.outputStride),function(e,t){n.util.assert(al(e.height,t),(function(){return"height of ".concat(e.height," is invalid for output stride ")+"".concat(t,".")})),n.util.assert(al(e.width,t),(function(){return"width of ".concat(e.width," is invalid for output stride ")+"".concat(t,".")}))}(o,t.outputStride),this.inputResolution=o,this.outputStride=t.outputStride,this.architecture=t.architecture}return e.prototype.estimatePoses=function(e,t){return void 0===t&&(t=Je),a(this,void 0,void 0,(function(){return u(this,(function(n){return[2,this.estimatePosesGPU(e,t,!1)]}))}))},e.prototype.estimatePosesGPU=function(e,t,i){return void 0===t&&(t=Je),void 0===i&&(i=!1),a(this,void 0,void 0,(function(){var r,s,a,l,h,c,d,p,f,m,g,b,y,x,w,k,v,S;return u(this,(function(u){switch(u.label){case 0:return r=function(e){var t=e;if(null==t.maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw new Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1){if((t=o(o({},et),t)).scoreThreshold<0||t.scoreThreshold>1)throw new Error("Invalid scoreThreshold ".concat(t.scoreThreshold,". ")+"Should be in range [0.0, 1.0]");if(t.nmsRadius<=0)throw new Error("Invalid nmsRadius ".concat(t.nmsRadius,"."))}return t}(t),null==e?[2,i?[[],[]]:[]]:(this.maxPoses=r.maxPoses,s=O(e,{outputTensorSize:this.inputResolution,keepAspectRatio:!0,borderMode:"replicate"}),a=s.imageTensor,l=s.padding,h="ResNet50"===this.architecture?n.add(a,tt):E(a,[-1,1]),c=this.posenetModel.predict(h),"ResNet50"===this.architecture?(d=n.squeeze(c[2],[0]),p=n.squeeze(c[3],[0]),f=n.squeeze(c[0],[0]),m=n.squeeze(c[1],[0])):(d=n.squeeze(c[0],[0]),p=n.squeeze(c[1],[0]),f=n.squeeze(c[2],[0]),m=n.squeeze(c[3],[0])),g=n.sigmoid(p),1!==this.maxPoses?[3,5]:i?[4,ol(g,d,this.outputStride)]:[3,2]);case 1:return y=u.sent(),w=y[0],x=y[1],b=[w,x],[3,4];case 2:return[4,sl(g,d,this.outputStride)];case 3:w=u.sent(),b=[w],u.label=4;case 4:return[3,7];case 5:if(i)throw new Error("GPU renderer only supports single pose!");return[4,xt(g,d,f,m,this.outputStride,this.maxPoses,r.scoreThreshold,r.nmsRadius)];case 6:b=u.sent(),u.label=7;case 7:if(i){if(!0===r.flipHorizontal)throw new Error("flipHorizontal is not supported!");k=this.getCanvasInfo(T(e),this.inputResolution,l)}else S=T(e),v=function(e,t,n,i){var r=t.height,s=t.width,o=r/(n.height*(1-i.top-i.bottom)),a=s/(n.width*(1-i.left-i.right)),u=-i.top*n.height,l=-i.left*n.width;if(1===a&&1===o&&0===u&&0===l)return e;for(var h=0,c=e;h<c.length;h++)for(var d=0,p=c[h].keypoints;d<p.length;d++){var f=p[d];f.x=(f.x+l)*a,f.y=(f.y+u)*o}return e}(b,S,this.inputResolution,l),r.flipHorizontal&&(v=function(e,t){for(var n=0,i=e;n<i.length;n++)for(var r=0,s=i[n].keypoints;r<s.length;r++){var o=s[r];o.x=t.width-1-o.x}return e}(v,S));return a.dispose(),h.dispose(),n.dispose(c),d.dispose(),p.dispose(),f.dispose(),m.dispose(),g.dispose(),[2,i?[b,k]:v]}}))}))},e.prototype.getCanvasInfo=function(e,t,n){var i=e.height,r=e.width,s=i/(t.height*(1-n.top-n.bottom)),o=r/(t.width*(1-n.left-n.right)),a=-n.top*t.height;return[-n.left*t.width,a,o,s,e.width,e.height]},e.prototype.dispose=function(){this.posenetModel.dispose()},e.prototype.reset=function(){},e}();function dl(e){return void 0===e&&(e=Ke),a(this,void 0,void 0,(function(){var t,n,r,s,o;return u(this,(function(a){switch(a.label){case 0:return"ResNet50"!==(t=function(e){var t=e||Ke;if(null==t.architecture&&(t.architecture="MobileNetV1"),Xe.indexOf(t.architecture)<0)throw new Error("Invalid architecture ".concat(t.architecture,". ")+"Should be one of ".concat(Xe));if(null==t.inputResolution&&(t.inputResolution={height:257,width:257}),null==t.outputStride&&(t.outputStride=16),je[t.architecture].indexOf(t.outputStride)<0)throw new Error("Invalid outputStride ".concat(t.outputStride,". ")+"Should be one of ".concat(je[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.multiplier&&(t.multiplier=1),Qe[t.architecture].indexOf(t.multiplier)<0)throw new Error("Invalid multiplier ".concat(t.multiplier,". ")+"Should be one of ".concat(Qe[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.quantBytes&&(t.quantBytes=4),Ze.indexOf(t.quantBytes)<0)throw new Error("Invalid quantBytes ".concat(t.quantBytes,". ")+"Should be one of ".concat(Ze," ")+"for architecture ".concat(t.architecture,"."));if("MobileNetV1"===t.architecture&&32===t.outputStride&&1!==t.multiplier)throw new Error("When using an output stride of 32, you must select 1 as the multiplier.");return t}(e)).architecture?[3,2]:(u=t.outputStride,l=t.quantBytes,h="model-stride".concat(u,".json"),n=4===l?ll+"float/"+h:ll+"quant".concat(l,"/")+h,[4,i.loadGraphModel(t.modelUrl||n)]);case 1:return r=a.sent(),[2,new cl(r,t)];case 2:return s=function(e,t,n){var i={1:"100",.75:"075",.5:"050"},r="model-stride".concat(e,".json");return 4===n?ul+"float/".concat(i[t],"/")+r:ul+"quant".concat(n,"/").concat(i[t],"/")+r}(t.outputStride,t.multiplier,t.quantBytes),[4,i.loadGraphModel(t.modelUrl||s)];case 3:return o=a.sent(),[2,new cl(o,t)]}var u,l,h}))}))}var pl={keypointsToNormalizedKeypoints:J},fl={modelType:{SINGLEPOSE_LIGHTNING:"SinglePose.Lightning",SINGLEPOSE_THUNDER:"SinglePose.Thunder",MULTIPOSE_LIGHTNING:"MultiPose.Lightning"}};e.calculators=pl,e.createDetector=function(t,n){return a(this,void 0,void 0,(function(){var i,r;return u(this,(function(s){switch(t){case e.SupportedModels.PoseNet:return[2,dl(n)];case e.SupportedModels.BlazePose:if(r=void 0,null!=(i=n)){if("tfjs"===i.runtime)return[2,Re(n)];if("mediapipe"===i.runtime)return[2,C(n)];r=i.runtime}throw new Error("Expect modelConfig.runtime to be either 'tfjs' "+"or 'mediapipe', but got ".concat(r));case e.SupportedModels.MoveNet:return[2,qe(n)];default:throw new Error("".concat(t," is not a supported model name."))}}))}))},e.movenet=fl,e.util=Ne,Object.defineProperty(e,"__esModule",{value:!0})}));
